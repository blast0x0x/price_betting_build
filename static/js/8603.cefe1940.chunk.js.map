{"version":3,"file":"static/js/8603.cefe1940.chunk.js","mappings":"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","sources":["../node_modules/ethers/src.ts/constants/addresses.ts","components/Timer.jsx","pages/Presale.jsx"],"sourcesContent":["\n/**\n *  A constant for the zero address.\n *\n *  (**i.e.** ``\"0x0000000000000000000000000000000000000000\"``)\n */\nexport const ZeroAddress: string = \"0x0000000000000000000000000000000000000000\";\n\n","import { useState, useEffect } from 'react'\r\nimport './Timer.scss'\r\n\r\nexport default function Timer({timeToEnd}) {\r\n  const [days, setDays] = useState(0)\r\n  const [hours, setHours] = useState(0)\r\n  const [minutes, setMinutes] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const getTimeUntil = () => {\r\n      const deadline = timeToEnd ? parseInt(timeToEnd) * 1000 : 0\r\n      const time = deadline - Date.now()\r\n      if (time < 0) {\r\n        setDays(0)\r\n        setHours(0)\r\n        setMinutes(0)\r\n      } else {\r\n        const seconds = Math.floor((time / 1000) % 60)\r\n        const minutes = Math.floor((time / 1000 / 60) % 60)\r\n        const hours = Math.floor((time / (1000 * 60 * 60)) % 24)\r\n        const days = Math.floor(time / (1000 * 60 * 60 * 24))\r\n        setDays(days)\r\n        setHours(hours)\r\n        setMinutes(minutes)\r\n      }\r\n    }\r\n    const timer = setInterval(getTimeUntil, 1000)\r\n\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n  }, [timeToEnd])\r\n\r\n  return (\r\n    <div className=\"timer\">\r\n      <div>\r\n        <span className=\"number-container end\">{days < 10 ? 0 : Math.floor(days / 10)}</span>\r\n        <span className=\"number-container mid\">{days % 10}</span>\r\n        <div className='unit text-center'>days</div>\r\n      </div>\r\n      <div>\r\n        <span className=\"number-container center\">{hours < 10 ? 0 : Math.floor(hours / 10)}</span>\r\n        <span className=\"number-container center\">{hours % 10}</span>\r\n        <div className='unit text-center'>hours</div>\r\n      </div>\r\n      <div>\r\n        <span className=\"number-container mid\">{minutes < 10 ? 0 : Math.floor(minutes / 10)}</span>\r\n        <span className=\"number-container end\">{minutes % 10}</span>\r\n        <div className='unit text-center'>minutes</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { useState, useEffect, useContext } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport toast from \"react-hot-toast\";\r\nimport { Container, Image } from 'react-bootstrap'\r\nimport Layout from 'layouts'\r\nimport DancegirlGif from 'assets/images/dancegir.gif'\r\nimport NoWaifuNoLifeGif from 'assets/images/nowaifunolife.gif'\r\nimport CroPng from 'assets/images/cro.png'\r\nimport './Presale.scss'\r\nimport Timer from 'components/Timer'\r\n// import Slider from 'rc-slider'\r\nimport 'rc-slider/assets/index.css'\r\nimport RoundButton from 'components/RoundButton'\r\n// import { useMediaQuery } from \"@uidotdev/usehooks\";\r\nimport { useChainId, useAccount, useBalance, useReadContract, useWriteContract } from \"wagmi\";\r\n\r\nimport {\r\n  TEST_NET,\r\n  PRESALE_ADDRESS_TEST,\r\n  PRESALE_ADDRESS_MAIN,\r\n} from \"../config\";\r\nimport PresaleAbi from \"../config/abis/PRESALE_ABI.json\";\r\n// import { Web3Context } from \"../context/Web3Context\";\r\n// import { min } from \"lodash\";\r\nimport { RefreshContext } from '../context/RefreshContext'\r\n\r\nconst Presale = () => {\r\n  const tokenInfo = [\r\n    { h: 'TOKEN PRE-SALE POOL (%)', d: '3BN (30%)' },\r\n    { h: 'INITIAL OFFERING MARKET CAP', d: 'BASED ON DEMAND' },\r\n    { h: 'MIN $CRO INVESTMENT', d: '200 $CRO' },\r\n    { h: 'MAX $CRO PER WALLET', d: 'USD 20K (IN $CRO EQUIVALENT)' },\r\n    { h: 'START DATE', d: 'Nov 20th, 3:00PM CET' },\r\n    { h: 'END DATE', d: 'Nov 22nd, 3:00PM CET' },\r\n    { h: 'CLAIM DATE', d: 'Nov 22nd, 4:00PM CET' },\r\n    { h: 'USE OF PROCEEDS', d: '60% LIQUIDITY POOL, 20% MARKETING, 20% TEAM' }\r\n  ]\r\n\r\n  return (\r\n    <table className=\"presale-table\">\r\n      <tbody>\r\n        {\r\n          tokenInfo.map(info => (\r\n            <tr key={info.h}>\r\n              <th>{info.h}</th>\r\n              <td>{info.d}</td>\r\n            </tr>\r\n          ))\r\n        }\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nconst useRefresh = () => {\r\n  const { fast, slow } = useContext(RefreshContext)\r\n  return { fastRefresh: fast, fastRefresh: slow }\r\n}\r\n\r\nexport default function PresalePage() {\r\n\r\n  // const { callContractWait } = useContext(Web3Context);\r\n  const chainId = useChainId();\r\n  const account = useAccount();\r\n  const { data: balance, refetch: refetchBalance } = useBalance({ address: account.address });\r\n\r\n  const { data: txResult, writeContractAsync } = useWriteContract();\r\n\r\n  const { data: timeToStart } = useReadContract({\r\n    address: chainId === TEST_NET ? PRESALE_ADDRESS_TEST : PRESALE_ADDRESS_MAIN,\r\n    abi: PresaleAbi,\r\n    functionName: \"timeToStart\",\r\n    args: [],\r\n    chainId: chainId,\r\n  });\r\n\r\n  const { data: timeToEnd } = useReadContract({\r\n    address: chainId === TEST_NET ? PRESALE_ADDRESS_TEST : PRESALE_ADDRESS_MAIN,\r\n    abi: PresaleAbi,\r\n    functionName: \"timeToEnd\",\r\n    args: [],\r\n    chainId: chainId,\r\n  });\r\n\r\n  const { data: timeToClaim, refetch: refetchTimeToClaim } = useReadContract({\r\n    address: chainId === TEST_NET ? PRESALE_ADDRESS_TEST : PRESALE_ADDRESS_MAIN,\r\n    abi: PresaleAbi,\r\n    functionName: \"timeToClaim\",\r\n    args: [],\r\n    chainId: chainId,\r\n  });\r\n\r\n  const { data: minimumCROAmount, refetch: refetchMinimumCROAmount } = useReadContract({\r\n    address: chainId === TEST_NET ? PRESALE_ADDRESS_TEST : PRESALE_ADDRESS_MAIN,\r\n    abi: PresaleAbi,\r\n    functionName: \"minimumCROAmount\",\r\n    args: [],\r\n    chainId: chainId,\r\n  });\r\n\r\n  const { data: userDeposited, refetch: refetchUserDeposited } = useReadContract({\r\n    address: chainId === TEST_NET ? PRESALE_ADDRESS_TEST : PRESALE_ADDRESS_MAIN,\r\n    abi: PresaleAbi,\r\n    functionName: \"userDeposited\",\r\n    args: [account.address ? account.address : ethers.ZeroAddress],\r\n    chainId: chainId,\r\n  });\r\n\r\n  const { data: userClaimed, refetch: refetchUserClaimed } = useReadContract({\r\n    address: chainId === TEST_NET ? PRESALE_ADDRESS_TEST : PRESALE_ADDRESS_MAIN,\r\n    abi: PresaleAbi,\r\n    functionName: \"userClaimed\",\r\n    args: [account.address ? account.address : ethers.ZeroAddress],\r\n    chainId: chainId,\r\n  });\r\n\r\n  const { data: croTotal, refetch: refetchCroTotal } = useReadContract({\r\n    address: chainId === TEST_NET ? PRESALE_ADDRESS_TEST : PRESALE_ADDRESS_MAIN,\r\n    abi: PresaleAbi,\r\n    functionName: \"croTotal\",\r\n    args: [],\r\n    chainId: chainId,\r\n  });\r\n\r\n  const [open, setOpen] = useState(false)\r\n  const [croValue, setCroValue] = useState(0.0)\r\n  const [isPendingDeposit, setIsPendingDeposit] = useState(false);\r\n  const [isPendingClaim, setIsPendingClaim] = useState(false);\r\n  const [claimMode, setClaimMode] = useState(false);\r\n  const [countdownTime, setCountdownTime] = useState(0);\r\n  const [presaleStatus, setPresaleStatus] = useState(\"\");\r\n\r\n  const { fastRefresh } = useRefresh();\r\n\r\n  // const isMobile = useMediaQuery(\"only screen and (max-width: 768px)\");\r\n\r\n  useEffect(() => {\r\n    const timestamp = parseInt((Date.now() / 1000).toFixed(0));\r\n    // if (timestamp > Number(timeToStart) && timestamp < Number(timeToEnd)) {\r\n    if (timestamp > Number(timeToStart)) {\r\n      setOpen(true);\r\n    } else {\r\n      setOpen(false);\r\n    }\r\n  }, [timeToStart, timeToEnd]);\r\n\r\n  useEffect(() => {\r\n    let countTime = 0;\r\n\r\n    if (Date.now() / 1000 < timeToStart) {\r\n      countTime = timeToStart;\r\n      setPresaleStatus(\"Presale is not open. Come back in:\");\r\n    }\r\n    else if (Date.now() / 1000 >= timeToStart && Date.now() / 1000 < timeToEnd) {\r\n      countTime = timeToEnd;\r\n      setPresaleStatus(\"Presale is currently underway. It ends within:\");\r\n    }\r\n    else if (Date.now() / 1000 >= timeToEnd && Date.now() / 1000 < timeToClaim) {\r\n      countTime = timeToClaim;\r\n      setPresaleStatus(\"Claim is not open. Come back in:\");\r\n    }\r\n    else {\r\n      countTime = 0;\r\n      setPresaleStatus(\"Presale has concluded.\");\r\n    }\r\n\r\n    setCountdownTime(countTime);\r\n  }, [timeToStart, timeToEnd, timeToClaim])\r\n\r\n  useEffect(() => {\r\n    refetchBalance();\r\n    refetchTimeToClaim();\r\n    refetchMinimumCROAmount();\r\n    refetchUserDeposited();\r\n    refetchUserClaimed();\r\n  }, [fastRefresh])\r\n\r\n  async function handleDeposit() {\r\n    if (account.isDisconnected) {\r\n      toast.error(\"Confirm Your Wallet Connection!\");\r\n      return;\r\n    }\r\n\r\n    if (croValue < (minimumCROAmount ? parseInt(ethers.formatUnits(minimumCROAmount, \"ether\")) : 200)) {\r\n      toast.error(`The minimum deposit amount is ${minimumCROAmount ? parseInt(ethers.formatUnits(minimumCROAmount, \"ether\")) : 200} $CRO.`);\r\n      return;\r\n    }\r\n\r\n    if (parseFloat(balance.formatted) <= croValue) {\r\n      toast.error(\"Insufficient CRO balance!\");\r\n      return;\r\n    }\r\n\r\n    const timestamp = parseInt((Date.now() / 1000).toFixed(0));\r\n    if (timestamp < Number(timeToStart) || timestamp > Number(timeToEnd)) {\r\n      toast.error(\"Finished Deposit Time!\");\r\n      return;\r\n    }\r\n\r\n    setIsPendingDeposit(true);\r\n\r\n    await writeContractAsync({\r\n      address: chainId === TEST_NET ? PRESALE_ADDRESS_TEST : PRESALE_ADDRESS_MAIN,\r\n      abi: PresaleAbi,\r\n      functionName: \"depositCRO\",\r\n      args: [],\r\n      value: ethers.parseEther(croValue.toString())\r\n    })\r\n      .then(() => {\r\n        refetchBalance();\r\n        refetchUserDeposited();\r\n        refetchMinimumCROAmount();\r\n        setIsPendingDeposit(false);\r\n        toast.success(\"Deposit Submitted!\");\r\n      })\r\n      .catch((err) => {\r\n        setIsPendingDeposit(false);\r\n      });\r\n  }\r\n\r\n  async function handleClaim() {\r\n    if (account.isDisconnected) {\r\n      toast.error(\"Confirm Your Wallet Connection!\");\r\n      return;\r\n    }\r\n\r\n    const timestamp = parseInt((Date.now() / 1000).toFixed(0));\r\n    if (timestamp < Number(timeToClaim)) {\r\n      toast.error(\"Please wait for claim time!\");\r\n      return;\r\n    }\r\n\r\n    if (userClaimed) {\r\n      toast.error(\"You already claimed. Please check your wallet!\");\r\n      return;\r\n    }\r\n\r\n    setIsPendingClaim(true);\r\n    await writeContractAsync({\r\n      address: chainId === TEST_NET ? PRESALE_ADDRESS_TEST : PRESALE_ADDRESS_MAIN,\r\n      abi: PresaleAbi,\r\n      functionName: \"claimToken\",\r\n      args: [],\r\n    })\r\n      .then(() => {\r\n        refetchUserDeposited();\r\n        setIsPendingClaim(false);\r\n        toast.success(\"Claim Submitted!\");\r\n      })\r\n      .catch((err) => {\r\n        setIsPendingClaim(false);\r\n      });\r\n  }\r\n\r\n  function getDepositBtnText() {\r\n    if (isPendingDeposit) return \"Depositing ... \";\r\n\r\n    return \"Deposit\";\r\n  }\r\n\r\n  function getClaimBtnText() {\r\n    if (isPendingClaim) return \"Claiming ... \";\r\n\r\n    return \"Claim $GOTCHA\";\r\n  }\r\n\r\n  function handleMax() {\r\n    setCroValue(parseFloat(balance.formatted).toFixed(2) - 2);\r\n  }\r\n\r\n  const handleChange = async (event) => {\r\n    const value = event.target.value;\r\n    setCroValue(value);\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Image src={DancegirlGif} id='dance-girl' />\r\n      <Container>\r\n        <div className='hero'>\r\n          <Image src={NoWaifuNoLifeGif} id='no-gotcha-no-life' />\r\n          {\r\n            open ? <div className='presale-comp'>\r\n              {/* false ? <div className='presale-comp'> */}\r\n              <div className='total-raised'>\r\n                Total Raised: {croTotal ? parseInt(ethers.formatUnits(croTotal, \"ether\")) : 0} $CRO\r\n              </div>\r\n              <div className={`setter ${claimMode ? 'claim' : ''}`}>\r\n                <button id={!claimMode ? \"public-sale\" : \"claim\"} onClick={() => setClaimMode(false)}>Public sale</button>\r\n                <button id={claimMode ? \"public-sale\" : \"claim\"} onClick={() => setClaimMode(true)}>Claim</button>\r\n              </div>\r\n              {\r\n                !claimMode ?\r\n                  <>\r\n                    <div className=\"input-token-panel\">\r\n                      <div className='input-token-balance'>\r\n                        <span className='fs-20'>Balance: {balance ? parseFloat(balance.formatted).toFixed(2) : 0}</span>\r\n                      </div>\r\n                      <div className=\"input-token-box\">\r\n                        <input type=\"number\" className=\"input-token\" name=\"input_from\" placeholder='0.0' value={croValue} onChange={handleChange} />\r\n                        <button className='btn-max' onClick={handleMax}>MAX</button>\r\n                        <div className=\"cro-box\">\r\n                          <Image className=\"image-cro\" src={CroPng}></Image>\r\n                          <div>CRO</div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <RoundButton onClick={handleDeposit} className='deposit-btn'>{getDepositBtnText()}</RoundButton>\r\n                  </>\r\n                  :\r\n                  <>\r\n                    <p className=\"amount\">\r\n                      Deposited {userDeposited ? parseInt(ethers.formatUnits(userDeposited, \"ether\")) : 0} $CRO\r\n                    </p>\r\n                    <RoundButton onClick={handleClaim} className='deposit-btn'>{getClaimBtnText()}</RoundButton>\r\n                  </>\r\n              }\r\n            </div>\r\n              :\r\n              <>\r\n                <p className='hero-text'>{presaleStatus}</p>\r\n                <Timer timeToEnd={countdownTime} />\r\n                {/* <p className='hero-text'>The presale has not opened yet. Please return later.</p>\r\n                <Timer timeToEnd={0} /> */}\r\n              </>\r\n          }\r\n        </div>\r\n        <Presale />\r\n      </Container>\r\n    </Layout>\r\n  )\r\n}\r\n"],"names":["ZeroAddress","Timer","_ref","timeToEnd","days","setDays","useState","hours","setHours","minutes","setMinutes","useEffect","timer","setInterval","getTimeUntil","time","parseInt","Date","now","Math","floor","clearInterval","_jsxs","className","children","_jsx","Presale","h","d","map","info","useRefresh","fast","slow","useContext","RefreshContext","fastRefresh","PresalePage","chainId","useChainId","account","useAccount","data","balance","refetch","refetchBalance","useBalance","address","txResult","writeContractAsync","useWriteContract","timeToStart","useReadContract","TEST_NET","PRESALE_ADDRESS_TEST","PRESALE_ADDRESS_MAIN","abi","PresaleAbi","functionName","args","timeToClaim","refetchTimeToClaim","minimumCROAmount","refetchMinimumCROAmount","userDeposited","refetchUserDeposited","ethers","userClaimed","refetchUserClaimed","croTotal","refetchCroTotal","open","setOpen","croValue","setCroValue","isPendingDeposit","setIsPendingDeposit","isPendingClaim","setIsPendingClaim","claimMode","setClaimMode","countdownTime","setCountdownTime","presaleStatus","setPresaleStatus","toFixed","Number","countTime","Layout","Image","src","DancegirlGif","id","Container","NoWaifuNoLifeGif","onClick","_Fragment","RoundButton","async","isDisconnected","toast","error","then","success","catch","err","parseFloat","formatted","type","name","placeholder","value","onChange","event","target","CroPng","timestamp","toString"],"sourceRoot":""}