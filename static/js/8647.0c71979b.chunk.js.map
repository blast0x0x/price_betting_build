{"version":3,"file":"static/js/8647.0c71979b.chunk.js","mappings":"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","sources":["../node_modules/ethers/src.ts/constants/addresses.ts","pages/Presale.jsx","components/Timer.jsx"],"sourcesContent":["\n/**\n *  A constant for the zero address.\n *\n *  (**i.e.** ``\"0x0000000000000000000000000000000000000000\"``)\n */\nexport const ZeroAddress: string = \"0x0000000000000000000000000000000000000000\";\n\n","import { useState, useEffect, useContext } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport toast from \"react-hot-toast\";\r\nimport { Container, Image } from 'react-bootstrap'\r\nimport Layout from 'layouts'\r\nimport DancegirlGif from 'assets/images/dancegir.gif'\r\nimport NoWaifuNoLifeGif from 'assets/images/nowaifunolife.gif'\r\nimport CroPng from 'assets/images/cro.png'\r\nimport './Presale.scss'\r\nimport Timer from 'components/Timer'\r\n// import Slider from 'rc-slider'\r\nimport 'rc-slider/assets/index.css'\r\nimport RoundButton from 'components/RoundButton'\r\n// import { useMediaQuery } from \"@uidotdev/usehooks\";\r\nimport { useChainId, useAccount, useBalance, useReadContract, useWriteContract } from \"wagmi\";\r\n\r\nimport {\r\n  TEST_NET,\r\n  PRESALE_ADDRESS_TEST,\r\n  PRESALE_ADDRESS_MAIN,\r\n} from \"../config\";\r\nimport PresaleAbi from \"../config/abis/PRESALE_ABI.json\";\r\n// import { Web3Context } from \"../context/Web3Context\";\r\n// import { min } from \"lodash\";\r\nimport { RefreshContext } from '../context/RefreshContext'\r\n\r\nconst Presale = () => {\r\n  const tokenInfo = [\r\n    { h: 'TOKEN PRE-SALE POOL (%)', d: '3BN (30%)' },\r\n    { h: 'INITIAL OFFERING MARKET CAP', d: 'BASED ON DEMAND' },\r\n    { h: 'MIN $CRO INVESTMENT', d: '200 $CRO' },\r\n    { h: 'MAX $CRO PER WALLET', d: 'USD 20K (IN $CRO EQUIVALENT)' },\r\n    { h: 'START DATE', d: 'Nov 20th, 3:00PM CET' },\r\n    { h: 'END DATE', d: 'Nov 22nd, 3:00PM CET' },\r\n    { h: 'CLAIM DATE', d: 'Nov 22nd, 4:00PM CET' },\r\n    { h: 'USE OF PROCEEDS', d: '60% LIQUIDITY POOL, 20% MARKETING, 20% TEAM' }\r\n  ]\r\n\r\n  return (\r\n    <table className=\"presale-table\">\r\n      <tbody>\r\n        {\r\n          tokenInfo.map(info => (\r\n            <tr key={info.h}>\r\n              <th>{info.h}</th>\r\n              <td>{info.d}</td>\r\n            </tr>\r\n          ))\r\n        }\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nconst useRefresh = () => {\r\n  const { fast, slow } = useContext(RefreshContext)\r\n  return { fastRefresh: fast, slowRefresh: slow }\r\n}\r\n\r\nexport default function PresalePage() {\r\n\r\n  // const { callContractWait } = useContext(Web3Context);\r\n  const chainId = useChainId();\r\n  const account = useAccount();\r\n  const { data: balance, refetch: refetchBalance } = useBalance({ address: account.address });\r\n\r\n  const { data: txResult, writeContractAsync } = useWriteContract();\r\n\r\n  const { data: timeToStart } = useReadContract({\r\n    address: chainId === TEST_NET ? PRESALE_ADDRESS_TEST : PRESALE_ADDRESS_MAIN,\r\n    abi: PresaleAbi,\r\n    functionName: \"timeToStart\",\r\n    args: [],\r\n    chainId: chainId,\r\n  });\r\n\r\n  const { data: timeToEnd } = useReadContract({\r\n    address: chainId === TEST_NET ? PRESALE_ADDRESS_TEST : PRESALE_ADDRESS_MAIN,\r\n    abi: PresaleAbi,\r\n    functionName: \"timeToEnd\",\r\n    args: [],\r\n    chainId: chainId,\r\n  });\r\n\r\n  const { data: timeToClaim, refetch: refetchTimeToClaim } = useReadContract({\r\n    address: chainId === TEST_NET ? PRESALE_ADDRESS_TEST : PRESALE_ADDRESS_MAIN,\r\n    abi: PresaleAbi,\r\n    functionName: \"timeToClaim\",\r\n    args: [],\r\n    chainId: chainId,\r\n  });\r\n\r\n  const { data: minimumCROAmount, refetch: refetchMinimumCROAmount } = useReadContract({\r\n    address: chainId === TEST_NET ? PRESALE_ADDRESS_TEST : PRESALE_ADDRESS_MAIN,\r\n    abi: PresaleAbi,\r\n    functionName: \"minimumCROAmount\",\r\n    args: [],\r\n    chainId: chainId,\r\n  });\r\n\r\n  const { data: userDeposited, refetch: refetchUserDeposited } = useReadContract({\r\n    address: chainId === TEST_NET ? PRESALE_ADDRESS_TEST : PRESALE_ADDRESS_MAIN,\r\n    abi: PresaleAbi,\r\n    functionName: \"userDeposited\",\r\n    args: [account.address ? account.address : ethers.ZeroAddress],\r\n    chainId: chainId,\r\n  });\r\n\r\n  const { data: userClaimed, refetch: refetchUserClaimed } = useReadContract({\r\n    address: chainId === TEST_NET ? PRESALE_ADDRESS_TEST : PRESALE_ADDRESS_MAIN,\r\n    abi: PresaleAbi,\r\n    functionName: \"userClaimed\",\r\n    args: [account.address ? account.address : ethers.ZeroAddress],\r\n    chainId: chainId,\r\n  });\r\n\r\n  const { data: croTotal, refetch: refetchCroTotal } = useReadContract({\r\n    address: chainId === TEST_NET ? PRESALE_ADDRESS_TEST : PRESALE_ADDRESS_MAIN,\r\n    abi: PresaleAbi,\r\n    functionName: \"croTotal\",\r\n    args: [],\r\n    chainId: chainId,\r\n  });\r\n\r\n  const [open, setOpen] = useState(false)\r\n  const [croValue, setCroValue] = useState(0.0)\r\n  const [isPendingDeposit, setIsPendingDeposit] = useState(false);\r\n  const [isPendingClaim, setIsPendingClaim] = useState(false);\r\n  const [claimMode, setClaimMode] = useState(false);\r\n  const [countdownTime, setCountdownTime] = useState(0);\r\n  const [presaleStatus, setPresaleStatus] = useState(\"\");\r\n\r\n  const { fastRefresh } = useRefresh();\r\n\r\n  // const isMobile = useMediaQuery(\"only screen and (max-width: 768px)\");\r\n\r\n  useEffect(() => {\r\n    const timestamp = parseInt((Date.now() / 1000).toFixed(0));\r\n    // if (timestamp > Number(timeToStart) && timestamp < Number(timeToEnd)) {\r\n    if (timestamp > Number(timeToStart)) {\r\n      setOpen(true);\r\n    } else {\r\n      setOpen(false);\r\n    }\r\n  }, [timeToStart, timeToEnd]);\r\n\r\n  useEffect(() => {\r\n    let countTime = 0;\r\n\r\n    if (Date.now() / 1000 < timeToStart) {\r\n      countTime = timeToStart;\r\n      setPresaleStatus(\"Presale is not open. Come back in:\");\r\n    }\r\n    else if (Date.now() / 1000 >= timeToStart && Date.now() / 1000 < timeToEnd) {\r\n      countTime = timeToEnd;\r\n      setPresaleStatus(\"Presale is currently underway. It ends within:\");\r\n    }\r\n    else if (Date.now() / 1000 >= timeToEnd && Date.now() / 1000 < timeToClaim) {\r\n      countTime = timeToClaim;\r\n      setPresaleStatus(\"Claim is not open. Come back in:\");\r\n    }\r\n    else {\r\n      countTime = 0;\r\n      setPresaleStatus(\"Presale has concluded.\");\r\n    }\r\n\r\n    setCountdownTime(countTime);\r\n  }, [timeToStart, timeToEnd, timeToClaim])\r\n\r\n  useEffect(() => {\r\n    refetchBalance();\r\n    refetchTimeToClaim();\r\n    refetchMinimumCROAmount();\r\n    refetchUserDeposited();\r\n    refetchUserClaimed();\r\n  }, [fastRefresh])\r\n\r\n  async function handleDeposit() {\r\n    if (account.isDisconnected) {\r\n      toast.error(\"Confirm Your Wallet Connection!\");\r\n      return;\r\n    }\r\n\r\n    if (croValue < (minimumCROAmount ? parseInt(ethers.formatUnits(minimumCROAmount, \"ether\")) : 200)) {\r\n      toast.error(`The minimum deposit amount is ${minimumCROAmount ? parseInt(ethers.formatUnits(minimumCROAmount, \"ether\")) : 200} $CRO.`);\r\n      return;\r\n    }\r\n\r\n    if (parseFloat(balance.formatted) <= croValue) {\r\n      toast.error(\"Insufficient CRO balance!\");\r\n      return;\r\n    }\r\n\r\n    const timestamp = parseInt((Date.now() / 1000).toFixed(0));\r\n    if (timestamp < Number(timeToStart) || timestamp > Number(timeToEnd)) {\r\n      toast.error(\"Finished Deposit Time!\");\r\n      return;\r\n    }\r\n\r\n    setIsPendingDeposit(true);\r\n\r\n    await writeContractAsync({\r\n      address: chainId === TEST_NET ? PRESALE_ADDRESS_TEST : PRESALE_ADDRESS_MAIN,\r\n      abi: PresaleAbi,\r\n      functionName: \"depositCRO\",\r\n      args: [],\r\n      value: ethers.parseEther(croValue.toString())\r\n    })\r\n      .then(() => {\r\n        refetchBalance();\r\n        refetchUserDeposited();\r\n        refetchMinimumCROAmount();\r\n        setIsPendingDeposit(false);\r\n        toast.success(\"Deposit Submitted!\");\r\n      })\r\n      .catch((err) => {\r\n        setIsPendingDeposit(false);\r\n      });\r\n  }\r\n\r\n  async function handleClaim() {\r\n    if (account.isDisconnected) {\r\n      toast.error(\"Confirm Your Wallet Connection!\");\r\n      return;\r\n    }\r\n\r\n    const timestamp = parseInt((Date.now() / 1000).toFixed(0));\r\n    if (timestamp < Number(timeToClaim)) {\r\n      toast.error(\"Please wait for claim time!\");\r\n      return;\r\n    }\r\n\r\n    if (userClaimed) {\r\n      toast.error(\"You already claimed. Please check your wallet!\");\r\n      return;\r\n    }\r\n\r\n    setIsPendingClaim(true);\r\n    await writeContractAsync({\r\n      address: chainId === TEST_NET ? PRESALE_ADDRESS_TEST : PRESALE_ADDRESS_MAIN,\r\n      abi: PresaleAbi,\r\n      functionName: \"claimToken\",\r\n      args: [],\r\n    })\r\n      .then(() => {\r\n        refetchUserDeposited();\r\n        setIsPendingClaim(false);\r\n        toast.success(\"Claim Submitted!\");\r\n      })\r\n      .catch((err) => {\r\n        setIsPendingClaim(false);\r\n      });\r\n  }\r\n\r\n  function getDepositBtnText() {\r\n    if (isPendingDeposit) return \"Depositing ... \";\r\n\r\n    return \"Deposit\";\r\n  }\r\n\r\n  function getClaimBtnText() {\r\n    if (isPendingClaim) return \"Claiming ... \";\r\n\r\n    return \"Claim $GOTCHA\";\r\n  }\r\n\r\n  function handleMax() {\r\n    setCroValue(parseFloat(balance.formatted).toFixed(2) - 2);\r\n  }\r\n\r\n  const handleChange = async (event) => {\r\n    const value = event.target.value;\r\n    setCroValue(value);\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Image src={DancegirlGif} id='dance-girl' />\r\n      <Container>\r\n        <div className='hero'>\r\n          <Image src={NoWaifuNoLifeGif} id='no-gotcha-no-life' />\r\n          {\r\n            open ? <div className='presale-comp'>\r\n              {/* false ? <div className='presale-comp'> */}\r\n              <div className='total-raised'>\r\n                Total Raised: {croTotal ? parseInt(ethers.formatUnits(croTotal, \"ether\")) : 0} $CRO\r\n              </div>\r\n              <div className={`setter ${claimMode ? 'claim' : ''}`}>\r\n                <button id={!claimMode ? \"public-sale\" : \"claim\"} onClick={() => setClaimMode(false)}>Public sale</button>\r\n                <button id={claimMode ? \"public-sale\" : \"claim\"} onClick={() => setClaimMode(true)}>Claim</button>\r\n              </div>\r\n              {\r\n                !claimMode ?\r\n                  <>\r\n                    <div className=\"input-token-panel\">\r\n                      <div className='input-token-balance'>\r\n                        <span className='fs-20'>Balance: {balance ? parseFloat(balance.formatted).toFixed(2) : 0}</span>\r\n                      </div>\r\n                      <div className=\"input-token-box\">\r\n                        <input type=\"number\" className=\"input-token\" name=\"input_from\" placeholder='0.0' value={croValue} onChange={handleChange} />\r\n                        <button className='btn-max' onClick={handleMax}>MAX</button>\r\n                        <div className=\"cro-box\">\r\n                          <Image className=\"image-cro\" src={CroPng}></Image>\r\n                          <div>CRO</div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <RoundButton onClick={handleDeposit} className='deposit-btn'>{getDepositBtnText()}</RoundButton>\r\n                  </>\r\n                  :\r\n                  <>\r\n                    <p className=\"amount\">\r\n                      Deposited {userDeposited ? parseInt(ethers.formatUnits(userDeposited, \"ether\")) : 0} $CRO\r\n                    </p>\r\n                    <RoundButton onClick={handleClaim} className='deposit-btn'>{getClaimBtnText()}</RoundButton>\r\n                  </>\r\n              }\r\n            </div>\r\n              :\r\n              <>\r\n                <p className='hero-text'>{presaleStatus}</p>\r\n                <Timer timeToEnd={countdownTime} />\r\n                {/* <p className='hero-text'>The presale has not opened yet. Please return later.</p>\r\n                <Timer timeToEnd={0} /> */}\r\n              </>\r\n          }\r\n        </div>\r\n        <Presale />\r\n      </Container>\r\n    </Layout>\r\n  )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport './Timer.scss'\r\n\r\nexport default function Timer({timeToEnd}) {\r\n  const [days, setDays] = useState(0)\r\n  const [hours, setHours] = useState(0)\r\n  const [minutes, setMinutes] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const getTimeUntil = () => {\r\n      const deadline = timeToEnd ? parseInt(timeToEnd) * 1000 : 0\r\n      const time = deadline - Date.now()\r\n      if (time < 0) {\r\n        setDays(0)\r\n        setHours(0)\r\n        setMinutes(0)\r\n      } else {\r\n        const seconds = Math.floor((time / 1000) % 60)\r\n        const minutes = Math.floor((time / 1000 / 60) % 60)\r\n        const hours = Math.floor((time / (1000 * 60 * 60)) % 24)\r\n        const days = Math.floor(time / (1000 * 60 * 60 * 24))\r\n        setDays(days)\r\n        setHours(hours)\r\n        setMinutes(minutes)\r\n      }\r\n    }\r\n    const timer = setInterval(getTimeUntil, 1000)\r\n\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n  }, [timeToEnd])\r\n\r\n  return (\r\n    <div className=\"timer\">\r\n      <div>\r\n        <span className=\"number-container end\">{days < 10 ? 0 : Math.floor(days / 10)}</span>\r\n        <span className=\"number-container mid\">{days % 10}</span>\r\n        <div className='unit text-center'>days</div>\r\n      </div>\r\n      <div>\r\n        <span className=\"number-container center\">{hours < 10 ? 0 : Math.floor(hours / 10)}</span>\r\n        <span className=\"number-container center\">{hours % 10}</span>\r\n        <div className='unit text-center'>hours</div>\r\n      </div>\r\n      <div>\r\n        <span className=\"number-container mid\">{minutes < 10 ? 0 : Math.floor(minutes / 10)}</span>\r\n        <span className=\"number-container end\">{minutes % 10}</span>\r\n        <div className='unit text-center'>minutes</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"],"names":["ZeroAddress","Presale","_jsx","className","children","h","d","map","info","_jsxs","useRefresh","fast","slow","useContext","RefreshContext","fastRefresh","slowRefresh","PresalePage","chainId","useChainId","account","useAccount","data","balance","refetch","refetchBalance","useBalance","address","txResult","writeContractAsync","useWriteContract","timeToStart","useReadContract","TEST_NET","PRESALE_ADDRESS_TEST","PRESALE_ADDRESS_MAIN","abi","PresaleAbi","functionName","args","timeToEnd","timeToClaim","refetchTimeToClaim","minimumCROAmount","refetchMinimumCROAmount","userDeposited","refetchUserDeposited","ethers","userClaimed","refetchUserClaimed","croTotal","refetchCroTotal","open","setOpen","useState","croValue","setCroValue","isPendingDeposit","setIsPendingDeposit","isPendingClaim","setIsPendingClaim","claimMode","setClaimMode","countdownTime","setCountdownTime","presaleStatus","setPresaleStatus","useEffect","parseInt","Date","now","toFixed","Number","countTime","Layout","Image","src","DancegirlGif","id","Container","NoWaifuNoLifeGif","onClick","_Fragment","RoundButton","async","isDisconnected","toast","error","then","success","catch","err","parseFloat","formatted","type","name","placeholder","value","onChange","event","target","CroPng","timestamp","toString","Timer","_ref","days","setDays","hours","setHours","minutes","setMinutes","timer","setInterval","getTimeUntil","time","Math","floor","clearInterval"],"sourceRoot":""}