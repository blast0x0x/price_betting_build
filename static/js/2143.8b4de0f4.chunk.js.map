{"version":3,"file":"static/js/2143.8b4de0f4.chunk.js","mappings":"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","sources":["components/Combobox.jsx","config/betting.js","components/BettingTimer.jsx","pages/Betting.jsx"],"sourcesContent":["import React from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nconst customStyles = {\r\n  container: (provided) => ({\r\n    ...provided,\r\n    boxShadow: \"0px 0px 3px rgba(255, 255, 255)\",\r\n    fontFamily: \"mont\",\r\n    borderRadius: \"25px\",\r\n  }),\r\n  control: (provided) => ({\r\n    ...provided,\r\n    backgroundColor: \"#111111\",\r\n    boxShadow: \"0px 0px 3px rgba(255, 255, 255)\",\r\n    borderRadius: \"25px\",\r\n    padding: \"0.5rem\",\r\n    border: \"none\",\r\n  }),\r\n  option: (provided, state) => ({\r\n    ...provided,\r\n    borderRadius: \"10px\",\r\n    backgroundColor: state.isFocused ? \"#222222\" : \"#111111\",\r\n    fontFamily: \"mont\",\r\n  }),\r\n  singleValue: (provided, state) => ({\r\n    ...provided,\r\n    color: \"#bbbbbb\",\r\n  }),\r\n  noOptionsMessage: (provided, state) => ({\r\n    ...provided,\r\n    backgroundColor: \"#111111\",\r\n  }),\r\n  menu: (provided, state) => ({\r\n    ...provided,\r\n    backgroundColor: \"#111111\",\r\n    borderRadius: \"10px\",\r\n    boxShadow: \"0px 0px 1.8px rgba(214, 214, 214, 0.12)\",\r\n  }),\r\n  input: (provided, state) => ({\r\n    ...provided,\r\n    color: \"#bbbbbb\",\r\n  }),\r\n};\r\n\r\nconst Combobox = ({ options, value, onChange }) => (\r\n  <Select\r\n    options={options}\r\n    styles={customStyles}\r\n    value={value}\r\n    onChange={onChange}\r\n    className=\"combo\"\r\n  />\r\n);\r\n\r\nexport default Combobox;\r\n","export const EXPECT_OPTIONS = [\r\n  { value: 0, label: 'LONG' },\r\n  { value: 1, label: 'SHORT' },\r\n]\r\n\r\nexport const COIN_OPTIONS = [\r\n  { value: 0, label: 'S' },\r\n  { value: 1, label: 'GG' },\r\n]","import { useState, useEffect } from 'react'\nimport './BettingTimer.scss'\n\nexport default function BettingTimer({timeToEnd, period}) {\n  const [days, setDays] = useState(0)\n  const [hours, setHours] = useState(0)\n  const [minutes, setMinutes] = useState(0)\n  const [seconds, setSeconds] = useState(0)\n\n  useEffect(() => {\n    const getTimeUntil = () => {\n      const deadline = timeToEnd ? parseInt(timeToEnd) * 1000 : 0\n      const time = deadline - Date.now()\n      if (time < 0) {\n        setDays(0)\n        setHours(0)\n        setMinutes(0)\n      } else {\n        const seconds = Math.floor((time / 1000) % 60)\n        const minutes = Math.floor((time / 1000 / 60) % 60)\n        const hours = Math.floor((time / (1000 * 60 * 60)) % 24)\n        const days = Math.floor(time / (1000 * 60 * 60 * 24))\n        setDays(days)\n        setHours(hours)\n        setMinutes(minutes)\n        setSeconds(seconds)\n      }\n    }\n    const timer = setInterval(getTimeUntil, 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [timeToEnd])\n\n  return (\n    <div className=\"betting-timer\">\n      <div className=\"timer-container\">\n        <div className=\"time-block\">\n          <div className=\"time-digits\">\n            <span className=\"digit\">{minutes < 10 ? 0 : Math.floor(minutes / 10)}</span>\n            <span className=\"digit\">{minutes % 10}</span>\n          </div>\n          <div className=\"time-label\">minutes</div>\n        </div>\n        \n        <div className=\"time-separator\">:</div>\n        \n        <div className=\"time-block\">\n          <div className=\"time-digits\">\n            <span className=\"digit\">{seconds < 10 ? 0 : Math.floor(seconds / 10)}</span>\n            <span className=\"digit\">{seconds % 10}</span>\n          </div>\n          <div className=\"time-label\">seconds</div>\n        </div>\n      </div>\n      \n      {/* <div className=\"timer-progress\">\n        <div \n          className=\"progress-bar\" \n          style={{ \n            width: `${100 - (timeToEnd - Date.now() / 1000) / period * 100}%` \n          }}\n        ></div>\n      </div> */}\n    </div>\n  )\n}\n","import { useState, useEffect, useRef, useContext } from \"react\";\nimport toast from \"react-hot-toast\";\nimport Layout from 'layouts'\nimport './Betting.scss'\nimport { Container, Image } from 'react-bootstrap'\nimport { useMediaQuery } from '@uidotdev/usehooks'\nimport { useConnectModal } from \"@rainbow-me/rainbowkit\";\nimport { useChainId, useAccount, useBalance, useReadContract, useWriteContract } from \"wagmi\";\nimport { ethers } from \"ethers\";\nimport Coin1Img from 'assets/images/lone-coin.png'\nimport Coin2Img from 'assets/images/waifunomicscoin.png'\nimport Coin4Img from 'assets/images/coin4.png'\nimport Coin5Img from 'assets/images/coin5.png'\n\nimport BigTeacherImg from 'assets/images/bigteacher.png'\nimport BlackArrowImg from 'assets/images/blackarrow.png'\nimport CoinStackImg from 'assets/images/coinstack.png'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\n\nimport Coin3Img from \"assets/images/coin3.png\"\nimport HeartImg from \"assets/images/heart.png\"\n\nimport Combobox from 'components/Combobox'\nimport { EXPECT_OPTIONS, COIN_OPTIONS } from 'config/betting'\nimport 'react-tabs/style/react-tabs.scss'\nimport RoundButton from 'components/RoundButton'\nimport BettingTimer from \"components/BettingTimer\";\n\nimport {\n  TEST_NET,\n  GOTCHA_ADDRESS_TEST,\n  GOTCHA_ADDRESS_MAIN,\n  BETTING_ADDRESS_TEST,\n  BETTING_ADDRESS_MAIN,\n} from \"../config\";\nimport BettingAbi from \"../config/abis/BETTING_ABI.json\";\nimport GotchaAbi from \"../config/abis/GOTCHA_ABI.json\";\nimport { RefreshContext } from '../context/RefreshContext'\n\nconst UINT256_MAX = \"115792089237316195423570985008687907853269984665640564039457584007913129639935\"\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nconst Betting = () => {\n  const tokenInfo = [\n    { h: 'HOW TO EARN $GOTCHA', d: 'DEPOSIT $GOTCHA token to BETTING' },\n    { h: 'TOKEN BETTING POOL (%)', d: '$1BN (10%)' },\n    { h: 'DAILY DISTRIBUTION TO THE NFT POOL', d: '2,739,726 $ GOTCHA DAILY' },\n    { h: 'STAKING OPENING', d: 'ONE WEEK FROM THE PRE-SALE DATE' }\n  ];\n\n  return (\n    <table className=\"betting-table\">\n      <tbody>\n        {\n          tokenInfo.map(info => (\n            <tr>\n              <th>{info.h}</th>\n              <td>{info.d}</td>\n            </tr>\n          ))\n        }\n      </tbody>\n    </table>\n  )\n}\n\nexport default function BettingPage() {\n  const isMobile = useMediaQuery(\"only screen and (max-width: 768px)\");\n  const { fastRefresh } = useRefresh();\n\n  const { data: txResult, writeContractAsync } = useWriteContract();\n\n  const { openConnectModal } = useConnectModal();\n\n  const chainId = useChainId();\n  const { isConnected, address } = useAccount();\n  const { data: balance, refetch: refetchBalance } = useBalance({ address: address });\n\n\n  ///// Pool Balances //////////////\n  const { data: poolEthBalance, refetch: refetchPoolEthBalance } = useBalance({ address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN });\n\n  const { data: poolTokenBalance, refetch: refetchPoolTokenBalance } = useReadContract({\n    address: chainId === TEST_NET ? GOTCHA_ADDRESS_TEST : GOTCHA_ADDRESS_MAIN,\n    abi: GotchaAbi,\n    functionName: \"balanceOf\",\n    args: [chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN],\n    chainId: chainId\n  });\n\n  ///// Betting Contract ///////////////////////////////////\n  const { data: currentBetId, refetch: refetchCurrentBetId } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"currentBetId\",\n    args: [],\n    chainId: chainId,\n  });\n\n  const { data: ethPrice, refetch: refetchEthPrice } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"getLatestETHPrice\",\n    args: [],\n    chainId: chainId,\n  });\n\n  const { data: minEthAmount, refetch: refetchMinEthAmount } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"MIN_BET_ETH_AMOUNT\",\n    args: [],\n    chainId: chainId,\n  });\n\n  const { data: maxEthAmount, refetch: refetchMaxEthAmount } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"MAX_BET_ETH_AMOUNT\",\n    args: [],\n    chainId: chainId,\n  });\n\n  const { data: minAmount, refetch: refetchMinAmount } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"MIN_BET_AMOUNT\",\n    args: [],\n    chainId: chainId,\n  });\n\n  const { data: maxAmount, refetch: refetchMaxAmount } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"MAX_BET_AMOUNT\",\n    args: [],\n    chainId: chainId,\n  });\n\n  const { data: earnedEthAmount, refetch: refetchEarnedEthAmount } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"earnedEthAmount\",\n    args: [isConnected ? address : \"\"],\n    chainId: chainId,\n  });\n\n  const { data: lostEthAmount, refetch: refetchLostEthAmount } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"lostEthAmount\",\n    args: [isConnected ? address : \"\"],\n    chainId: chainId,\n  });\n\n  const { data: earnedAmount, refetch: refetchEarnedAmount } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"earnedTokenAmount\",\n    args: [isConnected ? address : \"\"],\n    chainId: chainId,\n  });\n\n  const { data: lostAmount, refetch: refetchLostAmount } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"lostTokenAmount\",\n    args: [isConnected ? address : \"\"],\n    chainId: chainId,\n  });\n\n  const { data: prevBetUserInfo, refetch: refetchPrevBetUserInfo } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"betUserInfo\",\n    args: [parseInt(currentBetId ? currentBetId : 0) - 1, isConnected ? address : \"\"],\n    chainId: chainId,\n  });\n\n  const { data: currentBetUserInfo, refetch: refetchCurrentBetUserInfo } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"betUserInfo\",\n    args: [parseInt(currentBetId ? currentBetId : 0), isConnected ? address : \"\"],\n    chainId: chainId,\n  });\n\n  const { data: prevBetInfo, refetch: refetchPrevBetInfo } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"betInfo\",\n    args: [parseInt(currentBetId ? currentBetId : 0) - 1],\n    chainId: chainId,\n  });\n\n  const { data: currentBetInfo, refetch: refetchCurrentBetInfo } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"betInfo\",\n    args: [parseInt(currentBetId ? currentBetId : 0)],\n    chainId: chainId,\n  });\n\n  const { data: prepareTime, refetch: refetchPrepareTime } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"PREPARE_TIME\",\n    args: [],\n    chainId: chainId,\n  });\n\n  const { data: bettingTime, refetch: refetchBettingTime } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"BETTING_TIME\",\n    args: [],\n    chainId: chainId,\n  });\n\n  ////// GotchA Token Contract //////////////////////////////////////////////\n  const { data: tokenBalance, refetch: refetchTokenBalance } = useReadContract({\n    address: chainId === TEST_NET ? GOTCHA_ADDRESS_TEST : GOTCHA_ADDRESS_MAIN,\n    abi: GotchaAbi,\n    functionName: \"balanceOf\",\n    args: [isConnected ? address : \"\"],\n    chainId: chainId\n  });\n\n  const { data: approvedAmount, refetch: refetchApprovedAmount } = useReadContract({\n    address: chainId === TEST_NET ? GOTCHA_ADDRESS_TEST : GOTCHA_ADDRESS_MAIN,\n    abi: GotchaAbi,\n    functionName: \"allowance\",\n    args: [address, chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN],\n    chainId: chainId\n  });\n\n  const regInputForExpect = useRef()\n  const regInputForCoin = useRef()\n  const [selectedCollection, setSelectedCollection] = useState(EXPECT_OPTIONS[0]);\n  const [selectedCoin, setSelectedCoin] = useState(COIN_OPTIONS[0]);\n  const [countdownTime, setCountdownTime] = useState(0);\n  const [countdownPeriod, setCountdownPeriod] = useState(0);\n  const [isPreparing, setIsPreparing] = useState(false);\n  const [isDeposited, setIsDeposited] = useState(false);\n\n  const [depositAmount, setDepositAmount] = useState(0);\n  const [isApproving, setIsApproving] = useState(false);\n  const [isDepositing, setIsDepositing] = useState(false);\n\n  useEffect(() => {\n    refetchCurrentBetId();\n    refetchEthPrice();\n    refetchCurrentBetInfo();\n    refetchCurrentBetUserInfo();\n    refetchEarnedAmount();\n    refetchLostAmount();\n\n    refetchApprovedAmount();\n\n    refetchBalance();\n    refetchTokenBalance();\n    refetchPoolEthBalance();\n    refetchPoolTokenBalance();\n  }, [fastRefresh])\n\n  useEffect(() => {\n    if (currentBetInfo === undefined || currentBetUserInfo === undefined) return;\n\n    if (currentBetInfo[4]) {\n      setIsPreparing(true);\n      setCountdownTime(parseInt(currentBetInfo[2]))\n      setCountdownPeriod(Number(prepareTime))\n    } else {\n      setIsPreparing(false);\n      setCountdownTime(parseInt(currentBetInfo[3]))\n      setCountdownPeriod(Number(bettingTime))\n    }\n\n    if (currentBetUserInfo[5])\n      setIsDeposited(true);\n    else\n      setIsDeposited(false);\n\n  }, [currentBetInfo, currentBetUserInfo])\n\n  const getTextBetting = () => {\n    if (currentBetUserInfo && currentBetUserInfo[5]) // Already Deposited\n      return 'Waiting Result ...';\n\n    if (currentBetInfo && currentBetInfo[5]) // Passed preparing time\n      return 'Waiting Result ...';\n\n    if (depositAmount === 0)\n      return 'Enter Amount';\n\n    if (isApproving)\n      return 'Approving ...';\n\n    if (parseFloat(ethers.formatUnits(tokenBalance ? tokenBalance : \"0\", 'ether')) < depositAmount)\n      return 'Insufficient Token Balance';\n\n    if (selectedCoin.value === 1 && parseFloat(ethers.formatUnits(approvedAmount ? approvedAmount : \"0\", 'ether')) < depositAmount)\n      return 'Approve Token';\n\n    if (isDepositing)\n      return 'Depositing ...';\n\n\n    return \"Deposit\";\n  };\n\n  const handleChange = (e) => {\n    setDepositAmount(e.target.value);\n  }\n\n  const handleBetting = async () => {\n    if (currentBetUserInfo && currentBetUserInfo[5]) // Already Deposited\n      return;\n\n    if (currentBetInfo && currentBetInfo[5]) // Passed preparing time\n      return;\n\n    if (depositAmount === 0)\n      return;\n\n    if (selectedCoin.value === 0) {\n      if (depositAmount < parseInt(ethers.formatUnits(minEthAmount ? minEthAmount : \"0\", 18))) {\n        toast.error(`The minimum amount is ${parseInt(ethers.formatUnits(minEthAmount ? minEthAmount : \"0\", 18))}.`);\n        return;\n      }\n\n      if (depositAmount > parseInt(ethers.formatUnits(maxEthAmount ? maxEthAmount : \"0\", 18))) {\n        toast.error(`The maximum amount is ${parseInt(ethers.formatUnits(maxEthAmount ? maxEthAmount : \"0\", 18))}.`);\n        return;\n      }\n\n      if (parseFloat(ethers.formatUnits(poolEthBalance ? poolEthBalance.value : \"0\", 'ether')) < depositAmount) {\n        toast.error(`$S pool balance is not enough.`);\n        return;\n      }\n    } else {\n      if (depositAmount < parseInt(ethers.formatUnits(minAmount ? minAmount : \"0\", 18))) {\n        toast.error(`The minimum amount is ${parseInt(ethers.formatUnits(minAmount ? minAmount : \"0\", 18))}.`);\n        return;\n      }\n\n      if (depositAmount > parseInt(ethers.formatUnits(maxAmount ? maxAmount : \"0\", 18))) {\n        toast.error(`The maximum amount is ${parseInt(ethers.formatUnits(maxAmount ? maxAmount : \"0\", 18))}.`);\n        return;\n      }\n\n      if (parseFloat(ethers.formatUnits(poolTokenBalance ? poolTokenBalance : \"0\", 'ether')) < depositAmount) {\n        toast.error(`$GG pool balance is not enough.`);\n        return;\n      }\n    }\n\n\n    if (parseFloat(ethers.formatUnits(tokenBalance ? tokenBalance : \"0\", 'ether')) < depositAmount)\n      return;\n\n    if (selectedCoin.value === 1 && parseFloat(ethers.formatUnits(approvedAmount ? approvedAmount : \"0\", 'ether')) < depositAmount) {\n      setIsApproving(true);\n\n      await writeContractAsync({\n        address: chainId === TEST_NET ? GOTCHA_ADDRESS_TEST : GOTCHA_ADDRESS_MAIN,\n        abi: GotchaAbi,\n        functionName: \"approve\",\n        args: [chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN, UINT256_MAX],\n      })\n        .then(() => {\n          setIsApproving(false);\n        })\n        .catch((err) => {\n          console.log(err)\n          setIsApproving(false);\n        });\n      return;\n    }\n\n    setIsDepositing(true);\n\n    console.log(\"handleBetting = \", ethers.parseUnits(depositAmount.toString(), 18), selectedCollection.value === 0 ? true : false)\n\n    await writeContractAsync({\n      address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n      abi: BettingAbi,\n      functionName: \"bet\",\n      args: [selectedCoin.value === 0 ? true : false, ethers.parseUnits(depositAmount.toString(), 18), selectedCollection.value === 0 ? true : false],\n      value: selectedCoin.value === 0 ? ethers.parseUnits(depositAmount.toString(), 18) : 0,\n    })\n      .then(() => {\n        setIsDepositing(false);\n      })\n      .catch((err) => {\n        setIsDepositing(false);\n      });\n  }\n\n  return (\n    <Layout>\n      {\n        isConnected ?\n          <>\n            <Container fluid>\n              <div className='hero'>\n                <h1>betting <span>gotcha</span></h1>\n              </div>\n              <div className='betting-open-container'>\n                <div className=\"overview\">\n                  <div className=\"balance-dashboard\">\n                    <div className=\"balance-card main-balance\">\n                      <div className=\"card-inner\">\n                        <div className=\"balance-icon-wrapper\">\n                          <div className=\"balance-icon\">\n                            <span>$</span>\n                          </div>\n                        </div>\n                        <div className=\"balance-content\">\n                          <h3 className=\"balance-title\">Wallet Balance</h3>\n                          <div className=\"balance-amount\">\n                            <span className=\"amount-value\">{parseInt(ethers.formatUnits(balance ? balance.value : 0, \"ether\"))}</span>\n                          </div>\n                          <div className=\"balance-amount\">\n                            <span className=\"token-amount-value\">{parseInt(ethers.formatUnits(tokenBalance ? tokenBalance : 0, \"ether\"))}</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"stats-container\">\n                      <div className=\"balance-card win-card\">\n                        <div className=\"card-inner\">\n                          <div className=\"stat-icon-wrapper\">\n                            <div className=\"stat-icon win-icon\">\n                              <span>↑</span>\n                            </div>\n                          </div>\n                          <div className=\"stat-content\">\n                            <h3 className=\"stat-title\">Win Amount</h3>\n                            <div className=\"stat-amount\">\n                              <span className=\"amount-value\">{parseInt(ethers.formatUnits(earnedEthAmount ? earnedEthAmount : 0, \"ether\"))} S</span>\n                            </div>\n                            <div className=\"stat-amount\">\n                              <span className=\"amount-value\">{parseInt(ethers.formatUnits(earnedAmount ? earnedAmount : 0, \"ether\"))} GG</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"balance-card loss-card\">\n                        <div className=\"card-inner\">\n                          <div className=\"stat-icon-wrapper\">\n                            <div className=\"stat-icon loss-icon\">\n                              <span>↓</span>\n                            </div>\n                          </div>\n                          <div className=\"stat-content\">\n                            <h3 className=\"stat-title\">Loss Amount</h3>\n                            <div className=\"stat-amount\">\n                              <span className=\"amount-value\">{parseInt(ethers.formatUnits(lostEthAmount ? lostEthAmount : 0, \"ether\"))} S</span>\n                            </div>\n                            <div className=\"stat-amount\">\n                              <span className=\"amount-value\">{parseInt(ethers.formatUnits(lostAmount ? lostAmount : 0, \"ether\"))} GG</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"pool-balance-container\">\n                  <div className=\"pool-balance-card\">\n                    <div className=\"card-inner\">\n                      <div className=\"balance-icon-wrapper\">\n                        <div className=\"balance-icon \">\n                          <span>🏦</span>\n                        </div>\n                      </div>\n                      <div className=\"balance-content\">\n                        <h3 className=\"balance-title\">Pool Balance</h3>\n                        <div className=\"balance-amount\">\n                          <span className=\"amount-value\">{parseInt(ethers.formatUnits(poolEthBalance ? poolEthBalance.value : 0, \"ether\"))}</span>\n                        </div>\n                        <div className=\"balance-amount\">\n                          <span className=\"token-amount-value\">{parseInt(ethers.formatUnits(poolTokenBalance ? poolTokenBalance : 0, \"ether\"))}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                \n                <h2 className=\"betting-section-title\">BETTING ROOM</h2>\n                <div className=\"betting-cards-container\">\n                  <div className=\"betting-room-card\">\n                    <div className=\"card-header\">\n                      <span className=\"card-title\">BET #{parseInt(currentBetId) - 1}</span>\n                      <span className=\"card-status\">{prevBetUserInfo && prevBetUserInfo[5] ? \"COMPLETED\" : \"NOT PARTICIPATED\"}</span>\n                    </div>\n                    <table className=\"betting-data-table\">\n                      <tbody>\n                        <tr>\n                          <td className=\"label\">Entry Price:</td>\n                          <td className=\"value highlight-value\">$ {prevBetUserInfo ? (prevBetUserInfo[5] ? ethers.formatUnits(prevBetUserInfo[3], 8) : \"--\") : \"--\"}</td>\n                        </tr>\n                        <tr>\n                          <td className=\"label\">End Price:</td>\n                          <td className=\"value highlight-value\">$ {prevBetInfo ? ethers.formatUnits(prevBetInfo[1], 8) : \"--\"}</td>\n                        </tr>\n                        <tr>\n                          <td className=\"label\">Amount:</td>\n                          <td className=\"value highlight-value\">{prevBetUserInfo ? (prevBetUserInfo[5] ? parseFloat(ethers.formatUnits(prevBetUserInfo[2], \"ether\")) : \"--\") : \"--\"}</td>\n                        </tr>\n                        <tr>\n                          <td className=\"label\">Expectation:</td>\n                          <td className=\"value highlight-value\">{prevBetUserInfo ? (prevBetUserInfo[5] ? (prevBetUserInfo[6] ? \"LONG\" : \"SHORT\") : \"--\") : \"--\"}</td>\n                        </tr>\n                        <tr>\n                          <td className=\"label\">Deposit Coin:</td>\n                          <td className=\"value highlight-value\">{prevBetUserInfo ? (prevBetUserInfo[5] ? (prevBetUserInfo[1] ? \"S\" : \"GG\") : \"--\") : \"--\"}</td>\n                        </tr>\n                        <tr>\n                          <td className=\"label\">Result:</td>\n                          <td className=\"value\">\n                            {(prevBetUserInfo && prevBetUserInfo[5] && parseInt(prevBetUserInfo[7]) === 1) && <span className=\"result win\">WIN</span>}\n                            {(prevBetUserInfo && prevBetUserInfo[5] && parseInt(prevBetUserInfo[7]) === 2) && <span className=\"result lose\">LOSE</span>}\n                            {(prevBetUserInfo && prevBetUserInfo[5] && parseInt(prevBetUserInfo[7]) === 3) && <span className=\"result draw\">DRAW</span>}\n                            {(prevBetUserInfo && !prevBetUserInfo[5]) && \"--\"}\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </div>\n                  <div className=\"betting-entry-card\">\n                    <div className=\"card-header\">\n                      <span className=\"card-title\">BET #{parseInt(currentBetId)}</span>\n                      <span className=\"card-badge\">{isDeposited ? \"ACTIVE\" : \"OPEN\"}</span>\n                    </div>\n                    <div className=\"price-display\">\n                      <span className=\"price-label\">SONIC Price:</span>\n                      <span className=\"price-value\">$ {ethPrice ? ethers.formatUnits(ethPrice, 8) : \"--\"}</span>\n                    </div>\n                    <div className=\"betting-status\">\n                      {\n                        isPreparing ?\n                          <div className=\"status-message deposit\">It's time to deposit. You can deposit for</div>\n                          :\n                          <div className=\"status-message waiting\">Waiting for result.</div>\n                      }\n                      <BettingTimer timeToEnd={countdownTime} period={countdownPeriod} />\n                    </div>\n                    <table className=\"betting-data-table\">\n                      <tbody>\n                        <tr>\n                          <td className=\"label\">Entry Price:</td>\n                          <td className=\"value highlight-value\">$ {currentBetUserInfo ? (currentBetUserInfo[5] ? ethers.formatUnits(currentBetUserInfo[3], 8) : \"--\") : \"--\"}</td>\n                        </tr>\n                        <tr>\n                          <td className=\"label\">Expectation:</td>\n                          <td className=\"value\">\n                            {(isPreparing && !isDeposited) && <Combobox ref={regInputForExpect} options={EXPECT_OPTIONS} value={selectedCollection} onChange={(selectedOption) => setSelectedCollection(selectedOption)} />}\n                            {(!isPreparing && !isDeposited) && \"--\"}\n                            {isDeposited && (currentBetUserInfo ? (currentBetUserInfo[6] ? <span className=\"expectation long\">LONG</span> : <span className=\"expectation short\">SHORT</span>) : \"--\")}\n                          </td>\n                        </tr>\n                        <tr>\n                          <td className=\"label\">Deposit Coin:</td>\n                          <td className=\"value\">\n                            {(isPreparing && !isDeposited) && <Combobox ref={regInputForCoin} options={COIN_OPTIONS} value={selectedCoin} onChange={(selectedOption) => setSelectedCoin(selectedOption)} />}\n                            {(!isPreparing && !isDeposited) && \"--\"}\n                            {isDeposited && (currentBetUserInfo ? (currentBetUserInfo[1] ? <span className=\"expectation long\">$S</span> : <span className=\"expectation short\">$GG</span>) : \"--\")}\n                          </td>\n                        </tr>\n                        <tr>\n                          <td className=\"label\">Amount:</td>\n                          <td className=\"value\">\n                            {(isPreparing && !isDeposited) && (\n                              <div className=\"amount-input-container\">\n                                {selectedCoin.value === 0 ? (\n                                  <>\n                                    <div className=\"input-wrapper\">\n                                      <div className=\"currency-icon\">$S</div>\n                                      <input \n                                        type=\"number\" \n                                        placeholder={`Min: ${parseInt(ethers.formatUnits(minEthAmount ? minEthAmount : \"0\", 18))}`} \n                                        className=\"deposit-input\" \n                                        value={depositAmount} \n                                        onChange={handleChange} \n                                      />\n                                    </div>\n                                    <div className=\"amount-range\">\n                                      <div className=\"range-label\">Min: <span>{parseInt(ethers.formatUnits(minEthAmount ? minEthAmount : \"0\", 18))}</span></div>\n                                      <div className=\"range-slider\">\n                                        <div className=\"slider-track\"></div>\n                                        <div className=\"slider-progress\" style={{width: `${Math.min(100, (depositAmount / parseInt(ethers.formatUnits(maxEthAmount ? maxEthAmount : \"1\", 18))) * 100)}%`}}></div>\n                                      </div>\n                                      <div className=\"range-label\">Max: <span>{parseInt(ethers.formatUnits(maxEthAmount ? maxEthAmount : \"0\", 18))}</span></div>\n                                    </div>\n                                  </>\n                                ) : (\n                                  <>\n                                    <div className=\"input-wrapper\">\n                                      <div className=\"currency-icon\">$GG</div>\n                                      <input \n                                        type=\"number\" \n                                        placeholder={`Min: ${parseInt(ethers.formatUnits(minAmount ? minAmount : \"0\", 18))}`} \n                                        className=\"deposit-input\" \n                                        value={depositAmount} \n                                        onChange={handleChange} \n                                      />\n                                    </div>\n                                    <div className=\"amount-range\">\n                                      <div className=\"range-label\">Min: <span>{parseInt(ethers.formatUnits(minAmount ? minAmount : \"0\", 18))}</span></div>\n                                      <div className=\"range-slider\">\n                                        <div className=\"slider-track\"></div>\n                                        <div className=\"slider-progress\" style={{width: `${Math.min(100, (depositAmount / parseInt(ethers.formatUnits(maxAmount ? maxAmount : \"1\", 18))) * 100)}%`}}></div>\n                                      </div>\n                                      <div className=\"range-label\">Max: <span>{parseInt(ethers.formatUnits(maxAmount ? maxAmount : \"0\", 18))}</span></div>\n                                    </div>\n                                  </>\n                                )}\n                              </div>\n                            )}\n                            {(!isPreparing && !isDeposited) && \"--\"}\n                            {isDeposited && <span className=\"deposit-amount\">{parseFloat(currentBetUserInfo ? ethers.formatUnits(currentBetUserInfo[2], \"ether\") : \"--\")}</span>}\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                    <RoundButton\n                      key=\"claim\"\n                      className=\"bet-btn pulse-animation\"\n                      children={getTextBetting()}\n                      variant=\"transparent\"\n                      onClick={handleBetting}\n                    />\n                  </div>\n                </div>\n              </div>\n            </Container>\n          </>\n          :\n          <>\n            <Container fluid>\n              <div className='hero betting-hero'>\n                <div className=\"hero-content\">\n                  <h1 className=\"hero-title\">Price Prediction <span>Game</span></h1>\n                  <div className=\"hero-subtitle\">\n                    <div className=\"token-info\">\n                      <div className=\"token-badge\">$S</div>\n                      <div className=\"token-future\">$GG</div>\n                    </div>\n                  </div>\n                  <div className=\"connect-section\">\n                    <button onClick={openConnectModal} className=\"custom-connect-btn\">\n                      <div className=\"btn-content\">\n                        <div className=\"btn-icon\">\n                          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path d=\"M21 18V19C21 20.1 20.1 21 19 21H5C3.89 21 3 20.1 3 19V5C3 3.9 3.89 3 5 3H19C20.1 3 21 3.9 21 5V6H12C10.89 6 10 6.9 10 8V16C10 17.1 10.89 18 12 18H21ZM12 16H22V8H12V16ZM16 13.5C15.17 13.5 14.5 12.83 14.5 12C14.5 11.17 15.17 10.5 16 10.5C16.83 10.5 17.5 11.17 17.5 12C17.5 12.83 16.83 13.5 16 13.5Z\" fill=\"white\" />\n                          </svg>\n                        </div>\n                        <span className=\"btn-text\">Connect Wallet</span>\n                      </div>\n                      <div className=\"btn-shine\"></div>\n                    </button>\n                  </div>\n                </div>\n                <div className=\"hero-visuals\">\n                  <div className=\"price-chart\">\n                    <div className=\"chart-line\"></div>\n                    <div className=\"prediction-arrows\">\n                      <div className=\"prediction up\">\n                        <span className=\"arrow\">↑</span>\n                        <span className=\"label\">LONG</span>\n                      </div>\n                      <div className=\"prediction down\">\n                        <span className=\"arrow\">↓</span>\n                        <span className=\"label\">SHORT</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Container>\n\n            <div className=\"betting-info-section\">\n              <Container fluid>\n                <div className=\"info-cards\">\n                  <div className=\"info-card\">\n                    <div className=\"card-icon\">\n                      <span className=\"icon\">🎮</span>\n                    </div>\n                    <div className=\"card-content\">\n                      <h3>How It Works</h3>\n                      <p>Predict whether the $S price will go up (LONG) or down (SHORT) within the betting timeframe. Winners share the prize pool from losing bets.</p>\n                    </div>\n                  </div>\n\n                  <div className=\"info-card\">\n                    <div className=\"card-icon\">\n                      <span className=\"icon\">💰</span>\n                    </div>\n                    <div className=\"card-content\">\n                      <h3>Token Evolution</h3>\n                      <p>Currently played with $S tokens. After TGE (Token Generation Event), the game will transition to using $GG tokens for all betting activities.</p>\n                    </div>\n                  </div>\n\n                  <div className=\"info-card\">\n                    <div className=\"card-icon\">\n                      <span className=\"icon\">⏱️</span>\n                    </div>\n                    <div className=\"card-content\">\n                      <h3>Betting Rounds</h3>\n                      <p>Each round lasts for a fixed period. Place your bets before the timer ends. Results are determined by comparing the price at start and end of each round.</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"strategy-section\">\n                  <div className=\"strategy-content\">\n                    <h2>Betting Strategy</h2>\n                    <p>Analyze market trends and token performance to make informed predictions. The more accurate your predictions, the higher your potential rewards.</p>\n                    <ul className=\"strategy-points\">\n                      <li><span className=\"point-highlight\">Long Position:</span> Bet on price increase if you believe market conditions are favorable.</li>\n                      <li><span className=\"point-highlight\">Short Position:</span> Bet on price decrease if you anticipate market corrections.</li>\n                      <li><span className=\"point-highlight\">Risk Management:</span> Only bet what you can afford to lose and diversify your positions.</li>\n                    </ul>\n                  </div>\n                  <div className=\"strategy-visual\">\n                    <div className=\"visual-container\">\n                      <div className=\"token-price\">\n                        <div className=\"price-display\">\n                          <span className=\"currency\">$S</span>\n                          <span className=\"value\">{ethPrice ? ethers.formatUnits(ethPrice, 8) : \"--\"}</span>\n                        </div>\n                        <div className=\"price-trend up\">+2.3%</div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </Container>\n            </div>\n\n            <div className=\"cta-section\">\n              <Container fluid>\n                <div className=\"cta-content\">\n                  <h2>Ready to Start?</h2>\n                  <p>Connect your wallet now and join the exciting world of price prediction. Test your market analysis skills and earn rewards!</p>\n                  <button onClick={openConnectModal} className=\"custom-connect-btn\">\n                    <div className=\"btn-content\">\n                      <div className=\"btn-icon\">\n                        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                          <path d=\"M21 18V19C21 20.1 20.1 21 19 21H5C3.89 21 3 20.1 3 19V5C3 3.9 3.89 3 5 3H19C20.1 3 21 3.9 21 5V6H12C10.89 6 10 6.9 10 8V16C10 17.1 10.89 18 12 18H21ZM12 16H22V8H12V16ZM16 13.5C15.17 13.5 14.5 12.83 14.5 12C14.5 11.17 15.17 10.5 16 10.5C16.83 10.5 17.5 11.17 17.5 12C17.5 12.83 16.83 13.5 16 13.5Z\" fill=\"white\" />\n                        </svg>\n                      </div>\n                      <span className=\"btn-text\">Connect Wallet</span>\n                    </div>\n                    <div className=\"btn-shine\"></div>\n                  </button>\n                </div>\n              </Container>\n            </div>\n          </>\n      }\n    </Layout>\n  )\n}\n"],"names":["customStyles","container","provided","boxShadow","fontFamily","borderRadius","control","backgroundColor","padding","border","option","state","isFocused","singleValue","color","noOptionsMessage","menu","input","_ref","options","value","onChange","_jsx","Select","styles","className","EXPECT_OPTIONS","label","COIN_OPTIONS","BettingTimer","timeToEnd","period","days","setDays","useState","hours","setHours","minutes","setMinutes","seconds","setSeconds","useEffect","timer","setInterval","getTimeUntil","time","parseInt","Date","now","Math","floor","clearInterval","children","_jsxs","UINT256_MAX","useRefresh","fast","slow","useContext","RefreshContext","fastRefresh","slowRefresh","BettingPage","useMediaQuery","data","txResult","writeContractAsync","useWriteContract","openConnectModal","useConnectModal","chainId","useChainId","isConnected","address","useAccount","balance","refetch","refetchBalance","useBalance","poolEthBalance","refetchPoolEthBalance","TEST_NET","BETTING_ADDRESS_TEST","BETTING_ADDRESS_MAIN","poolTokenBalance","refetchPoolTokenBalance","useReadContract","GOTCHA_ADDRESS_TEST","GOTCHA_ADDRESS_MAIN","abi","GotchaAbi","functionName","args","currentBetId","refetchCurrentBetId","BettingAbi","ethPrice","refetchEthPrice","minEthAmount","refetchMinEthAmount","maxEthAmount","refetchMaxEthAmount","minAmount","refetchMinAmount","maxAmount","refetchMaxAmount","earnedEthAmount","refetchEarnedEthAmount","lostEthAmount","refetchLostEthAmount","earnedAmount","refetchEarnedAmount","lostAmount","refetchLostAmount","prevBetUserInfo","refetchPrevBetUserInfo","currentBetUserInfo","refetchCurrentBetUserInfo","prevBetInfo","refetchPrevBetInfo","currentBetInfo","refetchCurrentBetInfo","prepareTime","refetchPrepareTime","bettingTime","refetchBettingTime","tokenBalance","refetchTokenBalance","approvedAmount","refetchApprovedAmount","regInputForExpect","useRef","regInputForCoin","selectedCollection","setSelectedCollection","selectedCoin","setSelectedCoin","countdownTime","setCountdownTime","countdownPeriod","setCountdownPeriod","isPreparing","setIsPreparing","isDeposited","setIsDeposited","depositAmount","setDepositAmount","isApproving","setIsApproving","isDepositing","setIsDepositing","undefined","Number","handleChange","e","target","Layout","_Fragment","Container","fluid","ethers","parseFloat","Combobox","ref","selectedOption","type","placeholder","style","width","min","RoundButton","variant","onClick","async","toast","error","then","catch","err","console","log","toString","height","viewBox","fill","xmlns","d"],"sourceRoot":""}