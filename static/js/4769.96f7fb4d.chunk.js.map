{"version":3,"file":"static/js/4769.96f7fb4d.chunk.js","mappings":"uUAGA,MAAMA,EAAe,CACnBC,UAAYC,IAAQ,IACfA,EACHC,UAAW,kCACXC,WAAY,OACZC,aAAc,SAEhBC,QAAUJ,IAAQ,IACbA,EACHK,gBAAiB,UACjBJ,UAAW,kCACXE,aAAc,OACdG,QAAS,SACTC,OAAQ,SAEVC,OAAQA,CAACR,EAAUS,KAAK,IACnBT,EACHG,aAAc,OACdE,gBAAiBI,EAAMC,UAAY,UAAY,UAC/CR,WAAY,SAEdS,YAAaA,CAACX,EAAUS,KAAK,IACxBT,EACHY,MAAO,YAETC,iBAAkBA,CAACb,EAAUS,KAAK,IAC7BT,EACHK,gBAAiB,YAEnBS,KAAMA,CAACd,EAAUS,KAAK,IACjBT,EACHK,gBAAiB,UACjBF,aAAc,OACdF,UAAW,4CAEbc,MAAOA,CAACf,EAAUS,KAAK,IAClBT,EACHY,MAAO,aAcX,EAViBI,IAAA,IAAC,QAAEC,EAAO,MAAEC,EAAK,SAAEC,GAAUH,EAAA,OAC5CI,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLJ,QAASA,EACTK,OAAQxB,EACRoB,MAAOA,EACPC,SAAUA,EACVI,UAAU,SACV,ECnDSC,EAAiB,CAC5B,CAAEN,MAAO,EAAGO,MAAO,QACnB,CAAEP,MAAO,EAAGO,MAAO,UAGRC,EAAe,CAC1B,CAAER,MAAO,EAAGO,MAAO,KACnB,CAAEP,MAAO,EAAGO,MAAO,O,wBCJN,SAASE,EAAYX,GAAuB,IAAtB,UAACY,EAAS,OAAEC,GAAOb,EACtD,MAAOc,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,IAC1BC,EAAOC,IAAYF,EAAAA,EAAAA,UAAS,IAC5BG,EAASC,IAAcJ,EAAAA,EAAAA,UAAS,IAChCK,EAASC,IAAcN,EAAAA,EAAAA,UAAS,GA4BvC,OA1BAO,EAAAA,EAAAA,YAAU,KACR,MAkBMC,EAAQC,aAlBOC,KACnB,MACMC,GADWf,EAAkC,IAAtBgB,SAAShB,GAAoB,GAClCiB,KAAKC,MAC7B,GAAIH,EAAO,EACTZ,EAAQ,GACRG,EAAS,GACTE,EAAW,OACN,CACL,MAAMC,EAAUU,KAAKC,MAAOL,EAAO,IAAQ,IACrCR,EAAUY,KAAKC,MAAOL,EAAO,IAAO,GAAM,IAC1CV,EAAQc,KAAKC,MAAOL,EAAI,KAAuB,IAC/Cb,EAAOiB,KAAKC,MAAML,EAAI,OAC5BZ,EAAQD,GACRI,EAASD,GACTG,EAAWD,GACXG,EAAWD,EACb,IAEsC,KAExC,MAAO,KACLY,cAAcT,EAAM,CACrB,GACA,CAACZ,KAGFR,EAAAA,EAAAA,KAAA,OAAKG,UAAU,gBAAe2B,UAC5BC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,kBAAiB2B,SAAA,EAC9BC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,aAAY2B,SAAA,EACzBC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,cAAa2B,SAAA,EAC1B9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,QAAO2B,SAAEf,EAAU,GAAK,EAAIY,KAAKC,MAAMb,EAAU,OACjEf,EAAAA,EAAAA,KAAA,QAAMG,UAAU,QAAO2B,SAAEf,EAAU,SAErCf,EAAAA,EAAAA,KAAA,OAAKG,UAAU,aAAY2B,SAAC,gBAG9B9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,iBAAgB2B,SAAC,OAEhCC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,aAAY2B,SAAA,EACzBC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,cAAa2B,SAAA,EAC1B9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,QAAO2B,SAAEb,EAAU,GAAK,EAAIU,KAAKC,MAAMX,EAAU,OACjEjB,EAAAA,EAAAA,KAAA,QAAMG,UAAU,QAAO2B,SAAEb,EAAU,SAErCjB,EAAAA,EAAAA,KAAA,OAAKG,UAAU,aAAY2B,SAAC,mBActC,C,01WCtCA,MAAME,EAAc,iFAEdC,EAAaA,KACjB,MAAM,KAAEC,EAAI,KAAEC,IAASC,EAAAA,EAAAA,YAAWC,EAAAA,GAClC,MAAO,CAAEC,YAAaJ,EAAMK,YAAaJ,EAAM,EAG3CK,EAAc5C,IAAkB,IAAjB,QAAE6C,GAAS7C,EAE9B,MAAM8C,EAAkB,CACtB,CAAEC,QAAS,gBAAiBC,OAAQ,YAAaC,MAAO,SACxD,CAAEF,QAAS,gBAAiBC,OAAQ,UAAWC,MAAO,SACtD,CAAEF,QAAS,gBAAiBC,OAAQ,UAAWC,MAAO,SACtD,CAAEF,QAAS,gBAAiBC,OAAQ,UAAWC,MAAO,QACtD,CAAEF,QAAS,gBAAiBC,OAAQ,UAAWC,MAAO,QACtD,CAAEF,QAAS,gBAAiBC,OAAQ,UAAWC,MAAO,QACtD,CAAEF,QAAS,gBAAiBC,OAAQ,UAAWC,MAAO,QACtD,CAAEF,QAAS,gBAAiBC,OAAQ,UAAWC,MAAO,QACtD,CAAEF,QAAS,gBAAiBC,OAAQ,UAAWC,MAAO,QACtD,CAAEF,QAAS,gBAAiBC,OAAQ,UAAWC,MAAO,QACtD,CAAEF,QAAS,gBAAiBC,OAAQ,SAAUC,MAAO,OACrD,CAAEF,QAAS,gBAAiBC,OAAQ,SAAUC,MAAO,OACrD,CAAEF,QAAS,gBAAiBC,OAAQ,SAAUC,MAAO,OACrD,CAAEF,QAAS,gBAAiBC,OAAQ,SAAUC,MAAO,OACrD,CAAEF,QAAS,gBAAiBC,OAAQ,SAAUC,MAAO,OACrD,CAAEF,QAAS,gBAAiBC,OAAQ,SAAUC,MAAO,OACrD,CAAEF,QAAS,gBAAiBC,OAAQ,SAAUC,MAAO,OACrD,CAAEF,QAAS,gBAAiBC,OAAQ,SAAUC,MAAO,OACrD,CAAEF,QAAS,gBAAiBC,OAAQ,SAAUC,MAAO,OACrD,CAAEF,QAAS,gBAAiBC,OAAQ,QAASC,MAAO,QAYhDC,GAAUC,EAAAA,EAAAA,MAERC,KAAMC,EAAUC,QAASC,IAAoBC,EAAAA,EAAAA,GAAgB,CACnET,QAASG,IAAYO,EAAAA,GAAWC,EAAAA,GAAuBC,EAAAA,GACvDC,IAAKC,EACLC,aAAc,oBACdC,KAAM,GACNb,QAASA,KAGJc,EAAeC,IAAoBjD,EAAAA,EAAAA,UAAS,IAmCnD,OAjCAO,EAAAA,EAAAA,YAAU,KACoB2C,WAC1B,IACE,MAAMC,EAAS,IAAIC,EAAAA,EAAa,CAC9BC,IAAKC,EAAAA,GACLC,MAAO,IAAIC,EAAAA,KAGLpB,KAAMqB,EAAeC,MAAOA,SAAgBP,EAAOQ,MAAM,CAC/DA,OAAOC,EAAAA,EAAAA,IA9BQ,wKA+BfC,UAAW,CAAC,EACZC,YAAa,gBAGf,GAAIL,IAAkBC,EAAO,CAC3B,MAAMK,EAAUN,EAAcO,yBAE9B,GADAC,QAAQC,IAAI,aAAcH,GACtBA,EAAQI,OAAS,EAAG,CACtB,MAAMC,EAAmBL,EAAQM,KAAI,CAACC,EAAMC,KAAK,CAC/CxC,QAASuC,EAAKE,GAAGC,MAAM,EAAG,GAAK,MAAQH,EAAKE,GAAGC,OAAO,GACtDzC,SAAUK,EAAWqC,WAAWC,EAAAA,GAAmBtC,EAAU,IAAM,GAAKqC,WAAWC,EAAAA,GAAmBL,EAAKM,YAAa,MAAMC,QAAQ,GACtI5C,MAAOsC,EAAQ,GAAK,GAAGzC,EAAgByC,GAAOtC,QAAU,OAE1DgB,EAAiBmB,EACnB,CACF,CACF,CAAE,MAAOV,GACPO,QAAQC,IAAIR,EACd,GAEFoB,EAAqB,GACpB,KAGD1F,EAAAA,EAAAA,KAAA,OAAKG,UAAU,oBAAmB2B,UAChCC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,4BAA2B2B,SAAA,EACxCC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,qBAAoB2B,SAAA,EACjC9B,EAAAA,EAAAA,KAAA,MAAIG,UAAU,oBAAmB2B,SAAC,6BAClC9B,EAAAA,EAAAA,KAAA,UAAQG,UAAU,eAAewF,QAASlD,EAAQX,SAAC,aAGrDC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,eAAc2B,SAAA,EAC3B9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,aAAY2B,SAAC,kBAC5BC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,aAAY2B,SAAA,EACzB9B,EAAAA,EAAAA,KAAA,MAAA8B,SAAI,sBACJC,EAAAA,EAAAA,MAAA,KAAG5B,UAAU,aAAY2B,SAAA,CAAC,wBAAoB9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,kBAAiB2B,SAAC,qBAAuB,+CAA2C9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,kBAAiB2B,SAAC,4BAA8B,kBAAc9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,kBAAiB2B,SAAC,QAAU,gCAIhRC,EAAAA,EAAAA,MAAC6D,EAAAA,EAAK,CAACzF,UAAU,oBAAoB0F,YAAU,EAAA/D,SAAA,EAC7C9B,EAAAA,EAAAA,KAAA,SAAA8B,UACEC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACE9B,EAAAA,EAAAA,KAAA,MAAA8B,SAAI,OACJ9B,EAAAA,EAAAA,KAAA,MAAA8B,SAAI,oBACJ9B,EAAAA,EAAAA,KAAA,MAAA8B,SAAI,YACJ9B,EAAAA,EAAAA,KAAA,MAAIG,UAAU,eAAc2B,SAAC,gBAGjC9B,EAAAA,EAAAA,KAAA,SAAA8B,SACG8B,EAAcqB,KAAI,CAACC,EAAMC,KACxBpD,EAAAA,EAAAA,MAAA,MAAgB5B,UAAWgF,EAAQ,EAAI,eAAiB,GAAGrD,SAAA,EACzDC,EAAAA,EAAAA,MAAA,MAAI5B,UAAU,OAAM2B,SAAA,CAAEqD,EAAQ,EAAGA,EAAQ,IAAKnF,EAAAA,EAAAA,KAAA,QAAMG,UAAU,cAAa2B,SAAgB,SAC3F9B,EAAAA,EAAAA,KAAA,MAAIG,UAAU,UAAS2B,SAAEoD,EAAKvC,WAC9BZ,EAAAA,EAAAA,MAAA,MAAI5B,UAAU,SAAQ2B,SAAA,CAAC,IAAEoD,EAAKtC,WAC9B5C,EAAAA,EAAAA,KAAA,MAAIG,UAAU,QAAO2B,SAAEoD,EAAKrC,UAJrBsC,WAUfnF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,qBAAoB2B,UACjC9B,EAAAA,EAAAA,KAAA,UAAQG,UAAU,wBAAwBwF,QAASlD,EAAQX,SAAC,4BAG5D,EAIK,SAASgE,KACLC,EAAAA,EAAAA,IAAc,sCAA/B,MACM,YAAEzD,GAAgBL,KACjB+D,EAAiBC,IAAsBrF,EAAAA,EAAAA,WAAS,IAE/CoC,KAAMkD,EAAQ,mBAAEC,IAAuBC,EAAAA,EAAAA,MAEzC,iBAAEC,IAAqBC,EAAAA,EAAAA,MAEvBxD,GAAUC,EAAAA,EAAAA,MACV,YAAEwD,EAAW,QAAE5D,IAAY6D,EAAAA,EAAAA,MACzBxD,KAAMyD,EAASvD,QAASwD,IAAmBC,EAAAA,EAAAA,GAAW,CAAEhE,QAASA,KAIjEK,KAAM4D,EAAgB1D,QAAS2D,IAA0BF,EAAAA,EAAAA,GAAW,CAAEhE,QAASG,IAAYO,EAAAA,GAAWC,EAAAA,GAAuBC,EAAAA,MAE7HP,KAAM8D,EAAkB5D,QAAS6D,IAA4B3D,EAAAA,EAAAA,GAAgB,CACnFT,QAASG,IAAYO,EAAAA,GAAW2D,EAAAA,GAAsBC,EAAAA,GACtDzD,IAAK0D,EACLxD,aAAc,YACdC,KAAM,CAACb,IAAYO,EAAAA,GAAWC,EAAAA,GAAuBC,EAAAA,IACrDT,QAASA,KAIHE,KAAMmE,EAAcjE,QAASkE,IAAwBhE,EAAAA,EAAAA,GAAgB,CAC3ET,QAASG,IAAYO,EAAAA,GAAWC,EAAAA,GAAuBC,EAAAA,GACvDC,IAAKC,EACLC,aAAc,eACdC,KAAM,GACNb,QAASA,KAGHE,KAAMC,EAAUC,QAASC,IAAoBC,EAAAA,EAAAA,GAAgB,CACnET,QAASG,IAAYO,EAAAA,GAAWC,EAAAA,GAAuBC,EAAAA,GACvDC,IAAKC,EACLC,aAAc,oBACdC,KAAM,GACNb,QAASA,KAGHE,KAAMqE,EAAcnE,QAASoE,IAAwBlE,EAAAA,EAAAA,GAAgB,CAC3ET,QAASG,IAAYO,EAAAA,GAAWC,EAAAA,GAAuBC,EAAAA,GACvDC,IAAKC,EACLC,aAAc,qBACdC,KAAM,GACNb,QAASA,KAGHE,KAAMuE,EAAcrE,QAASsE,IAAwBpE,EAAAA,EAAAA,GAAgB,CAC3ET,QAASG,IAAYO,EAAAA,GAAWC,EAAAA,GAAuBC,EAAAA,GACvDC,IAAKC,EACLC,aAAc,qBACdC,KAAM,GACNb,QAASA,KAGHE,KAAMyE,EAAWvE,QAASwE,IAAqBtE,EAAAA,EAAAA,GAAgB,CACrET,QAASG,IAAYO,EAAAA,GAAWC,EAAAA,GAAuBC,EAAAA,GACvDC,IAAKC,EACLC,aAAc,iBACdC,KAAM,GACNb,QAASA,KAGHE,KAAM2E,EAAWzE,QAAS0E,IAAqBxE,EAAAA,EAAAA,GAAgB,CACrET,QAASG,IAAYO,EAAAA,GAAWC,EAAAA,GAAuBC,EAAAA,GACvDC,IAAKC,EACLC,aAAc,iBACdC,KAAM,GACNb,QAASA,KAGHE,KAAM6E,EAAiB3E,QAAS4E,IAA2B1E,EAAAA,EAAAA,GAAgB,CACjFT,QAASG,IAAYO,EAAAA,GAAWC,EAAAA,GAAuBC,EAAAA,GACvDC,IAAKC,EACLC,aAAc,kBACdC,KAAM,CAAC4C,EAAc5D,EAAU,IAC/BG,QAASA,KAGHE,KAAM+E,EAAe7E,QAAS8E,KAAyB5E,EAAAA,EAAAA,GAAgB,CAC7ET,QAASG,IAAYO,EAAAA,GAAWC,EAAAA,GAAuBC,EAAAA,GACvDC,IAAKC,EACLC,aAAc,gBACdC,KAAM,CAAC4C,EAAc5D,EAAU,IAC/BG,QAASA,KAGHE,KAAMiF,GAAc/E,QAASgF,KAAwB9E,EAAAA,EAAAA,GAAgB,CAC3ET,QAASG,IAAYO,EAAAA,GAAWC,EAAAA,GAAuBC,EAAAA,GACvDC,IAAKC,EACLC,aAAc,oBACdC,KAAM,CAAC4C,EAAc5D,EAAU,IAC/BG,QAASA,KAGHE,KAAMmF,GAAYjF,QAASkF,KAAsBhF,EAAAA,EAAAA,GAAgB,CACvET,QAASG,IAAYO,EAAAA,GAAWC,EAAAA,GAAuBC,EAAAA,GACvDC,IAAKC,EACLC,aAAc,kBACdC,KAAM,CAAC4C,EAAc5D,EAAU,IAC/BG,QAASA,KAGHE,KAAMqF,GAAiBnF,QAASoF,KAA2BlF,EAAAA,EAAAA,GAAgB,CACjFT,QAASG,IAAYO,EAAAA,GAAWC,EAAAA,GAAuBC,EAAAA,GACvDC,IAAKC,EACLC,aAAc,cACdC,KAAM,CAACnC,SAAS2F,GAA8B,GAAK,EAAGZ,EAAc5D,EAAU,IAC9EG,QAASA,KAGHE,KAAMuF,GAAoBrF,QAASsF,KAA8BpF,EAAAA,EAAAA,GAAgB,CACvFT,QAASG,IAAYO,EAAAA,GAAWC,EAAAA,GAAuBC,EAAAA,GACvDC,IAAKC,EACLC,aAAc,cACdC,KAAM,CAACnC,SAAS2F,GAA8B,GAAIZ,EAAc5D,EAAU,IAC1EG,QAASA,KAGHE,KAAMyF,GAAavF,QAASwF,KAAuBtF,EAAAA,EAAAA,GAAgB,CACzET,QAASG,IAAYO,EAAAA,GAAWC,EAAAA,GAAuBC,EAAAA,GACvDC,IAAKC,EACLC,aAAc,UACdC,KAAM,CAACnC,SAAS2F,GAA8B,GAAK,GACnDrE,QAASA,KAGHE,KAAM2F,GAAgBzF,QAAS0F,KAA0BxF,EAAAA,EAAAA,GAAgB,CAC/ET,QAASG,IAAYO,EAAAA,GAAWC,EAAAA,GAAuBC,EAAAA,GACvDC,IAAKC,EACLC,aAAc,UACdC,KAAM,CAACnC,SAAS2F,GAA8B,IAC9CrE,QAASA,KAGHE,KAAM6F,GAAa3F,QAAS4F,KAAuB1F,EAAAA,EAAAA,GAAgB,CACzET,QAASG,IAAYO,EAAAA,GAAWC,EAAAA,GAAuBC,EAAAA,GACvDC,IAAKC,EACLC,aAAc,eACdC,KAAM,GACNb,QAASA,KAGHE,KAAM+F,GAAa7F,QAAS8F,KAAuB5F,EAAAA,EAAAA,GAAgB,CACzET,QAASG,IAAYO,EAAAA,GAAWC,EAAAA,GAAuBC,EAAAA,GACvDC,IAAKC,EACLC,aAAc,eACdC,KAAM,GACNb,QAASA,IAGX+B,QAAQC,IAAI,uBAAwB+D,IACpChE,QAAQC,IAAI,uBAAwBiE,IAGpC,MAAQ/F,KAAMiG,GAAc/F,QAASgG,KAAwB9F,EAAAA,EAAAA,GAAgB,CAC3ET,QAASG,IAAYO,EAAAA,GAAW2D,EAAAA,GAAsBC,EAAAA,GACtDzD,IAAK0D,EACLxD,aAAc,YACdC,KAAM,CAAC4C,EAAc5D,EAAU,IAC/BG,QAASA,KAGHE,KAAMmG,GAAgBjG,QAASkG,KAA0BhG,EAAAA,EAAAA,GAAgB,CAC/ET,QAASG,IAAYO,EAAAA,GAAW2D,EAAAA,GAAsBC,EAAAA,GACtDzD,IAAK0D,EACLxD,aAAc,YACdC,KAAM,CAAChB,EAASG,IAAYO,EAAAA,GAAWC,EAAAA,GAAuBC,EAAAA,IAC9DT,QAASA,IAGLuG,IAAoBC,EAAAA,EAAAA,UACpBC,IAAkBD,EAAAA,EAAAA,WACjBE,GAAoBC,KAAyB7I,EAAAA,EAAAA,UAASR,EAAe,KACrEsJ,GAAcC,KAAmB/I,EAAAA,EAAAA,UAASN,EAAa,KACvDsJ,GAAeC,KAAoBjJ,EAAAA,EAAAA,UAAS,IAC5CkJ,GAAiBC,KAAsBnJ,EAAAA,EAAAA,UAAS,IAChDoJ,GAAaC,KAAkBrJ,EAAAA,EAAAA,WAAS,IACxCsJ,GAAaC,KAAkBvJ,EAAAA,EAAAA,WAAS,IAExCwJ,GAAeC,KAAoBzJ,EAAAA,EAAAA,UAAS,IAC5C0J,GAAaC,KAAkB3J,EAAAA,EAAAA,WAAS,IACxC4J,GAAcC,KAAmB7J,EAAAA,EAAAA,WAAS,IAEjDO,EAAAA,EAAAA,YAAU,KACRiG,IACAjE,IACAyF,KACAJ,KACAN,KACAE,KAEAgB,KAEA1C,IACAwC,KACArC,IACAE,GAAyB,GACxB,CAACzE,KAEJnB,EAAAA,EAAAA,YAAU,UACeuJ,IAAnB/B,SAAuD+B,IAAvBnC,KAEhCI,GAAe,IACjBsB,IAAe,GACfJ,GAAiBrI,SAASmH,GAAe,KACzCoB,GAAmBY,OAAO9B,OAE1BoB,IAAe,GACfJ,GAAiBrI,SAASmH,GAAe,KACzCoB,GAAmBY,OAAO5B,MAGxBR,GAAmB,GACrB4B,IAAe,GAEfA,IAAe,GAAM,GAEtB,CAACxB,GAAgBJ,KAEpB,MA6BMqC,GAAgBC,IACpBR,GAAiBQ,EAAEC,OAAOhL,MAAM,EAyFlC,OACEE,EAAAA,EAAAA,KAAC+K,EAAAA,EAAM,CAAAjJ,SAEHyE,GACEvG,EAAAA,EAAAA,KAAAgL,EAAAA,SAAA,CAAAlJ,UACEC,EAAAA,EAAAA,MAACkJ,EAAAA,EAAS,CAACC,OAAK,EAAApJ,SAAA,EACd9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,OAAM2B,UACnBC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CAAI,YAAQ9B,EAAAA,EAAAA,KAAA,QAAA8B,SAAM,iBAEpBC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,yBAAwB2B,SAAA,EACrC9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,WAAU2B,UACvBC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,oBAAmB2B,SAAA,EAChC9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,4BAA2B2B,UACxCC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,aAAY2B,SAAA,EACzB9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,uBAAsB2B,UACnC9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,eAAc2B,UAC3B9B,EAAAA,EAAAA,KAAA,QAAA8B,SAAM,WAGVC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,kBAAiB2B,SAAA,EAC9B9B,EAAAA,EAAAA,KAAA,MAAIG,UAAU,gBAAe2B,SAAC,oBAC9B9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,iBAAgB2B,UAC7B9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAc2B,SAAEN,SAAS+D,EAAAA,GAAmBkB,EAAUA,EAAQ3G,MAAQ,EAAG,eAE3FE,EAAAA,EAAAA,KAAA,OAAKG,UAAU,iBAAgB2B,UAC7B9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,qBAAoB2B,SAAEN,SAAS+D,EAAAA,GAAmB0D,IAA8B,EAAG,uBAM3GlH,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,kBAAiB2B,SAAA,EAC9B9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,wBAAuB2B,UACpCC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,aAAY2B,SAAA,EACzB9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,oBAAmB2B,UAChC9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,qBAAoB2B,UACjC9B,EAAAA,EAAAA,KAAA,QAAA8B,SAAM,gBAGVC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,eAAc2B,SAAA,EAC3B9B,EAAAA,EAAAA,KAAA,MAAIG,UAAU,aAAY2B,SAAC,gBAC3B9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,cAAa2B,UAC1BC,EAAAA,EAAAA,MAAA,QAAM5B,UAAU,eAAc2B,SAAA,CAAEwD,WAAWC,EAAAA,GAAmBsC,GAAoC,EAAG,UAAU,WAEjH7H,EAAAA,EAAAA,KAAA,OAAKG,UAAU,cAAa2B,UAC1BC,EAAAA,EAAAA,MAAA,QAAM5B,UAAU,eAAc2B,SAAA,CAAEwD,WAAWC,EAAAA,GAAmB0C,IAA8B,EAAG,UAAU,oBAMjHjI,EAAAA,EAAAA,KAAA,OAAKG,UAAU,yBAAwB2B,UACrCC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,aAAY2B,SAAA,EACzB9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,oBAAmB2B,UAChC9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,sBAAqB2B,UAClC9B,EAAAA,EAAAA,KAAA,QAAA8B,SAAM,gBAGVC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,eAAc2B,SAAA,EAC3B9B,EAAAA,EAAAA,KAAA,MAAIG,UAAU,aAAY2B,SAAC,iBAC3B9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,cAAa2B,UAC1BC,EAAAA,EAAAA,MAAA,QAAM5B,UAAU,eAAc2B,SAAA,CAAEwD,WAAWC,EAAAA,GAAmBwC,GAAgC,EAAG,UAAU,WAE7G/H,EAAAA,EAAAA,KAAA,OAAKG,UAAU,cAAa2B,UAC1BC,EAAAA,EAAAA,MAAA,QAAM5B,UAAU,eAAc2B,SAAA,CAAEwD,WAAWC,EAAAA,GAAmB4C,IAA0B,EAAG,UAAU,4BASnHnI,EAAAA,EAAAA,KAAA,OAAKG,UAAU,yBAAwB2B,UACrC9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,oBAAmB2B,UAChCC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,aAAY2B,SAAA,EACzB9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,uBAAsB2B,UACnC9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,gBAAe2B,UAC5B9B,EAAAA,EAAAA,KAAA,QAAA8B,SAAM,sBAGVC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,kBAAiB2B,SAAA,EAC9B9B,EAAAA,EAAAA,KAAA,MAAIG,UAAU,gBAAe2B,SAAC,kBAC9B9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,iBAAgB2B,UAC7B9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAc2B,SAAEN,SAAS+D,EAAAA,GAAmBqB,EAAiBA,EAAe9G,MAAQ,EAAG,eAEzGE,EAAAA,EAAAA,KAAA,OAAKG,UAAU,iBAAgB2B,UAC7B9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,qBAAoB2B,SAAEN,SAAS+D,EAAAA,GAAmBuB,GAAsC,EAAG,yBAOrH/E,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,yBAAwB2B,SAAA,EACrC9B,EAAAA,EAAAA,KAAA,MAAIG,UAAU,wBAAuB2B,SAAC,kBACtCC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,wBAAuB2B,SAAA,EACpCC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,eAAc2B,SAAA,EAC3B9B,EAAAA,EAAAA,KAAA,QAAA8B,SAAM,qBACN9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,eAAc2B,SAAC,8CAEjCC,EAAAA,EAAAA,MAAA,UACE5B,UAAU,qBACVwF,QAASA,IAAMM,GAAmB,GAAMnE,SAAA,EAExC9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,cAAa2B,SAAC,kBAC9B9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,cAAa2B,SAAC,yBAInCkE,IAAmBhG,EAAAA,EAAAA,KAACwC,EAAW,CAACC,QAASA,IAAMwD,GAAmB,MACnElE,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,0BAAyB2B,SAAA,EACtCC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,oBAAmB2B,SAAA,EAChCC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,cAAa2B,SAAA,EAC1BC,EAAAA,EAAAA,MAAA,QAAM5B,UAAU,aAAY2B,SAAA,CAAC,QAAMN,SAAS2F,GAAgB,MAC5DnH,EAAAA,EAAAA,KAAA,QAAMG,UAAU,cAAa2B,SAAEuG,IAAmBA,GAAgB,GAAK,YAAc,yBAEvFrI,EAAAA,EAAAA,KAAA,SAAOG,UAAU,qBAAoB2B,UACnCC,EAAAA,EAAAA,MAAA,SAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACE9B,EAAAA,EAAAA,KAAA,MAAIG,UAAU,QAAO2B,SAAC,kBACtBC,EAAAA,EAAAA,MAAA,MAAI5B,UAAU,wBAAuB2B,SAAA,CAAC,KAAGuG,IAAmBA,GAAgB,GAAK9C,EAAAA,GAAmB8C,GAAgB,GAAI,GAAa,YAEvItG,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACE9B,EAAAA,EAAAA,KAAA,MAAIG,UAAU,QAAO2B,SAAC,gBACtBC,EAAAA,EAAAA,MAAA,MAAI5B,UAAU,wBAAuB2B,SAAA,CAAC,KAAG2G,GAAclD,EAAAA,GAAmBkD,GAAY,GAAI,GAAK,YAEjG1G,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACE9B,EAAAA,EAAAA,KAAA,MAAIG,UAAU,QAAO2B,SAAC,aACtB9B,EAAAA,EAAAA,KAAA,MAAIG,UAAU,wBAAuB2B,SAAEuG,IAAmBA,GAAgB,GAAK/C,WAAWC,EAAAA,GAAmB8C,GAAgB,GAAI,UAAoB,WAEvJtG,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACE9B,EAAAA,EAAAA,KAAA,MAAIG,UAAU,QAAO2B,SAAC,kBACtB9B,EAAAA,EAAAA,KAAA,MAAIG,UAAU,wBAAuB2B,SAAEuG,IAAmBA,GAAgB,GAAMA,GAAgB,GAAK,OAAS,QAAmB,WAEnItG,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACE9B,EAAAA,EAAAA,KAAA,MAAIG,UAAU,QAAO2B,SAAC,mBACtB9B,EAAAA,EAAAA,KAAA,MAAIG,UAAU,wBAAuB2B,SAAEuG,IAAmBA,GAAgB,GAAMA,GAAgB,GAAK,IAAM,KAAgB,WAE7HtG,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACE9B,EAAAA,EAAAA,KAAA,MAAIG,UAAU,QAAO2B,SAAC,aACtBC,EAAAA,EAAAA,MAAA,MAAI5B,UAAU,QAAO2B,SAAA,CACjBuG,IAAmBA,GAAgB,IAAuC,IAAjC7G,SAAS6G,GAAgB,MAAcrI,EAAAA,EAAAA,KAAA,QAAMG,UAAU,aAAY2B,SAAC,QAC7GuG,IAAmBA,GAAgB,IAAuC,IAAjC7G,SAAS6G,GAAgB,MAAcrI,EAAAA,EAAAA,KAAA,QAAMG,UAAU,cAAa2B,SAAC,SAC9GuG,IAAmBA,GAAgB,IAAuC,IAAjC7G,SAAS6G,GAAgB,MAAcrI,EAAAA,EAAAA,KAAA,QAAMG,UAAU,cAAa2B,SAAC,SAC9GuG,KAAoBA,GAAgB,IAAO,oBAMvDtG,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,qBAAoB2B,SAAA,EACjCC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,cAAa2B,SAAA,EAC1BC,EAAAA,EAAAA,MAAA,QAAM5B,UAAU,aAAY2B,SAAA,CAAC,QAAMN,SAAS2F,OAC5CnH,EAAAA,EAAAA,KAAA,QAAMG,UAAU,aAAY2B,SAAEoI,GAAc,SAAW,aAEzDnI,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,gBAAe2B,SAAA,EAC5B9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,cAAa2B,SAAC,kBAC9BC,EAAAA,EAAAA,MAAA,QAAM5B,UAAU,cAAa2B,SAAA,CAAC,KAAGmB,EAAWsC,EAAAA,GAAmBtC,EAAU,GAAK,YAEhFlB,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,iBAAgB2B,SAAA,CAE3BkI,IACEhK,EAAAA,EAAAA,KAAA,OAAKG,UAAU,yBAAwB2B,SAAC,+CAExC9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,yBAAwB2B,SAAC,yBAE5C9B,EAAAA,EAAAA,KAACO,EAAY,CAACC,UAAWoJ,GAAenJ,OAAQqJ,SAElD9J,EAAAA,EAAAA,KAAA,SAAOG,UAAU,qBAAoB2B,UACnCC,EAAAA,EAAAA,MAAA,SAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACE9B,EAAAA,EAAAA,KAAA,MAAIG,UAAU,QAAO2B,SAAC,kBACtBC,EAAAA,EAAAA,MAAA,MAAI5B,UAAU,wBAAuB2B,SAAA,CAAC,KAAGyG,IAAsBA,GAAmB,GAAKhD,EAAAA,GAAmBgD,GAAmB,GAAI,GAAa,YAEhJxG,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACE9B,EAAAA,EAAAA,KAAA,MAAIG,UAAU,QAAO2B,SAAC,kBACtBC,EAAAA,EAAAA,MAAA,MAAI5B,UAAU,QAAO2B,SAAA,CACjBkI,KAAgBE,KAAgBlK,EAAAA,EAAAA,KAACmL,EAAQ,CAACC,IAAK/B,GAAmBxJ,QAASO,EAAgBN,MAAO0J,GAAoBzJ,SAAWsL,GAAmB5B,GAAsB4B,MACzKrB,KAAgBE,IAAgB,KAClCA,KAAgB3B,GAAsBA,GAAmB,IAAKvI,EAAAA,EAAAA,KAAA,QAAMG,UAAU,mBAAkB2B,SAAC,UAAc9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,oBAAmB2B,SAAC,UAAgB,aAGxKC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACE9B,EAAAA,EAAAA,KAAA,MAAIG,UAAU,QAAO2B,SAAC,mBACtBC,EAAAA,EAAAA,MAAA,MAAI5B,UAAU,QAAO2B,SAAA,CACjBkI,KAAgBE,KAAgBlK,EAAAA,EAAAA,KAACmL,EAAQ,CAACC,IAAK7B,GAAiB1J,QAASS,EAAcR,MAAO4J,GAAc3J,SAAWsL,GAAmB1B,GAAgB0B,MACzJrB,KAAgBE,IAAgB,KAClCA,KAAgB3B,GAAsBA,GAAmB,IAAKvI,EAAAA,EAAAA,KAAA,QAAMG,UAAU,mBAAkB2B,SAAC,QAAY9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,oBAAmB2B,SAAC,QAAc,aAGpKC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACE9B,EAAAA,EAAAA,KAAA,MAAIG,UAAU,QAAO2B,SAAC,aACtBC,EAAAA,EAAAA,MAAA,MAAI5B,UAAU,QAAO2B,SAAA,CACjBkI,KAAgBE,KAChBlK,EAAAA,EAAAA,KAAA,OAAKG,UAAU,yBAAwB2B,SACb,IAAvB4H,GAAa5J,OACZiC,EAAAA,EAAAA,MAAAiJ,EAAAA,SAAA,CAAAlJ,SAAA,EACEC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,gBAAe2B,SAAA,EAC5B9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,gBAAe2B,SAAC,QAC/B9B,EAAAA,EAAAA,KAAA,SACEsL,KAAK,SACLC,YAAa,QAAQ/J,SAAS+D,EAAAA,GAAmB8B,GAA8B,IAAK,OACpFlH,UAAU,gBACVL,MAAOsK,GACPrK,SAAU6K,SAGd7I,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,eAAc2B,SAAA,EAC3BC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,cAAa2B,SAAA,CAAC,SAAK9B,EAAAA,EAAAA,KAAA,QAAA8B,SAAON,SAAS+D,EAAAA,GAAmB8B,GAA8B,IAAK,WACxGtF,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,eAAc2B,SAAA,EAC3B9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,kBACfH,EAAAA,EAAAA,KAAA,OAAKG,UAAU,kBAAkBqL,MAAO,CAAEC,MAAO,GAAG9J,KAAK+J,IAAI,IAAMtB,GAAgB5I,SAAS+D,EAAAA,GAAmBgC,GAA8B,IAAK,KAAQ,eAE5JxF,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,cAAa2B,SAAA,CAAC,SAAK9B,EAAAA,EAAAA,KAAA,QAAA8B,SAAON,SAAS+D,EAAAA,GAAmBgC,GAA8B,IAAK,iBAI5GxF,EAAAA,EAAAA,MAAAiJ,EAAAA,SAAA,CAAAlJ,SAAA,EACEC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,gBAAe2B,SAAA,EAC5B9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,gBAAe2B,SAAC,SAC/B9B,EAAAA,EAAAA,KAAA,SACEsL,KAAK,SACLC,YAAa,QAAQ/J,SAAS+D,EAAAA,GAAmBkC,GAAwB,IAAK,OAC9EtH,UAAU,gBACVL,MAAOsK,GACPrK,SAAU6K,SAGd7I,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,eAAc2B,SAAA,EAC3BC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,cAAa2B,SAAA,CAAC,SAAK9B,EAAAA,EAAAA,KAAA,QAAA8B,SAAON,SAAS+D,EAAAA,GAAmBkC,GAAwB,IAAK,WAClG1F,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,eAAc2B,SAAA,EAC3B9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,kBACfH,EAAAA,EAAAA,KAAA,OAAKG,UAAU,kBAAkBqL,MAAO,CAAEC,MAAO,GAAG9J,KAAK+J,IAAI,IAAMtB,GAAgB5I,SAAS+D,EAAAA,GAAmBoC,GAAwB,IAAK,KAAQ,eAEtJ5F,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,cAAa2B,SAAA,CAAC,SAAK9B,EAAAA,EAAAA,KAAA,QAAA8B,SAAON,SAAS+D,EAAAA,GAAmBoC,GAAwB,IAAK,mBAMzGqC,KAAgBE,IAAgB,KAClCA,KAAelK,EAAAA,EAAAA,KAAA,QAAMG,UAAU,iBAAgB2B,SAAEwD,WAAWiD,GAAqBhD,EAAAA,GAAmBgD,GAAmB,GAAI,SAAW,oBAK/IvI,EAAAA,EAAAA,KAAC2L,EAAAA,EAAW,CAEVxL,UAAU,0BACV2B,SAhXdyG,IAAsBA,GAAmB,IAGzCI,IAAkBA,GAAe,GAF5B,qBAKa,IAAlByB,GACK,eAELE,GACK,gBAEkB,IAAvBZ,GAAa5J,OAAewF,WAAWC,EAAAA,GAAmBkB,EAAUA,EAAQ3G,MAAQ,IAAK,UAAYsK,GAChG,0BAEkB,IAAvBV,GAAa5J,OAAewF,WAAWC,EAAAA,GAAmB0D,IAA8B,IAAK,UAAYmB,GACpG,2BAEkB,IAAvBV,GAAa5J,OAAewF,WAAWC,EAAAA,GAAmB4D,IAAkC,IAAK,UAAYiB,GACxG,cAELI,GACK,iBAGF,UAwVWoB,QAAQ,cACRjG,QAlVE7B,UACpB,KAAIyE,KAAsBA,GAAmB,OAGzCI,KAAkBA,GAAe,KAGf,IAAlByB,GAAJ,CAGA,GAA2B,IAAvBV,GAAa5J,MAAa,CAC5B,GAAIsK,GAAgB5I,SAAS+D,EAAAA,GAAmB8B,GAA8B,IAAK,KAEjF,YADAwE,EAAAA,GAAMvH,MAAM,yBAAyB9C,SAAS+D,EAAAA,GAAmB8B,GAA8B,IAAK,SAItG,GAAI+C,GAAgB5I,SAAS+D,EAAAA,GAAmBgC,GAA8B,IAAK,KAEjF,YADAsE,EAAAA,GAAMvH,MAAM,yBAAyB9C,SAAS+D,EAAAA,GAAmBgC,GAA8B,IAAK,SAItG,GAAIjC,WAAWC,EAAAA,GAAmBqB,EAAiBA,EAAe9G,MAAQ,IAAK,UAAYsK,GAEzF,YADAyB,EAAAA,GAAMvH,MAAM,iCAGhB,KAAO,CACL,GAAI8F,GAAgB5I,SAAS+D,EAAAA,GAAmBkC,GAAwB,IAAK,KAE3E,YADAoE,EAAAA,GAAMvH,MAAM,yBAAyB9C,SAAS+D,EAAAA,GAAmBkC,GAAwB,IAAK,SAIhG,GAAI2C,GAAgB5I,SAAS+D,EAAAA,GAAmBoC,GAAwB,IAAK,KAE3E,YADAkE,EAAAA,GAAMvH,MAAM,yBAAyB9C,SAAS+D,EAAAA,GAAmBoC,GAAwB,IAAK,SAIhG,GAAIrC,WAAWC,EAAAA,GAAmBuB,GAAsC,IAAK,UAAYsD,GAEvF,YADAyB,EAAAA,GAAMvH,MAAM,kCAGhB,CAEA,KAA2B,IAAvBoF,GAAa5J,OAAewF,WAAWC,EAAAA,GAAmBkB,EAAUA,EAAQ3G,MAAQ,IAAK,UAAYsK,OAG9E,IAAvBV,GAAa5J,OAAewF,WAAWC,EAAAA,GAAmB0D,IAA8B,IAAK,UAAYmB,IAA7G,CAGA,GAA2B,IAAvBV,GAAa5J,OAAewF,WAAWC,EAAAA,GAAmB4D,IAAkC,IAAK,UAAYiB,GAgB/G,OAfAG,IAAe,cAETpE,EAAmB,CACvBxD,QAASG,IAAYO,EAAAA,GAAW2D,EAAAA,GAAsBC,EAAAA,GACtDzD,IAAK0D,EACLxD,aAAc,UACdC,KAAM,CAACb,IAAYO,EAAAA,GAAWC,EAAAA,GAAuBC,EAAAA,GAAsBvB,KAE1E8J,MAAK,KACJvB,IAAe,EAAM,IAEtBwB,OAAOC,IACNnH,QAAQC,IAAIkH,GACZzB,IAAe,EAAM,IAK3BE,IAAgB,GAEhB5F,QAAQC,IAAI,mBAAoBS,EAAAA,GAAkB6E,GAAc6B,WAAY,IAAkC,IAA7BzC,GAAmB1J,aAE9FqG,EAAmB,CACvBxD,QAASG,IAAYO,EAAAA,GAAWC,EAAAA,GAAuBC,EAAAA,GACvDC,IAAKC,EACLC,aAAc,MACdC,KAAM,CAAwB,IAAvB+F,GAAa5J,MAA4ByF,EAAAA,GAAkB6E,GAAc6B,WAAY,IAAkC,IAA7BzC,GAAmB1J,OACpHA,MAA8B,IAAvB4J,GAAa5J,MAAcyF,EAAAA,GAAkB6E,GAAc6B,WAAY,IAAM,IAEnFH,MAAK,KACJrB,IAAgB,EAAM,IAEvBsB,OAAOC,IACNvB,IAAgB,EAAM,GApClB,CAtCA,CA2EJ,GA2PkB,wBAYhB1I,EAAAA,EAAAA,MAAAiJ,EAAAA,SAAA,CAAAlJ,SAAA,EACE9B,EAAAA,EAAAA,KAACiL,EAAAA,EAAS,CAACC,OAAK,EAAApJ,UACdC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,oBAAmB2B,SAAA,EAChCC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,eAAc2B,SAAA,EAC3BC,EAAAA,EAAAA,MAAA,MAAI5B,UAAU,aAAY2B,SAAA,CAAC,qBAAiB9B,EAAAA,EAAAA,KAAA,QAAA8B,SAAM,aAClD9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,gBAAe2B,UAC5BC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,aAAY2B,SAAA,EACzB9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,cAAa2B,SAAC,QAC7B9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,eAAc2B,SAAC,cAGlC9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,kBAAiB2B,UAC9BC,EAAAA,EAAAA,MAAA,UAAQ4D,QAASU,EAAkBlG,UAAU,qBAAoB2B,SAAA,EAC/DC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,cAAa2B,SAAA,EAC1B9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,WAAU2B,UACvB9B,EAAAA,EAAAA,KAAA,OAAKyL,MAAM,KAAKS,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,MAAM,6BAA4BvK,UAC5F9B,EAAAA,EAAAA,KAAA,QAAMsM,EAAE,2SAA2SF,KAAK,eAG5TpM,EAAAA,EAAAA,KAAA,QAAMG,UAAU,WAAU2B,SAAC,uBAE7B9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,uBAIrBH,EAAAA,EAAAA,KAAA,OAAKG,UAAU,eAAc2B,UAC3BC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,cAAa2B,SAAA,EAC1B9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,gBACf4B,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,oBAAmB2B,SAAA,EAChCC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,gBAAe2B,SAAA,EAC5B9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,QAAO2B,SAAC,YACxB9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,QAAO2B,SAAC,aAE1BC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,kBAAiB2B,SAAA,EAC9B9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,QAAO2B,SAAC,YACxB9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,QAAO2B,SAAC,2BAQpC9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,uBAAsB2B,UACnCC,EAAAA,EAAAA,MAACkJ,EAAAA,EAAS,CAACC,OAAK,EAAApJ,SAAA,EACdC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,aAAY2B,SAAA,EACzBC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,YAAW2B,SAAA,EACxB9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,YAAW2B,UACxB9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,OAAM2B,SAAC,oBAEzBC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,eAAc2B,SAAA,EAC3B9B,EAAAA,EAAAA,KAAA,MAAA8B,SAAI,kBACJ9B,EAAAA,EAAAA,KAAA,KAAA8B,SAAG,uJAIPC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,YAAW2B,SAAA,EACxB9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,YAAW2B,UACxB9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,OAAM2B,SAAC,oBAEzBC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,eAAc2B,SAAA,EAC3B9B,EAAAA,EAAAA,KAAA,MAAA8B,SAAI,qBACJ9B,EAAAA,EAAAA,KAAA,KAAA8B,SAAG,yJAIPC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,YAAW2B,SAAA,EACxB9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,YAAW2B,UACxB9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,OAAM2B,SAAC,oBAEzBC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,eAAc2B,SAAA,EAC3B9B,EAAAA,EAAAA,KAAA,MAAA8B,SAAI,oBACJ9B,EAAAA,EAAAA,KAAA,KAAA8B,SAAG,wKAKTC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,mBAAkB2B,SAAA,EAC/BC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,mBAAkB2B,SAAA,EAC/B9B,EAAAA,EAAAA,KAAA,MAAA8B,SAAI,sBACJ9B,EAAAA,EAAAA,KAAA,KAAA8B,SAAG,sJACHC,EAAAA,EAAAA,MAAA,MAAI5B,UAAU,kBAAiB2B,SAAA,EAC7BC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EAAI9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,kBAAiB2B,SAAC,mBAAqB,6EAC3DC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EAAI9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,kBAAiB2B,SAAC,oBAAsB,mEAC5DC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EAAI9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,kBAAiB2B,SAAC,qBAAuB,gFAGjE9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,kBAAiB2B,UAC9B9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,mBAAkB2B,UAC/BC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,cAAa2B,SAAA,EAC1BC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,gBAAe2B,SAAA,EAC5B9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,WAAU2B,SAAC,QAC3B9B,EAAAA,EAAAA,KAAA,QAAMG,UAAU,QAAO2B,SAAEmB,EAAWsC,EAAAA,GAAmBtC,EAAU,GAAK,WAExEjD,EAAAA,EAAAA,KAAA,OAAKG,UAAU,iBAAgB2B,SAAC,0BAQ5C9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,cAAa2B,UAC1B9B,EAAAA,EAAAA,KAACiL,EAAAA,EAAS,CAACC,OAAK,EAAApJ,UACdC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,cAAa2B,SAAA,EAC1B9B,EAAAA,EAAAA,KAAA,MAAA8B,SAAI,qBACJ9B,EAAAA,EAAAA,KAAA,KAAA8B,SAAG,iIACHC,EAAAA,EAAAA,MAAA,UAAQ4D,QAASU,EAAkBlG,UAAU,qBAAoB2B,SAAA,EAC/DC,EAAAA,EAAAA,MAAA,OAAK5B,UAAU,cAAa2B,SAAA,EAC1B9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,WAAU2B,UACvB9B,EAAAA,EAAAA,KAAA,OAAKyL,MAAM,KAAKS,OAAO,KAAKC,QAAQ,YAAYC,KAAK,OAAOC,MAAM,6BAA4BvK,UAC5F9B,EAAAA,EAAAA,KAAA,QAAMsM,EAAE,2SAA2SF,KAAK,eAG5TpM,EAAAA,EAAAA,KAAA,QAAMG,UAAU,WAAU2B,SAAC,uBAE7B9B,EAAAA,EAAAA,KAAA,OAAKG,UAAU,4BASnC,C","sources":["components/Combobox.jsx","config/betting.js","components/BettingTimer.jsx","pages/Betting.jsx"],"sourcesContent":["import React from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nconst customStyles = {\r\n  container: (provided) => ({\r\n    ...provided,\r\n    boxShadow: \"0px 0px 3px rgba(255, 255, 255)\",\r\n    fontFamily: \"mont\",\r\n    borderRadius: \"25px\",\r\n  }),\r\n  control: (provided) => ({\r\n    ...provided,\r\n    backgroundColor: \"#111111\",\r\n    boxShadow: \"0px 0px 3px rgba(255, 255, 255)\",\r\n    borderRadius: \"25px\",\r\n    padding: \"0.5rem\",\r\n    border: \"none\",\r\n  }),\r\n  option: (provided, state) => ({\r\n    ...provided,\r\n    borderRadius: \"10px\",\r\n    backgroundColor: state.isFocused ? \"#222222\" : \"#111111\",\r\n    fontFamily: \"mont\",\r\n  }),\r\n  singleValue: (provided, state) => ({\r\n    ...provided,\r\n    color: \"#bbbbbb\",\r\n  }),\r\n  noOptionsMessage: (provided, state) => ({\r\n    ...provided,\r\n    backgroundColor: \"#111111\",\r\n  }),\r\n  menu: (provided, state) => ({\r\n    ...provided,\r\n    backgroundColor: \"#111111\",\r\n    borderRadius: \"10px\",\r\n    boxShadow: \"0px 0px 1.8px rgba(214, 214, 214, 0.12)\",\r\n  }),\r\n  input: (provided, state) => ({\r\n    ...provided,\r\n    color: \"#bbbbbb\",\r\n  }),\r\n};\r\n\r\nconst Combobox = ({ options, value, onChange }) => (\r\n  <Select\r\n    options={options}\r\n    styles={customStyles}\r\n    value={value}\r\n    onChange={onChange}\r\n    className=\"combo\"\r\n  />\r\n);\r\n\r\nexport default Combobox;\r\n","export const EXPECT_OPTIONS = [\r\n  { value: 0, label: 'LONG' },\r\n  { value: 1, label: 'SHORT' },\r\n]\r\n\r\nexport const COIN_OPTIONS = [\r\n  { value: 0, label: 'S' },\r\n  { value: 1, label: 'GG' },\r\n]","import { useState, useEffect } from 'react'\nimport './BettingTimer.scss'\n\nexport default function BettingTimer({timeToEnd, period}) {\n  const [days, setDays] = useState(0)\n  const [hours, setHours] = useState(0)\n  const [minutes, setMinutes] = useState(0)\n  const [seconds, setSeconds] = useState(0)\n\n  useEffect(() => {\n    const getTimeUntil = () => {\n      const deadline = timeToEnd ? parseInt(timeToEnd) * 1000 : 0\n      const time = deadline - Date.now()\n      if (time < 0) {\n        setDays(0)\n        setHours(0)\n        setMinutes(0)\n      } else {\n        const seconds = Math.floor((time / 1000) % 60)\n        const minutes = Math.floor((time / 1000 / 60) % 60)\n        const hours = Math.floor((time / (1000 * 60 * 60)) % 24)\n        const days = Math.floor(time / (1000 * 60 * 60 * 24))\n        setDays(days)\n        setHours(hours)\n        setMinutes(minutes)\n        setSeconds(seconds)\n      }\n    }\n    const timer = setInterval(getTimeUntil, 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [timeToEnd])\n\n  return (\n    <div className=\"betting-timer\">\n      <div className=\"timer-container\">\n        <div className=\"time-block\">\n          <div className=\"time-digits\">\n            <span className=\"digit\">{minutes < 10 ? 0 : Math.floor(minutes / 10)}</span>\n            <span className=\"digit\">{minutes % 10}</span>\n          </div>\n          <div className=\"time-label\">minutes</div>\n        </div>\n        \n        <div className=\"time-separator\">:</div>\n        \n        <div className=\"time-block\">\n          <div className=\"time-digits\">\n            <span className=\"digit\">{seconds < 10 ? 0 : Math.floor(seconds / 10)}</span>\n            <span className=\"digit\">{seconds % 10}</span>\n          </div>\n          <div className=\"time-label\">seconds</div>\n        </div>\n      </div>\n      \n      {/* <div className=\"timer-progress\">\n        <div \n          className=\"progress-bar\" \n          style={{ \n            width: `${100 - (timeToEnd - Date.now() / 1000) / period * 100}%` \n          }}\n        ></div>\n      </div> */}\n    </div>\n  )\n}\n","import { useState, useEffect, useRef, useContext } from \"react\";\nimport toast from \"react-hot-toast\";\nimport Layout from 'layouts'\nimport './Betting.scss'\nimport { Container, Image, Table } from 'react-bootstrap'\nimport { useMediaQuery } from '@uidotdev/usehooks'\nimport { useConnectModal } from \"@rainbow-me/rainbowkit\";\nimport { useChainId, useAccount, useBalance, useReadContract, useWriteContract } from \"wagmi\";\nimport { ethers } from \"ethers\";\nimport { ApolloClient, gql, InMemoryCache } from \"@apollo/client\";\n\nimport Combobox from 'components/Combobox'\nimport { EXPECT_OPTIONS, COIN_OPTIONS } from 'config/betting'\nimport 'react-tabs/style/react-tabs.scss'\nimport RoundButton from 'components/RoundButton'\nimport BettingTimer from \"components/BettingTimer\";\n\nimport {\n  TEST_NET,\n  GOTCHA_ADDRESS_TEST,\n  GOTCHA_ADDRESS_MAIN,\n  BETTING_ADDRESS_TEST,\n  BETTING_ADDRESS_MAIN,\n  SUBGRAPH_URL\n} from \"../config\";\nimport BettingAbi from \"../config/abis/BETTING_ABI.json\";\nimport GotchaAbi from \"../config/abis/GOTCHA_ABI.json\";\nimport { RefreshContext } from '../context/RefreshContext'\n\nconst UINT256_MAX = \"115792089237316195423570985008687907853269984665640564039457584007913129639935\"\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nconst Leaderboard = ({ onClose }) => {\n  // Mock data for the leaderboard - in a real app, this would come from an API or contract\n  const leaderboardData = [\n    { address: \"0x1a2b...3c4d\", volume: \"1,245,678\", prize: \"$2000\" },\n    { address: \"0x5e6f...7g8h\", volume: \"987,654\", prize: \"$1500\" },\n    { address: \"0x9i0j...1k2l\", volume: \"876,543\", prize: \"$1000\" },\n    { address: \"0x3m4n...5o6p\", volume: \"765,432\", prize: \"$750\" },\n    { address: \"0x7q8r...9s0t\", volume: \"654,321\", prize: \"$500\" },\n    { address: \"0x1u2v...3w4x\", volume: \"543,210\", prize: \"$250\" },\n    { address: \"0x5y6z...7a8b\", volume: \"432,109\", prize: \"$150\" },\n    { address: \"0x9c0d...1e2f\", volume: \"321,098\", prize: \"$100\" },\n    { address: \"0x3g4h...5i6j\", volume: \"210,987\", prize: \"$100\" },\n    { address: \"0x7k8l...9m0n\", volume: \"109,876\", prize: \"$100\" },\n    { address: \"0xa1b2...c3d4\", volume: \"98,765\", prize: \"$20\" },\n    { address: \"0xe5f6...g7h8\", volume: \"87,654\", prize: \"$20\" },\n    { address: \"0xi9j0...k1l2\", volume: \"76,543\", prize: \"$20\" },\n    { address: \"0xm3n4...o5p6\", volume: \"65,432\", prize: \"$20\" },\n    { address: \"0xq7r8...s9t0\", volume: \"54,321\", prize: \"$20\" },\n    { address: \"0xu1v2...w3x4\", volume: \"43,210\", prize: \"$20\" },\n    { address: \"0xy5z6...a7b8\", volume: \"32,109\", prize: \"$20\" },\n    { address: \"0xc9d0...e1f2\", volume: \"21,098\", prize: \"$20\" },\n    { address: \"0xg3h4...i5j6\", volume: \"10,987\", prize: \"$20\" },\n    { address: \"0xk7l8...m9n0\", volume: \"9,876\", prize: \"$20\" }\n  ];\n\n  const bettingHistory = `\n    query MyQuery {\n      bettingAmountCumulatives(orderBy: totalAmount, orderDirection: desc, first: 100) {\n        id\n        totalAmount\n      }\n    }\n  `;\n  \n  const chainId = useChainId();\n\n  const { data: ethPrice, refetch: refetchEthPrice } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"getLatestETHPrice\",\n    args: [],\n    chainId: chainId,\n  });\n\n  const [playerRanking, setPlayerRanking] = useState([]);\n\n  useEffect(() => {\n    const fetchBettingHistory = async () => {\n      try {\n        const client = new ApolloClient({\n          uri: SUBGRAPH_URL,\n          cache: new InMemoryCache(),\n        });\n\n        const { data: bettingResult, error: error } = await client.query({\n          query: gql(bettingHistory),\n          variables: {},\n          fetchPolicy: \"cache-first\",\n        });\n\n        if (bettingResult && !error) {\n          const ranking = bettingResult.bettingAmountCumulatives;\n          console.log(\"ranking = \", ranking);\n          if (ranking.length > 0) {\n            const formattedRanking = ranking.map((item, index) => ({\n              address: item.id.slice(0, 6) + \"...\" + item.id.slice(-4),\n              volume: ((ethPrice ? parseFloat(ethers.formatUnits(ethPrice, 8)) : 0) * parseFloat(ethers.formatUnits(item.totalAmount, 18))).toFixed(0),\n              prize: index < 10 ? `${leaderboardData[index].prize}` : \"\",\n            }));\n            setPlayerRanking(formattedRanking);\n          }\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchBettingHistory();\n  }, []);\n\n  return (\n    <div className=\"leaderboard-modal\">\n      <div className=\"leaderboard-modal-content\">\n        <div className=\"leaderboard-header\">\n          <h3 className=\"leaderboard-title\">TOP TRADERS LEADERBOARD</h3>\n          <button className=\"close-button\" onClick={onClose}>×</button>\n        </div>\n\n        <div className=\"prize-banner\">\n          <div className=\"prize-icon\">💰</div>\n          <div className=\"prize-info\">\n            <h4>WIN BIG REWARDS!</h4>\n            <p className=\"prize-text\">Total prize pool is <span className=\"highlight-prize\">$10000 worth $GG</span>! Top 10 traders earn prizes shown below & <span className=\"highlight-prize\">100 random participants</span> will receive <span className=\"highlight-prize\">$40</span> worth of $GG each!</p>\n          </div>\n        </div>\n\n        <Table className=\"leaderboard-table\" responsive>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Wallet Address</th>\n              <th>Volume</th>\n              <th className=\"prize-column\">Prize</th>\n            </tr>\n          </thead>\n          <tbody>\n            {playerRanking.map((item, index) => (\n              <tr key={index} className={index < 3 ? \"prize-winner\" : \"\"}>\n                <td className=\"rank\">{index + 1}{index < 3 && <span className=\"trophy-icon\">{index === 0 ? \"\" : index === 1 ? \"\" : \"\"}</span>}</td>\n                <td className=\"address\">{item.address}</td>\n                <td className=\"volume\">${item.volume}</td>\n                <td className=\"prize\">{item.prize}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n\n        <div className=\"leaderboard-footer\">\n          <button className=\"close-leaderboard-btn\" onClick={onClose}>Return to Betting</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default function BettingPage() {\n  const isMobile = useMediaQuery(\"only screen and (max-width: 768px)\");\n  const { fastRefresh } = useRefresh();\n  const [showLeaderboard, setShowLeaderboard] = useState(false);\n\n  const { data: txResult, writeContractAsync } = useWriteContract();\n\n  const { openConnectModal } = useConnectModal();\n\n  const chainId = useChainId();\n  const { isConnected, address } = useAccount();\n  const { data: balance, refetch: refetchBalance } = useBalance({ address: address });\n\n\n  ///// Pool Balances //////////////\n  const { data: poolEthBalance, refetch: refetchPoolEthBalance } = useBalance({ address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN });\n\n  const { data: poolTokenBalance, refetch: refetchPoolTokenBalance } = useReadContract({\n    address: chainId === TEST_NET ? GOTCHA_ADDRESS_TEST : GOTCHA_ADDRESS_MAIN,\n    abi: GotchaAbi,\n    functionName: \"balanceOf\",\n    args: [chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN],\n    chainId: chainId\n  });\n\n  ///// Betting Contract ///////////////////////////////////\n  const { data: currentBetId, refetch: refetchCurrentBetId } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"currentBetId\",\n    args: [],\n    chainId: chainId,\n  });\n\n  const { data: ethPrice, refetch: refetchEthPrice } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"getLatestETHPrice\",\n    args: [],\n    chainId: chainId,\n  });\n\n  const { data: minEthAmount, refetch: refetchMinEthAmount } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"MIN_BET_ETH_AMOUNT\",\n    args: [],\n    chainId: chainId,\n  });\n\n  const { data: maxEthAmount, refetch: refetchMaxEthAmount } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"MAX_BET_ETH_AMOUNT\",\n    args: [],\n    chainId: chainId,\n  });\n\n  const { data: minAmount, refetch: refetchMinAmount } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"MIN_BET_AMOUNT\",\n    args: [],\n    chainId: chainId,\n  });\n\n  const { data: maxAmount, refetch: refetchMaxAmount } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"MAX_BET_AMOUNT\",\n    args: [],\n    chainId: chainId,\n  });\n\n  const { data: earnedEthAmount, refetch: refetchEarnedEthAmount } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"earnedEthAmount\",\n    args: [isConnected ? address : \"\"],\n    chainId: chainId,\n  });\n\n  const { data: lostEthAmount, refetch: refetchLostEthAmount } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"lostEthAmount\",\n    args: [isConnected ? address : \"\"],\n    chainId: chainId,\n  });\n\n  const { data: earnedAmount, refetch: refetchEarnedAmount } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"earnedTokenAmount\",\n    args: [isConnected ? address : \"\"],\n    chainId: chainId,\n  });\n\n  const { data: lostAmount, refetch: refetchLostAmount } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"lostTokenAmount\",\n    args: [isConnected ? address : \"\"],\n    chainId: chainId,\n  });\n\n  const { data: prevBetUserInfo, refetch: refetchPrevBetUserInfo } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"betUserInfo\",\n    args: [parseInt(currentBetId ? currentBetId : 0) - 1, isConnected ? address : \"\"],\n    chainId: chainId,\n  });\n\n  const { data: currentBetUserInfo, refetch: refetchCurrentBetUserInfo } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"betUserInfo\",\n    args: [parseInt(currentBetId ? currentBetId : 0), isConnected ? address : \"\"],\n    chainId: chainId,\n  });\n\n  const { data: prevBetInfo, refetch: refetchPrevBetInfo } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"betInfo\",\n    args: [parseInt(currentBetId ? currentBetId : 0) - 1],\n    chainId: chainId,\n  });\n\n  const { data: currentBetInfo, refetch: refetchCurrentBetInfo } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"betInfo\",\n    args: [parseInt(currentBetId ? currentBetId : 0)],\n    chainId: chainId,\n  });\n\n  const { data: prepareTime, refetch: refetchPrepareTime } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"PREPARE_TIME\",\n    args: [],\n    chainId: chainId,\n  });\n\n  const { data: bettingTime, refetch: refetchBettingTime } = useReadContract({\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n    abi: BettingAbi,\n    functionName: \"BETTING_TIME\",\n    args: [],\n    chainId: chainId,\n  });\n\n  console.log(\"eagle prepareTime = \", prepareTime)\n  console.log(\"eagle bettingTime = \", bettingTime)\n\n  ////// GotchA Token Contract //////////////////////////////////////////////\n  const { data: tokenBalance, refetch: refetchTokenBalance } = useReadContract({\n    address: chainId === TEST_NET ? GOTCHA_ADDRESS_TEST : GOTCHA_ADDRESS_MAIN,\n    abi: GotchaAbi,\n    functionName: \"balanceOf\",\n    args: [isConnected ? address : \"\"],\n    chainId: chainId\n  });\n\n  const { data: approvedAmount, refetch: refetchApprovedAmount } = useReadContract({\n    address: chainId === TEST_NET ? GOTCHA_ADDRESS_TEST : GOTCHA_ADDRESS_MAIN,\n    abi: GotchaAbi,\n    functionName: \"allowance\",\n    args: [address, chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN],\n    chainId: chainId\n  });\n\n  const regInputForExpect = useRef()\n  const regInputForCoin = useRef()\n  const [selectedCollection, setSelectedCollection] = useState(EXPECT_OPTIONS[0]);\n  const [selectedCoin, setSelectedCoin] = useState(COIN_OPTIONS[0]);\n  const [countdownTime, setCountdownTime] = useState(0);\n  const [countdownPeriod, setCountdownPeriod] = useState(0);\n  const [isPreparing, setIsPreparing] = useState(false);\n  const [isDeposited, setIsDeposited] = useState(false);\n\n  const [depositAmount, setDepositAmount] = useState(0);\n  const [isApproving, setIsApproving] = useState(false);\n  const [isDepositing, setIsDepositing] = useState(false);\n\n  useEffect(() => {\n    refetchCurrentBetId();\n    refetchEthPrice();\n    refetchCurrentBetInfo();\n    refetchCurrentBetUserInfo();\n    refetchEarnedAmount();\n    refetchLostAmount();\n\n    refetchApprovedAmount();\n\n    refetchBalance();\n    refetchTokenBalance();\n    refetchPoolEthBalance();\n    refetchPoolTokenBalance();\n  }, [fastRefresh])\n\n  useEffect(() => {\n    if (currentBetInfo === undefined || currentBetUserInfo === undefined) return;\n\n    if (currentBetInfo[4]) {\n      setIsPreparing(true);\n      setCountdownTime(parseInt(currentBetInfo[2]))\n      setCountdownPeriod(Number(prepareTime))\n    } else {\n      setIsPreparing(false);\n      setCountdownTime(parseInt(currentBetInfo[3]))\n      setCountdownPeriod(Number(bettingTime))\n    }\n\n    if (currentBetUserInfo[5])\n      setIsDeposited(true);\n    else\n      setIsDeposited(false);\n\n  }, [currentBetInfo, currentBetUserInfo])\n\n  const getTextBetting = () => {\n    if (currentBetUserInfo && currentBetUserInfo[5]) // Already Deposited\n      return 'Waiting Result ...';\n\n    if (currentBetInfo && currentBetInfo[5]) // Passed preparing time\n      return 'Waiting Result ...';\n\n    if (depositAmount === 0)\n      return 'Enter Amount';\n\n    if (isApproving)\n      return 'Approving ...';\n\n    if (selectedCoin.value === 0 && parseFloat(ethers.formatUnits(balance ? balance.value : \"0\", 'ether')) < depositAmount)\n      return 'Insufficient $S Balance';\n\n    if (selectedCoin.value === 1 && parseFloat(ethers.formatUnits(tokenBalance ? tokenBalance : \"0\", 'ether')) < depositAmount)\n      return 'Insufficient $GG Balance';\n\n    if (selectedCoin.value === 1 && parseFloat(ethers.formatUnits(approvedAmount ? approvedAmount : \"0\", 'ether')) < depositAmount)\n      return 'Approve $GG';\n\n    if (isDepositing)\n      return 'Depositing ...';\n\n\n    return \"Deposit\";\n  };\n\n  const handleChange = (e) => {\n    setDepositAmount(e.target.value);\n  }\n\n  const handleBetting = async () => {\n    if (currentBetUserInfo && currentBetUserInfo[5]) // Already Deposited\n      return;\n\n    if (currentBetInfo && currentBetInfo[5]) // Passed preparing time\n      return;\n\n    if (depositAmount === 0)\n      return;\n\n    if (selectedCoin.value === 0) {\n      if (depositAmount < parseInt(ethers.formatUnits(minEthAmount ? minEthAmount : \"0\", 18))) {\n        toast.error(`The minimum amount is ${parseInt(ethers.formatUnits(minEthAmount ? minEthAmount : \"0\", 18))}.`);\n        return;\n      }\n\n      if (depositAmount > parseInt(ethers.formatUnits(maxEthAmount ? maxEthAmount : \"0\", 18))) {\n        toast.error(`The maximum amount is ${parseInt(ethers.formatUnits(maxEthAmount ? maxEthAmount : \"0\", 18))}.`);\n        return;\n      }\n\n      if (parseFloat(ethers.formatUnits(poolEthBalance ? poolEthBalance.value : \"0\", 'ether')) < depositAmount) {\n        toast.error(`$S pool balance is not enough.`);\n        return;\n      }\n    } else {\n      if (depositAmount < parseInt(ethers.formatUnits(minAmount ? minAmount : \"0\", 18))) {\n        toast.error(`The minimum amount is ${parseInt(ethers.formatUnits(minAmount ? minAmount : \"0\", 18))}.`);\n        return;\n      }\n\n      if (depositAmount > parseInt(ethers.formatUnits(maxAmount ? maxAmount : \"0\", 18))) {\n        toast.error(`The maximum amount is ${parseInt(ethers.formatUnits(maxAmount ? maxAmount : \"0\", 18))}.`);\n        return;\n      }\n\n      if (parseFloat(ethers.formatUnits(poolTokenBalance ? poolTokenBalance : \"0\", 'ether')) < depositAmount) {\n        toast.error(`$GG pool balance is not enough.`);\n        return;\n      }\n    }\n\n    if (selectedCoin.value === 0 && parseFloat(ethers.formatUnits(balance ? balance.value : \"0\", 'ether')) < depositAmount)\n      return;\n\n    if (selectedCoin.value === 1 && parseFloat(ethers.formatUnits(tokenBalance ? tokenBalance : \"0\", 'ether')) < depositAmount)\n      return;\n\n    if (selectedCoin.value === 1 && parseFloat(ethers.formatUnits(approvedAmount ? approvedAmount : \"0\", 'ether')) < depositAmount) {\n      setIsApproving(true);\n\n      await writeContractAsync({\n        address: chainId === TEST_NET ? GOTCHA_ADDRESS_TEST : GOTCHA_ADDRESS_MAIN,\n        abi: GotchaAbi,\n        functionName: \"approve\",\n        args: [chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN, UINT256_MAX],\n      })\n        .then(() => {\n          setIsApproving(false);\n        })\n        .catch((err) => {\n          console.log(err)\n          setIsApproving(false);\n        });\n      return;\n    }\n\n    setIsDepositing(true);\n\n    console.log(\"handleBetting = \", ethers.parseUnits(depositAmount.toString(), 18), selectedCollection.value === 0 ? true : false)\n\n    await writeContractAsync({\n      address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\n      abi: BettingAbi,\n      functionName: \"bet\",\n      args: [selectedCoin.value === 0 ? true : false, ethers.parseUnits(depositAmount.toString(), 18), selectedCollection.value === 0 ? true : false],\n      value: selectedCoin.value === 0 ? ethers.parseUnits(depositAmount.toString(), 18) : 0,\n    })\n      .then(() => {\n        setIsDepositing(false);\n      })\n      .catch((err) => {\n        setIsDepositing(false);\n      });\n  }\n\n  return (\n    <Layout>\n      {\n        isConnected ?\n          <>\n            <Container fluid>\n              <div className='hero'>\n                <h1>betting <span>gotcha</span></h1>\n              </div>\n              <div className='betting-open-container'>\n                <div className=\"overview\">\n                  <div className=\"balance-dashboard\">\n                    <div className=\"balance-card main-balance\">\n                      <div className=\"card-inner\">\n                        <div className=\"balance-icon-wrapper\">\n                          <div className=\"balance-icon\">\n                            <span>$</span>\n                          </div>\n                        </div>\n                        <div className=\"balance-content\">\n                          <h3 className=\"balance-title\">Wallet Balance</h3>\n                          <div className=\"balance-amount\">\n                            <span className=\"amount-value\">{parseInt(ethers.formatUnits(balance ? balance.value : 0, \"ether\"))}</span>\n                          </div>\n                          <div className=\"balance-amount\">\n                            <span className=\"token-amount-value\">{parseInt(ethers.formatUnits(tokenBalance ? tokenBalance : 0, \"ether\"))}</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"stats-container\">\n                      <div className=\"balance-card win-card\">\n                        <div className=\"card-inner\">\n                          <div className=\"stat-icon-wrapper\">\n                            <div className=\"stat-icon win-icon\">\n                              <span>↑</span>\n                            </div>\n                          </div>\n                          <div className=\"stat-content\">\n                            <h3 className=\"stat-title\">Win Amount</h3>\n                            <div className=\"stat-amount\">\n                              <span className=\"amount-value\">{parseFloat(ethers.formatUnits(earnedEthAmount ? earnedEthAmount : 0, \"ether\"))} S</span>\n                            </div>\n                            <div className=\"stat-amount\">\n                              <span className=\"amount-value\">{parseFloat(ethers.formatUnits(earnedAmount ? earnedAmount : 0, \"ether\"))} GG</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"balance-card loss-card\">\n                        <div className=\"card-inner\">\n                          <div className=\"stat-icon-wrapper\">\n                            <div className=\"stat-icon loss-icon\">\n                              <span>↓</span>\n                            </div>\n                          </div>\n                          <div className=\"stat-content\">\n                            <h3 className=\"stat-title\">Loss Amount</h3>\n                            <div className=\"stat-amount\">\n                              <span className=\"amount-value\">{parseFloat(ethers.formatUnits(lostEthAmount ? lostEthAmount : 0, \"ether\"))} S</span>\n                            </div>\n                            <div className=\"stat-amount\">\n                              <span className=\"amount-value\">{parseFloat(ethers.formatUnits(lostAmount ? lostAmount : 0, \"ether\"))} GG</span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"pool-balance-container\">\n                  <div className=\"pool-balance-card\">\n                    <div className=\"card-inner\">\n                      <div className=\"balance-icon-wrapper\">\n                        <div className=\"balance-icon \">\n                          <span>🏦</span>\n                        </div>\n                      </div>\n                      <div className=\"balance-content\">\n                        <h3 className=\"balance-title\">Pool Balance</h3>\n                        <div className=\"balance-amount\">\n                          <span className=\"amount-value\">{parseInt(ethers.formatUnits(poolEthBalance ? poolEthBalance.value : 0, \"ether\"))}</span>\n                        </div>\n                        <div className=\"balance-amount\">\n                          <span className=\"token-amount-value\">{parseInt(ethers.formatUnits(poolTokenBalance ? poolTokenBalance : 0, \"ether\"))}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"betting-section-header\">\n                  <h2 className=\"betting-section-title\">BETTING ROOM</h2>\n                  <div className=\"leaderboard-container\">\n                    <div className=\"prize-teaser\">\n                      <span>WIN BIG PRIZES!</span>\n                      <span className=\"prize-amount\">$10000 WORTH $GG + 100 RANDOM WINNERS</span>\n                    </div>\n                    <button\n                      className=\"leaderboard-button\"\n                      onClick={() => setShowLeaderboard(true)}\n                    >\n                      <span className=\"button-icon\">🏆</span>\n                      <span className=\"button-text\">LEADERBOARD</span>\n                    </button>\n                  </div>\n                </div>\n                {showLeaderboard && <Leaderboard onClose={() => setShowLeaderboard(false)} />}\n                <div className=\"betting-cards-container\">\n                  <div className=\"betting-room-card\">\n                    <div className=\"card-header\">\n                      <span className=\"card-title\">BET #{parseInt(currentBetId) - 1}</span>\n                      <span className=\"card-status\">{prevBetUserInfo && prevBetUserInfo[5] ? \"COMPLETED\" : \"NOT PARTICIPATED\"}</span>\n                    </div>\n                    <table className=\"betting-data-table\">\n                      <tbody>\n                        <tr>\n                          <td className=\"label\">Entry Price:</td>\n                          <td className=\"value highlight-value\">$ {prevBetUserInfo ? (prevBetUserInfo[5] ? ethers.formatUnits(prevBetUserInfo[3], 8) : \"--\") : \"--\"}</td>\n                        </tr>\n                        <tr>\n                          <td className=\"label\">End Price:</td>\n                          <td className=\"value highlight-value\">$ {prevBetInfo ? ethers.formatUnits(prevBetInfo[1], 8) : \"--\"}</td>\n                        </tr>\n                        <tr>\n                          <td className=\"label\">Amount:</td>\n                          <td className=\"value highlight-value\">{prevBetUserInfo ? (prevBetUserInfo[5] ? parseFloat(ethers.formatUnits(prevBetUserInfo[2], \"ether\")) : \"--\") : \"--\"}</td>\n                        </tr>\n                        <tr>\n                          <td className=\"label\">Expectation:</td>\n                          <td className=\"value highlight-value\">{prevBetUserInfo ? (prevBetUserInfo[5] ? (prevBetUserInfo[6] ? \"LONG\" : \"SHORT\") : \"--\") : \"--\"}</td>\n                        </tr>\n                        <tr>\n                          <td className=\"label\">Deposit Coin:</td>\n                          <td className=\"value highlight-value\">{prevBetUserInfo ? (prevBetUserInfo[5] ? (prevBetUserInfo[1] ? \"S\" : \"GG\") : \"--\") : \"--\"}</td>\n                        </tr>\n                        <tr>\n                          <td className=\"label\">Result:</td>\n                          <td className=\"value\">\n                            {(prevBetUserInfo && prevBetUserInfo[5] && parseInt(prevBetUserInfo[7]) === 1) && <span className=\"result win\">WIN</span>}\n                            {(prevBetUserInfo && prevBetUserInfo[5] && parseInt(prevBetUserInfo[7]) === 2) && <span className=\"result lose\">LOSE</span>}\n                            {(prevBetUserInfo && prevBetUserInfo[5] && parseInt(prevBetUserInfo[7]) === 3) && <span className=\"result draw\">DRAW</span>}\n                            {(prevBetUserInfo && !prevBetUserInfo[5]) && \"--\"}\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </div>\n                  <div className=\"betting-entry-card\">\n                    <div className=\"card-header\">\n                      <span className=\"card-title\">BET #{parseInt(currentBetId)}</span>\n                      <span className=\"card-badge\">{isDeposited ? \"ACTIVE\" : \"OPEN\"}</span>\n                    </div>\n                    <div className=\"price-display\">\n                      <span className=\"price-label\">SONIC Price:</span>\n                      <span className=\"price-value\">$ {ethPrice ? ethers.formatUnits(ethPrice, 8) : \"--\"}</span>\n                    </div>\n                    <div className=\"betting-status\">\n                      {\n                        isPreparing ?\n                          <div className=\"status-message deposit\">It's time to deposit. You can deposit for</div>\n                          :\n                          <div className=\"status-message waiting\">Waiting for result.</div>\n                      }\n                      <BettingTimer timeToEnd={countdownTime} period={countdownPeriod} />\n                    </div>\n                    <table className=\"betting-data-table\">\n                      <tbody>\n                        <tr>\n                          <td className=\"label\">Entry Price:</td>\n                          <td className=\"value highlight-value\">$ {currentBetUserInfo ? (currentBetUserInfo[5] ? ethers.formatUnits(currentBetUserInfo[3], 8) : \"--\") : \"--\"}</td>\n                        </tr>\n                        <tr>\n                          <td className=\"label\">Expectation:</td>\n                          <td className=\"value\">\n                            {(isPreparing && !isDeposited) && <Combobox ref={regInputForExpect} options={EXPECT_OPTIONS} value={selectedCollection} onChange={(selectedOption) => setSelectedCollection(selectedOption)} />}\n                            {(!isPreparing && !isDeposited) && \"--\"}\n                            {isDeposited && (currentBetUserInfo ? (currentBetUserInfo[6] ? <span className=\"expectation long\">LONG</span> : <span className=\"expectation short\">SHORT</span>) : \"--\")}\n                          </td>\n                        </tr>\n                        <tr>\n                          <td className=\"label\">Deposit Coin:</td>\n                          <td className=\"value\">\n                            {(isPreparing && !isDeposited) && <Combobox ref={regInputForCoin} options={COIN_OPTIONS} value={selectedCoin} onChange={(selectedOption) => setSelectedCoin(selectedOption)} />}\n                            {(!isPreparing && !isDeposited) && \"--\"}\n                            {isDeposited && (currentBetUserInfo ? (currentBetUserInfo[1] ? <span className=\"expectation long\">$S</span> : <span className=\"expectation short\">$GG</span>) : \"--\")}\n                          </td>\n                        </tr>\n                        <tr>\n                          <td className=\"label\">Amount:</td>\n                          <td className=\"value\">\n                            {(isPreparing && !isDeposited) && (\n                              <div className=\"amount-input-container\">\n                                {selectedCoin.value === 0 ? (\n                                  <>\n                                    <div className=\"input-wrapper\">\n                                      <div className=\"currency-icon\">$S</div>\n                                      <input\n                                        type=\"number\"\n                                        placeholder={`Min: ${parseInt(ethers.formatUnits(minEthAmount ? minEthAmount : \"0\", 18))}`}\n                                        className=\"deposit-input\"\n                                        value={depositAmount}\n                                        onChange={handleChange}\n                                      />\n                                    </div>\n                                    <div className=\"amount-range\">\n                                      <div className=\"range-label\">Min: <span>{parseInt(ethers.formatUnits(minEthAmount ? minEthAmount : \"0\", 18))}</span></div>\n                                      <div className=\"range-slider\">\n                                        <div className=\"slider-track\"></div>\n                                        <div className=\"slider-progress\" style={{ width: `${Math.min(100, (depositAmount / parseInt(ethers.formatUnits(maxEthAmount ? maxEthAmount : \"1\", 18))) * 100)}%` }}></div>\n                                      </div>\n                                      <div className=\"range-label\">Max: <span>{parseInt(ethers.formatUnits(maxEthAmount ? maxEthAmount : \"0\", 18))}</span></div>\n                                    </div>\n                                  </>\n                                ) : (\n                                  <>\n                                    <div className=\"input-wrapper\">\n                                      <div className=\"currency-icon\">$GG</div>\n                                      <input\n                                        type=\"number\"\n                                        placeholder={`Min: ${parseInt(ethers.formatUnits(minAmount ? minAmount : \"0\", 18))}`}\n                                        className=\"deposit-input\"\n                                        value={depositAmount}\n                                        onChange={handleChange}\n                                      />\n                                    </div>\n                                    <div className=\"amount-range\">\n                                      <div className=\"range-label\">Min: <span>{parseInt(ethers.formatUnits(minAmount ? minAmount : \"0\", 18))}</span></div>\n                                      <div className=\"range-slider\">\n                                        <div className=\"slider-track\"></div>\n                                        <div className=\"slider-progress\" style={{ width: `${Math.min(100, (depositAmount / parseInt(ethers.formatUnits(maxAmount ? maxAmount : \"1\", 18))) * 100)}%` }}></div>\n                                      </div>\n                                      <div className=\"range-label\">Max: <span>{parseInt(ethers.formatUnits(maxAmount ? maxAmount : \"0\", 18))}</span></div>\n                                    </div>\n                                  </>\n                                )}\n                              </div>\n                            )}\n                            {(!isPreparing && !isDeposited) && \"--\"}\n                            {isDeposited && <span className=\"deposit-amount\">{parseFloat(currentBetUserInfo ? ethers.formatUnits(currentBetUserInfo[2], \"ether\") : \"--\")}</span>}\n                          </td>\n                        </tr>\n                      </tbody>\n                    </table>\n                    <RoundButton\n                      key=\"claim\"\n                      className=\"bet-btn pulse-animation\"\n                      children={getTextBetting()}\n                      variant=\"transparent\"\n                      onClick={handleBetting}\n                    />\n                  </div>\n                </div>\n              </div>\n            </Container>\n          </>\n          :\n          <>\n            <Container fluid>\n              <div className='hero betting-hero'>\n                <div className=\"hero-content\">\n                  <h1 className=\"hero-title\">Price Prediction <span>Game</span></h1>\n                  <div className=\"hero-subtitle\">\n                    <div className=\"token-info\">\n                      <div className=\"token-badge\">$S</div>\n                      <div className=\"token-future\">$GG</div>\n                    </div>\n                  </div>\n                  <div className=\"connect-section\">\n                    <button onClick={openConnectModal} className=\"custom-connect-btn\">\n                      <div className=\"btn-content\">\n                        <div className=\"btn-icon\">\n                          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path d=\"M21 18V19C21 20.1 20.1 21 19 21H5C3.89 21 3 20.1 3 19V5C3 3.9 3.89 3 5 3H19C20.1 3 21 3.9 21 5V6H12C10.89 6 10 6.9 10 8V16C10 17.1 10.89 18 12 18H21ZM12 16H22V8H12V16ZM16 13.5C15.17 13.5 14.5 12.83 14.5 12C14.5 11.17 15.17 10.5 16 10.5C16.83 10.5 17.5 11.17 17.5 12C17.5 12.83 16.83 13.5 16 13.5Z\" fill=\"white\" />\n                          </svg>\n                        </div>\n                        <span className=\"btn-text\">Connect Wallet</span>\n                      </div>\n                      <div className=\"btn-shine\"></div>\n                    </button>\n                  </div>\n                </div>\n                <div className=\"hero-visuals\">\n                  <div className=\"price-chart\">\n                    <div className=\"chart-line\"></div>\n                    <div className=\"prediction-arrows\">\n                      <div className=\"prediction up\">\n                        <span className=\"arrow\">↑</span>\n                        <span className=\"label\">LONG</span>\n                      </div>\n                      <div className=\"prediction down\">\n                        <span className=\"arrow\">↓</span>\n                        <span className=\"label\">SHORT</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Container>\n\n            <div className=\"betting-info-section\">\n              <Container fluid>\n                <div className=\"info-cards\">\n                  <div className=\"info-card\">\n                    <div className=\"card-icon\">\n                      <span className=\"icon\">🎮</span>\n                    </div>\n                    <div className=\"card-content\">\n                      <h3>How It Works</h3>\n                      <p>Predict whether the $S price will go up (LONG) or down (SHORT) within the betting timeframe. Winners share the prize pool from losing bets.</p>\n                    </div>\n                  </div>\n\n                  <div className=\"info-card\">\n                    <div className=\"card-icon\">\n                      <span className=\"icon\">💰</span>\n                    </div>\n                    <div className=\"card-content\">\n                      <h3>Token Evolution</h3>\n                      <p>Currently played with $S tokens. After TGE (Token Generation Event), the game will transition to using $GG tokens for all betting activities.</p>\n                    </div>\n                  </div>\n\n                  <div className=\"info-card\">\n                    <div className=\"card-icon\">\n                      <span className=\"icon\">⏱️</span>\n                    </div>\n                    <div className=\"card-content\">\n                      <h3>Betting Rounds</h3>\n                      <p>Each round lasts for a fixed period. Place your bets before the timer ends. Results are determined by comparing the price at start and end of each round.</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"strategy-section\">\n                  <div className=\"strategy-content\">\n                    <h2>Betting Strategy</h2>\n                    <p>Analyze market trends and token performance to make informed predictions. The more accurate your predictions, the higher your potential rewards.</p>\n                    <ul className=\"strategy-points\">\n                      <li><span className=\"point-highlight\">Long Position:</span> Bet on price increase if you believe market conditions are favorable.</li>\n                      <li><span className=\"point-highlight\">Short Position:</span> Bet on price decrease if you anticipate market corrections.</li>\n                      <li><span className=\"point-highlight\">Risk Management:</span> Only bet what you can afford to lose and diversify your positions.</li>\n                    </ul>\n                  </div>\n                  <div className=\"strategy-visual\">\n                    <div className=\"visual-container\">\n                      <div className=\"token-price\">\n                        <div className=\"price-display\">\n                          <span className=\"currency\">$S</span>\n                          <span className=\"value\">{ethPrice ? ethers.formatUnits(ethPrice, 8) : \"--\"}</span>\n                        </div>\n                        <div className=\"price-trend up\">+2.3%</div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </Container>\n            </div>\n\n            <div className=\"cta-section\">\n              <Container fluid>\n                <div className=\"cta-content\">\n                  <h2>Ready to Start?</h2>\n                  <p>Connect your wallet now and join the exciting world of price prediction. Test your market analysis skills and earn rewards!</p>\n                  <button onClick={openConnectModal} className=\"custom-connect-btn\">\n                    <div className=\"btn-content\">\n                      <div className=\"btn-icon\">\n                        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                          <path d=\"M21 18V19C21 20.1 20.1 21 19 21H5C3.89 21 3 20.1 3 19V5C3 3.9 3.89 3 5 3H19C20.1 3 21 3.9 21 5V6H12C10.89 6 10 6.9 10 8V16C10 17.1 10.89 18 12 18H21ZM12 16H22V8H12V16ZM16 13.5C15.17 13.5 14.5 12.83 14.5 12C14.5 11.17 15.17 10.5 16 10.5C16.83 10.5 17.5 11.17 17.5 12C17.5 12.83 16.83 13.5 16 13.5Z\" fill=\"white\" />\n                        </svg>\n                      </div>\n                      <span className=\"btn-text\">Connect Wallet</span>\n                    </div>\n                    <div className=\"btn-shine\"></div>\n                  </button>\n                </div>\n              </Container>\n            </div>\n          </>\n      }\n    </Layout>\n  )\n}\n"],"names":["customStyles","container","provided","boxShadow","fontFamily","borderRadius","control","backgroundColor","padding","border","option","state","isFocused","singleValue","color","noOptionsMessage","menu","input","_ref","options","value","onChange","_jsx","Select","styles","className","EXPECT_OPTIONS","label","COIN_OPTIONS","BettingTimer","timeToEnd","period","days","setDays","useState","hours","setHours","minutes","setMinutes","seconds","setSeconds","useEffect","timer","setInterval","getTimeUntil","time","parseInt","Date","now","Math","floor","clearInterval","children","_jsxs","UINT256_MAX","useRefresh","fast","slow","useContext","RefreshContext","fastRefresh","slowRefresh","Leaderboard","onClose","leaderboardData","address","volume","prize","chainId","useChainId","data","ethPrice","refetch","refetchEthPrice","useReadContract","TEST_NET","BETTING_ADDRESS_TEST","BETTING_ADDRESS_MAIN","abi","BettingAbi","functionName","args","playerRanking","setPlayerRanking","async","client","ApolloClient","uri","SUBGRAPH_URL","cache","InMemoryCache","bettingResult","error","query","gql","variables","fetchPolicy","ranking","bettingAmountCumulatives","console","log","length","formattedRanking","map","item","index","id","slice","parseFloat","ethers","totalAmount","toFixed","fetchBettingHistory","onClick","Table","responsive","BettingPage","useMediaQuery","showLeaderboard","setShowLeaderboard","txResult","writeContractAsync","useWriteContract","openConnectModal","useConnectModal","isConnected","useAccount","balance","refetchBalance","useBalance","poolEthBalance","refetchPoolEthBalance","poolTokenBalance","refetchPoolTokenBalance","GOTCHA_ADDRESS_TEST","GOTCHA_ADDRESS_MAIN","GotchaAbi","currentBetId","refetchCurrentBetId","minEthAmount","refetchMinEthAmount","maxEthAmount","refetchMaxEthAmount","minAmount","refetchMinAmount","maxAmount","refetchMaxAmount","earnedEthAmount","refetchEarnedEthAmount","lostEthAmount","refetchLostEthAmount","earnedAmount","refetchEarnedAmount","lostAmount","refetchLostAmount","prevBetUserInfo","refetchPrevBetUserInfo","currentBetUserInfo","refetchCurrentBetUserInfo","prevBetInfo","refetchPrevBetInfo","currentBetInfo","refetchCurrentBetInfo","prepareTime","refetchPrepareTime","bettingTime","refetchBettingTime","tokenBalance","refetchTokenBalance","approvedAmount","refetchApprovedAmount","regInputForExpect","useRef","regInputForCoin","selectedCollection","setSelectedCollection","selectedCoin","setSelectedCoin","countdownTime","setCountdownTime","countdownPeriod","setCountdownPeriod","isPreparing","setIsPreparing","isDeposited","setIsDeposited","depositAmount","setDepositAmount","isApproving","setIsApproving","isDepositing","setIsDepositing","undefined","Number","handleChange","e","target","Layout","_Fragment","Container","fluid","Combobox","ref","selectedOption","type","placeholder","style","width","min","RoundButton","variant","toast","then","catch","err","toString","height","viewBox","fill","xmlns","d"],"sourceRoot":""}