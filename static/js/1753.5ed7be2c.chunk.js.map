{"version":3,"file":"static/js/1753.5ed7be2c.chunk.js","mappings":"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","sources":["components/Combobox.jsx","config/betting.js","components/BettingTimer.jsx","pages/Betting.jsx"],"sourcesContent":["import React from \"react\";\r\nimport Select from \"react-select\";\r\n\r\nconst customStyles = {\r\n  container: (provided) => ({\r\n    ...provided,\r\n    boxShadow: \"0px 0px 3px rgba(255, 255, 255)\",\r\n    fontFamily: \"mont\",\r\n    borderRadius: \"25px\",\r\n  }),\r\n  control: (provided) => ({\r\n    ...provided,\r\n    backgroundColor: \"#111111\",\r\n    boxShadow: \"0px 0px 3px rgba(255, 255, 255)\",\r\n    borderRadius: \"25px\",\r\n    padding: \"0.5rem\",\r\n    border: \"none\",\r\n  }),\r\n  option: (provided, state) => ({\r\n    ...provided,\r\n    borderRadius: \"10px\",\r\n    backgroundColor: state.isFocused ? \"#222222\" : \"#111111\",\r\n    fontFamily: \"mont\",\r\n  }),\r\n  singleValue: (provided, state) => ({\r\n    ...provided,\r\n    color: \"#bbbbbb\",\r\n  }),\r\n  noOptionsMessage: (provided, state) => ({\r\n    ...provided,\r\n    backgroundColor: \"#111111\",\r\n  }),\r\n  menu: (provided, state) => ({\r\n    ...provided,\r\n    backgroundColor: \"#111111\",\r\n    borderRadius: \"10px\",\r\n    boxShadow: \"0px 0px 1.8px rgba(214, 214, 214, 0.12)\",\r\n  }),\r\n  input: (provided, state) => ({\r\n    ...provided,\r\n    color: \"#bbbbbb\",\r\n  }),\r\n};\r\n\r\nconst Combobox = ({ options, value, onChange }) => (\r\n  <Select\r\n    options={options}\r\n    styles={customStyles}\r\n    value={value}\r\n    onChange={onChange}\r\n    className=\"combo\"\r\n  />\r\n);\r\n\r\nexport default Combobox;\r\n","export const EXPECT_OPTIONS = [\r\n  { value: 0, label: 'LONG' },\r\n  { value: 1, label: 'SHORT' },\r\n]","import { useState, useEffect } from 'react'\r\nimport './BettingTimer.scss'\r\n\r\nexport default function BettingTimer({timeToEnd}) {\r\n  const [days, setDays] = useState(0)\r\n  const [hours, setHours] = useState(0)\r\n  const [minutes, setMinutes] = useState(0)\r\n  const [seconds, setSeconds] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const getTimeUntil = () => {\r\n      const deadline = timeToEnd ? parseInt(timeToEnd) * 1000 : 0\r\n      const time = deadline - Date.now()\r\n      if (time < 0) {\r\n        setDays(0)\r\n        setHours(0)\r\n        setMinutes(0)\r\n      } else {\r\n        const seconds = Math.floor((time / 1000) % 60)\r\n        const minutes = Math.floor((time / 1000 / 60) % 60)\r\n        const hours = Math.floor((time / (1000 * 60 * 60)) % 24)\r\n        const days = Math.floor(time / (1000 * 60 * 60 * 24))\r\n        setDays(days)\r\n        setHours(hours)\r\n        setMinutes(minutes)\r\n        setSeconds(seconds)\r\n      }\r\n    }\r\n    const timer = setInterval(getTimeUntil, 1000)\r\n\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n  }, [timeToEnd])\r\n\r\n  return (\r\n    <div className=\"timer\">\r\n      {/* <div>\r\n        <span className=\"number-container end\">{hours < 10 ? 0 : Math.floor(hours / 10)}</span>\r\n        <span className=\"number-container mid\">{hours % 10}</span>\r\n        <div className='unit text-center'>hours</div>\r\n      </div> */}\r\n      <div>\r\n        <span className=\"number-container center\">{minutes < 10 ? 0 : Math.floor(minutes / 10)}</span>\r\n        <span className=\"number-container center\">{minutes % 10}</span>\r\n        <div className='unit text-center'>minutes</div>\r\n      </div>\r\n      <div>\r\n        <span className=\"number-container mid\">{seconds < 10 ? 0 : Math.floor(seconds / 10)}</span>\r\n        <span className=\"number-container end\">{seconds % 10}</span>\r\n        <div className='unit text-center'>seconds</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { useState, useEffect, useRef, useContext } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport Layout from 'layouts'\r\nimport './Betting.scss'\r\nimport { Container, Image } from 'react-bootstrap'\r\nimport { useMediaQuery } from '@uidotdev/usehooks'\r\nimport { useConnectModal } from \"@rainbow-me/rainbowkit\";\r\nimport { useChainId, useAccount, useReadContract, useWriteContract } from \"wagmi\";\r\nimport { ethers } from \"ethers\";\r\nimport Coin1Img from 'assets/images/lone-coin.png'\r\nimport Coin2Img from 'assets/images/waifunomicscoin.png'\r\nimport Coin4Img from 'assets/images/coin4.png'\r\nimport Coin5Img from 'assets/images/coin5.png'\r\n\r\nimport BigTeacherImg from 'assets/images/bigteacher.png'\r\nimport BlackArrowImg from 'assets/images/blackarrow.png'\r\nimport CoinStackImg from 'assets/images/coinstack.png'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\n\r\nimport Coin3Img from \"assets/images/coin3.png\"\r\nimport HeartImg from \"assets/images/heart.png\"\r\n\r\nimport Combobox from 'components/Combobox'\r\nimport { EXPECT_OPTIONS } from 'config/betting'\r\nimport 'react-tabs/style/react-tabs.scss'\r\nimport RoundButton from 'components/RoundButton'\r\nimport BettingTimer from \"components/BettingTimer\";\r\n\r\nimport {\r\n  TEST_NET,\r\n  GOTCHA_ADDRESS_TEST,\r\n  GOTCHA_ADDRESS_MAIN,\r\n  BETTING_ADDRESS_TEST,\r\n  BETTING_ADDRESS_MAIN,\r\n} from \"../config\";\r\nimport BettingAbi from \"../config/abis/BETTING_ABI.json\";\r\nimport GotchaAbi from \"../config/abis/GOTCHA_ABI.json\";\r\nimport { RefreshContext } from '../context/RefreshContext'\r\n\r\nconst UINT256_MAX = \"115792089237316195423570985008687907853269984665640564039457584007913129639935\"\r\n\r\nconst useRefresh = () => {\r\n  const { fast, slow } = useContext(RefreshContext)\r\n  return { fastRefresh: fast, fastRefresh: slow }\r\n}\r\n\r\nconst Betting = () => {\r\n  const tokenInfo = [\r\n    { h: 'HOW TO EARN $GOTCHA', d: 'DEPOSIT $GOTCHA token to BETTING' },\r\n    { h: 'TOKEN BETTING POOL (%)', d: '$1BN (10%)' },\r\n    { h: 'DAILY DISTRIBUTION TO THE NFT POOL', d: '2,739,726 $ GOTCHA DAILY' },\r\n    { h: 'STAKING OPENING', d: 'ONE WEEK FROM THE PRE-SALE DATE' }\r\n  ];\r\n\r\n  return (\r\n    <table className=\"betting-table\">\r\n      <tbody>\r\n        {\r\n          tokenInfo.map(info => (\r\n            <tr>\r\n              <th>{info.h}</th>\r\n              <td>{info.d}</td>\r\n            </tr>\r\n          ))\r\n        }\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default function BettingPage() {\r\n  const isMobile = useMediaQuery(\"only screen and (max-width: 768px)\");\r\n\r\n  const { data: txResult, writeContractAsync } = useWriteContract();\r\n\r\n  const { openConnectModal } = useConnectModal();\r\n\r\n  const chainId = useChainId();\r\n  const { isConnected, address } = useAccount();\r\n\r\n  const { fastRefresh } = useRefresh();\r\n\r\n  ///// Betting Contract ///////////////////////////////////\r\n  const { data: currentBetId, refetch: refetchCurrentBetId } = useReadContract({\r\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\r\n    abi: BettingAbi,\r\n    functionName: \"currentBetId\",\r\n    args: [],\r\n    chainId: chainId,\r\n  });\r\n\r\n  const { data: ethPrice, refetch: refetchEthPrice } = useReadContract({\r\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\r\n    abi: BettingAbi,\r\n    functionName: \"getLatestETHPrice\",\r\n    args: [],\r\n    chainId: chainId,\r\n  });\r\n\r\n  const { data: minAmount, refetch: refetchMinAmount } = useReadContract({\r\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\r\n    abi: BettingAbi,\r\n    functionName: \"MIN_BET_AMOUNT\",\r\n    args: [],\r\n    chainId: chainId,\r\n  });\r\n\r\n  const { data: maxAmount, refetch: refetchMaxAmount } = useReadContract({\r\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\r\n    abi: BettingAbi,\r\n    functionName: \"MAX_BET_AMOUNT\",\r\n    args: [],\r\n    chainId: chainId,\r\n  });\r\n\r\n  const { data: earnedAmount, refetch: refetchEarnedAmount } = useReadContract({\r\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\r\n    abi: BettingAbi,\r\n    functionName: \"earnedTokenAmount\",\r\n    args: [isConnected ? address : \"\"],\r\n    chainId: chainId,\r\n  });\r\n\r\n  const { data: lostAmount, refetch: refetchLostAmount } = useReadContract({\r\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\r\n    abi: BettingAbi,\r\n    functionName: \"lostTokenAmount\",\r\n    args: [isConnected ? address : \"\"],\r\n    chainId: chainId,\r\n  });\r\n\r\n  const { data: prevBetUserInfo, refetch: refetchPrevBetUserInfo } = useReadContract({\r\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\r\n    abi: BettingAbi,\r\n    functionName: \"betUserInfo\",\r\n    args: [parseInt(currentBetId ? currentBetId : 0) - 1, isConnected ? address : \"\"],\r\n    chainId: chainId,\r\n  });\r\n\r\n  const { data: currentBetUserInfo, refetch: refetchCurrentBetUserInfo } = useReadContract({\r\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\r\n    abi: BettingAbi,\r\n    functionName: \"betUserInfo\",\r\n    args: [parseInt(currentBetId ? currentBetId : 0), isConnected ? address : \"\"],\r\n    chainId: chainId,\r\n  });\r\n\r\n  const { data: prevBetInfo, refetch: refetchPrevBetInfo } = useReadContract({\r\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\r\n    abi: BettingAbi,\r\n    functionName: \"betInfo\",\r\n    args: [parseInt(currentBetId ? currentBetId : 0) - 1],\r\n    chainId: chainId,\r\n  });\r\n\r\n  const { data: currentBetInfo, refetch: refetchCurrentBetInfo } = useReadContract({\r\n    address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\r\n    abi: BettingAbi,\r\n    functionName: \"betInfo\",\r\n    args: [parseInt(currentBetId ? currentBetId : 0)],\r\n    chainId: chainId,\r\n  });\r\n\r\n  console.log(\"currentBetInfo = \", currentBetUserInfo)\r\n\r\n  ////// GotchA Token Contract //////////////////////////////////////////////\r\n  const { data: tokenBalance, refetch: refetchTokenBalance } = useReadContract({\r\n    address: chainId === TEST_NET ? GOTCHA_ADDRESS_TEST : GOTCHA_ADDRESS_MAIN,\r\n    abi: GotchaAbi,\r\n    functionName: \"balanceOf\",\r\n    args: [isConnected ? address : \"\"],\r\n    chainId: chainId\r\n  });\r\n\r\n  const { data: approvedAmount, refetch: refetchApprovedAmount } = useReadContract({\r\n    address: chainId === TEST_NET ? GOTCHA_ADDRESS_TEST : GOTCHA_ADDRESS_MAIN,\r\n    abi: GotchaAbi,\r\n    functionName: \"allowance\",\r\n    args: [address, chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN],\r\n    chainId: chainId\r\n  });\r\n\r\n  const regInputForCollectionId = useRef()\r\n  const [selectedCollection, setSelectedCollection] = useState(EXPECT_OPTIONS[0]);\r\n  const [countdownTime, setCountdownTime] = useState(0);\r\n  const [isPreparing, setIsPreparing] = useState(false);\r\n  const [isDeposited, setIsDeposited] = useState(false);\r\n\r\n  const [depositAmount, setDepositAmount] = useState(0);\r\n  const [isApproving, setIsApproving] = useState(false);\r\n  const [isDepositing, setIsDepositing] = useState(false);\r\n\r\n  useEffect(() => {\r\n    refetchCurrentBetId();\r\n    refetchEthPrice();\r\n    refetchCurrentBetInfo();\r\n    refetchCurrentBetUserInfo();\r\n    refetchEarnedAmount();\r\n    refetchLostAmount();\r\n\r\n    refetchApprovedAmount();\r\n  }, [fastRefresh])\r\n\r\n  useEffect(() => {\r\n    if (currentBetInfo === undefined || currentBetUserInfo === undefined) return;\r\n\r\n    if (currentBetInfo[4]) {\r\n      setIsPreparing(true);\r\n      setCountdownTime(parseInt(currentBetInfo[2]))\r\n    } else {\r\n      setIsPreparing(false);\r\n      setCountdownTime(parseInt(currentBetInfo[3]))\r\n    }\r\n\r\n    if (currentBetUserInfo[4])\r\n      setIsDeposited(true);\r\n    else\r\n      setIsDeposited(false);\r\n\r\n  }, [currentBetInfo, currentBetUserInfo])\r\n\r\n  const getTextBetting = () => {\r\n    if (currentBetUserInfo && currentBetUserInfo[4]) // Already Deposited\r\n      return 'Waiting ...';\r\n\r\n    if (currentBetInfo && currentBetInfo[5]) // Passed preparing time\r\n      return 'Waiting ...';\r\n\r\n    if (depositAmount === 0)\r\n      return 'Enter Amount';\r\n\r\n    if (isApproving)\r\n      return 'Approving ...';\r\n\r\n    if (parseFloat(ethers.formatUnits(tokenBalance ? tokenBalance : \"0\", 'ether')) < depositAmount)\r\n      return 'Insufficient Token Balance';\r\n\r\n    if (parseFloat(ethers.formatUnits(approvedAmount ? approvedAmount : \"0\", 'ether')) < depositAmount)\r\n      return 'Approve Token';\r\n\r\n    if (isDepositing)\r\n      return 'Depositing ...';\r\n\r\n\r\n    return \"Deposit\";\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setDepositAmount(e.target.value);\r\n  }\r\n\r\n  const handleBetting = async () => {\r\n    if (currentBetUserInfo && currentBetUserInfo[4]) // Already Deposited\r\n      return;\r\n\r\n    if (currentBetInfo && currentBetInfo[5]) // Passed preparing time\r\n      return;\r\n\r\n    if (depositAmount === 0)\r\n      return;\r\n\r\n    if (depositAmount < 1000) {\r\n      toast.error(\"The minimum amount is 1000.\");\r\n      return;\r\n    }\r\n\r\n    if (depositAmount > 10000) {\r\n      toast.error(\"The maximum amount is 10000.\");\r\n      return;\r\n    }\r\n\r\n    if (parseFloat(ethers.formatUnits(tokenBalance ? tokenBalance : \"0\", 'ether')) < depositAmount)\r\n      return;\r\n\r\n    if (parseFloat(ethers.formatUnits(approvedAmount ? approvedAmount : \"0\", 'ether')) < depositAmount) {\r\n      setIsApproving(true);\r\n\r\n      await writeContractAsync({\r\n        address: chainId === TEST_NET ? GOTCHA_ADDRESS_TEST : GOTCHA_ADDRESS_MAIN,\r\n        abi: GotchaAbi,\r\n        functionName: \"approve\",\r\n        args: [chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN, UINT256_MAX],\r\n      })\r\n        .then(() => {\r\n          setIsApproving(false);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err)\r\n          setIsApproving(false);\r\n        });\r\n      return;\r\n    }\r\n\r\n    setIsDepositing(true);\r\n\r\n    console.log(\"handleBetting = \", ethers.parseUnits(depositAmount.toString(), 18), selectedCollection.value === 0 ? true : false)\r\n\r\n\r\n    await writeContractAsync({\r\n      address: chainId === TEST_NET ? BETTING_ADDRESS_TEST : BETTING_ADDRESS_MAIN,\r\n      abi: BettingAbi,\r\n      functionName: \"bet\",\r\n      args: [ethers.parseUnits(depositAmount.toString(), 18), selectedCollection.value === 0 ? true : false],\r\n    })\r\n      .then(() => {\r\n        setIsDepositing(false);\r\n      })\r\n      .catch((err) => {\r\n        setIsDepositing(false);\r\n      });\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      {\r\n        isConnected ?\r\n          <>\r\n            <Container fluid>\r\n              <div className='hero'>\r\n                <Image src={Coin1Img} className='coin1' />\r\n                <h1>betting <span>gotcha</span></h1>\r\n              </div>\r\n              <div className='betting-open-container'>\r\n                <div className=\"overview\">\r\n                  <div className=\"table-wrapper\">\r\n                    <table>\r\n                      <tr>\r\n                        <td className=\"text-right\">\r\n                          $GOTCHA Balance:\r\n                        </td>\r\n                        <td className=\"text-left text-danger\">{parseInt(ethers.formatUnits(tokenBalance ? tokenBalance : 0, \"ether\"))}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td className=\"text-right\">\r\n                          Your Win Amount:\r\n                        </td>\r\n                        <td className=\"text-left text-danger\">{parseInt(ethers.formatUnits(earnedAmount ? earnedAmount : 0, \"ether\"))}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td className=\"text-right\">\r\n                          Your Loss Amount:\r\n                        </td>\r\n                        <td className=\"text-left text-danger\">{parseInt(ethers.formatUnits(lostAmount ? lostAmount : 0, \"ether\"))}</td>\r\n                      </tr>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n                <div className=\"bettings\">\r\n                  <div className=\"prev-card\">\r\n                    <div className=\"title\">BET #{parseInt(currentBetId) - 1}</div>\r\n                    <table>\r\n                      <tr>\r\n                        <td className=\"text-right\">Entry Price:</td>\r\n                        <td className=\"text-left text-danger\">$ {prevBetUserInfo ? (prevBetUserInfo[4] ? ethers.formatUnits(prevBetUserInfo[2], 8) : \"--\") : \"--\"}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td className=\"text-right\">End Price:</td>\r\n                        <td className=\"text-left text-danger\">$ {prevBetInfo ? ethers.formatUnits(prevBetInfo[1], 8) : \"--\"}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td className=\"text-right\">Deposit Amount:</td>\r\n                        <td className=\"text-left text-danger\">{prevBetUserInfo ? (prevBetUserInfo[4] ? parseFloat(ethers.formatUnits(prevBetUserInfo[1], \"ether\")) : \"--\") : \"--\"}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td className=\"text-right\">Expectation:</td>\r\n                        <td className=\"text-left text-danger\">{prevBetUserInfo ? (prevBetUserInfo[4] ? (prevBetUserInfo[5] ? \"LONG\" : \"SHORT\") : \"--\") : \"--\"}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td className=\"text-right\">Result:</td>\r\n                        <td className=\"text-left text-danger\">\r\n                          {(prevBetUserInfo && prevBetUserInfo[4] && parseInt(prevBetUserInfo[6]) === 1) && \"WIN\"}\r\n                          {(prevBetUserInfo && prevBetUserInfo[4] && parseInt(prevBetUserInfo[6]) === 2) && \"LOSE\"}\r\n                          {(prevBetUserInfo && prevBetUserInfo[4] && parseInt(prevBetUserInfo[6]) === 3) && \"DRAW\"}\r\n                          {(prevBetUserInfo && !prevBetUserInfo[4]) && \"--\"}\r\n                        </td>\r\n                      </tr>\r\n                    </table>\r\n                  </div>\r\n                  <div className=\"current-card\">\r\n                    <div className=\"title\">BET #{parseInt(currentBetId)}</div>\r\n                    <div>\r\n                      <td className=\"text-right text-danger\">SONIC Price:</td>\r\n                      <td className=\"text-left text-nice\">$ {ethPrice ? ethers.formatUnits(ethPrice, 8) : \"--\"}</td>\r\n                    </div>\r\n                    {\r\n                      isPreparing ?\r\n                        <div>It's time to deposit. You can deposit for</div>\r\n                        :\r\n                        <div>Waiting for result.</div>\r\n                    }\r\n                    <BettingTimer timeToEnd={countdownTime} />\r\n                    <table>\r\n                      <tr>\r\n                        <td className=\"text-right\">Entry Price:</td>\r\n                        <td className=\"text-left text-nice\">$ {currentBetUserInfo ? (currentBetUserInfo[4] ? ethers.formatUnits(currentBetUserInfo[2], 8) : \"--\") : \"--\"}</td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td className=\"text-right\">Expectation:</td>\r\n                        <td className=\"text-left text-nice\">\r\n                          {(isPreparing && !isDeposited) && <Combobox ref={regInputForCollectionId} options={EXPECT_OPTIONS} value={selectedCollection} onChange={(selectedOption) => setSelectedCollection(selectedOption)} />}\r\n                          {(!isPreparing && !isDeposited) && \"--\"}\r\n                          {isDeposited && (currentBetUserInfo ? (currentBetUserInfo[5] ? \"LONG\" : \"SHORT\") : \"--\")}\r\n                        </td>\r\n                      </tr>\r\n                      <tr>\r\n                        <td className=\"text-right\">Deposit $GotchA:</td>\r\n                        <td className=\"text-left text-nice\">\r\n                          {(isPreparing && !isDeposited) && <input type=\"number\" placeholder={`${parseInt(ethers.formatUnits(minAmount ? minAmount : \"0\", 18))}~${parseInt(ethers.formatUnits(maxAmount ? maxAmount : \"0\", 18))}`} className=\"\" value={depositAmount} onChange={handleChange} />}\r\n                          {(!isPreparing && !isDeposited) && \"--\"}\r\n                          {isDeposited && parseFloat(currentBetUserInfo ? ethers.formatUnits(currentBetUserInfo[1], \"ether\") : \"--\")}\r\n                        </td>\r\n                      </tr>\r\n                    </table>\r\n                    <RoundButton\r\n                      key=\"claim\"\r\n                      className=\"bet-btn\"\r\n                      children={getTextBetting()}\r\n                      variant=\"transparent\"\r\n                      onClick={handleBetting}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Container>\r\n          </>\r\n          :\r\n          <>\r\n            <Container fluid>\r\n              <div className='hero'>\r\n                <Image src={Coin1Img} className='coin1' />\r\n                <Image src={Coin2Img} className='coin2' />\r\n                <h1>betting <span>gotcha</span></h1>\r\n                <p className=\"note\">CONNECT YOUR WALLET AND START BETTING TO EARN <span>$GOTCHA</span>.<br /><br /> FOR MORE INFORMATION, SCROLL DOWN</p>\r\n                <div className='d-flex justify-content-center'>\r\n                  <ConnectWalletButton onClick={openConnectModal} />\r\n                </div>\r\n              </div>\r\n            </Container>\r\n            <div className=\"explanation\">\r\n              <Container fluid>\r\n                <div className={`d-flex justify-content-between align-items-center ${isMobile ? \"flex-column\" : \"\"}`}>\r\n                  <Image src={BigTeacherImg} id=\"bigteacher\" />\r\n                  <div className='content'>\r\n                    <p>Once staked, eligible NFTs will yield $GOTCHA. Earned $GOTCHA change based on NFT type and total size of NFT pool.</p>\r\n                    <div className=\"d-flex justify-content-center align-items-center gap-1\">\r\n                      <p className=\"nft-betting\"><span>BETTING</span></p>\r\n                      <Image src={BlackArrowImg} id=\"arrow\" />\r\n                      <Image src={CoinStackImg} id=\"coinstack\" />\r\n                    </div>\r\n                    <p>$GOTCHA will be awarded at the end of each day. Earned $GOTCHA can be claimed at any time by pressing the “CLAIM” button after connecting your wallet.</p>\r\n                    <p>More details on eligible NFT collections and NFT weights can be found below.</p>\r\n                  </div>\r\n                </div>\r\n              </Container>\r\n              <Image src={Coin3Img} id=\"coin3\" />\r\n              <Image src={HeartImg} id=\"heart\" />\r\n            </div>\r\n            <Container className='betting-table-cointainer'>\r\n              <Betting />\r\n              <Image src={Coin4Img} id=\"coin4\" />\r\n              <Image src={Coin5Img} id=\"coin5\" />\r\n            </Container>\r\n          </>\r\n      }\r\n    </Layout>\r\n  )\r\n}\r\n"],"names":["customStyles","container","provided","boxShadow","fontFamily","borderRadius","control","backgroundColor","padding","border","option","state","isFocused","singleValue","color","noOptionsMessage","menu","input","_ref","options","value","onChange","_jsx","Select","styles","className","EXPECT_OPTIONS","label","BettingTimer","timeToEnd","days","setDays","useState","hours","setHours","minutes","setMinutes","seconds","setSeconds","useEffect","timer","setInterval","getTimeUntil","time","parseInt","Date","now","Math","floor","clearInterval","_jsxs","children","UINT256_MAX","useRefresh","fast","slow","useContext","RefreshContext","fastRefresh","Betting","h","d","map","info","BettingPage","isMobile","useMediaQuery","data","txResult","writeContractAsync","useWriteContract","openConnectModal","useConnectModal","chainId","useChainId","isConnected","address","useAccount","currentBetId","refetch","refetchCurrentBetId","useReadContract","TEST_NET","BETTING_ADDRESS_TEST","BETTING_ADDRESS_MAIN","abi","BettingAbi","functionName","args","ethPrice","refetchEthPrice","minAmount","refetchMinAmount","maxAmount","refetchMaxAmount","earnedAmount","refetchEarnedAmount","lostAmount","refetchLostAmount","prevBetUserInfo","refetchPrevBetUserInfo","currentBetUserInfo","refetchCurrentBetUserInfo","prevBetInfo","refetchPrevBetInfo","currentBetInfo","refetchCurrentBetInfo","console","log","tokenBalance","refetchTokenBalance","GOTCHA_ADDRESS_TEST","GOTCHA_ADDRESS_MAIN","GotchaAbi","approvedAmount","refetchApprovedAmount","regInputForCollectionId","useRef","selectedCollection","setSelectedCollection","countdownTime","setCountdownTime","isPreparing","setIsPreparing","isDeposited","setIsDeposited","depositAmount","setDepositAmount","isApproving","setIsApproving","isDepositing","setIsDepositing","undefined","Layout","_Fragment","Container","fluid","Image","src","Coin1Img","ethers","parseFloat","Combobox","ref","selectedOption","type","placeholder","e","target","RoundButton","variant","onClick","async","toast","error","then","catch","err","toString","Coin2Img","ConnectWalletButton","BigTeacherImg","id","BlackArrowImg","CoinStackImg","Coin3Img","HeartImg","Coin4Img","Coin5Img"],"sourceRoot":""}