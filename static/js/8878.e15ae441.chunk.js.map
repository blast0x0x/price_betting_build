{"version":3,"file":"static/js/8878.e15ae441.chunk.js","mappings":"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","sources":["../node_modules/@safe-global/safe-apps-sdk/src/version.ts","../node_modules/@safe-global/safe-apps-sdk/src/communication/utils.ts","../node_modules/@safe-global/safe-apps-sdk/src/communication/messageFormatter.ts","../node_modules/@safe-global/safe-apps-sdk/src/communication/methods.ts","../node_modules/@safe-global/safe-apps-sdk/src/communication/index.ts","../node_modules/@safe-global/safe-apps-sdk/src/types/sdk.ts","../node_modules/@safe-global/safe-apps-sdk/src/txs/index.ts","../node_modules/@safe-global/safe-apps-sdk/src/eth/constants.ts","../node_modules/@safe-global/safe-apps-sdk/src/eth/index.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/data/concat.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/formatAbiItem.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/data/isHex.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/data/size.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/version.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/base.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/abi.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/address.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/encoding.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/lru.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/data.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/data/pad.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/encoding/fromHex.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/encoding/toHex.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/encoding/toBytes.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/hash/keccak256.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/address/getAddress.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/address/isAddress.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/data/slice.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/regex.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/encodeAbiParameters.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/hash/hashSignature.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/hash/toSignature.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/hash/normalizeSignature.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/hash/toSignatureHash.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/hash/toFunctionSelector.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/hash/toEventSelector.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/getAbiItem.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/prepareEncodeFunctionData.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/abi/encodeFunctionData.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/signature/hashMessage.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/signature/toPrefixedMessage.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/errors/typedData.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/stringify.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/typedData.ts","../node_modules/@safe-global/safe-apps-sdk/node_modules/viem/utils/signature/hashTypedData.ts","../node_modules/@safe-global/safe-apps-sdk/src/safe/signatures.ts","../node_modules/@safe-global/safe-apps-sdk/src/types/permissions.ts","../node_modules/@safe-global/safe-apps-sdk/src/wallet/index.ts","../node_modules/@safe-global/safe-apps-sdk/src/decorators/requirePermissions.ts","../node_modules/@safe-global/safe-apps-sdk/src/safe/index.ts","../node_modules/@safe-global/safe-apps-sdk/src/sdk.ts","../node_modules/@safe-global/safe-apps-sdk/src/index.ts"],"sourcesContent":["export const getSDKVersion = () => '9.1.0';\n","// i.e. 0-255 -> '00'-'ff'\nconst dec2hex = (dec: number): string => dec.toString(16).padStart(2, '0');\n\nconst generateId = (len: number): string => {\n  const arr = new Uint8Array((len || 40) / 2);\n  window.crypto.getRandomValues(arr);\n  return Array.from(arr, dec2hex).join('');\n};\n\nconst generateRequestId = (): string => {\n  if (typeof window !== 'undefined') {\n    return generateId(10);\n  }\n\n  return new Date().getTime().toString(36);\n};\n\nexport { generateRequestId };\n","import { ErrorResponse, SDKRequestData, RequestId, SuccessResponse, MethodToResponse } from '../types/index.js';\nimport { getSDKVersion } from '../version.js';\nimport { Methods } from './methods.js';\nimport { generateRequestId } from './utils.js';\n\nclass MessageFormatter {\n  static makeRequest = <M extends Methods = Methods, P = unknown>(method: M, params: P): SDKRequestData<M, P> => {\n    const id = generateRequestId();\n\n    return {\n      id,\n      method,\n      params,\n      env: {\n        sdkVersion: getSDKVersion(),\n      },\n    };\n  };\n\n  static makeResponse = (id: RequestId, data: MethodToResponse[Methods], version: string): SuccessResponse => ({\n    id,\n    success: true,\n    version,\n    data,\n  });\n\n  static makeErrorResponse = (id: RequestId, error: string, version: string): ErrorResponse => ({\n    id,\n    success: false,\n    error,\n    version,\n  });\n}\n\nexport { MessageFormatter };\n","export enum Methods {\n  sendTransactions = 'sendTransactions',\n  rpcCall = 'rpcCall',\n  getChainInfo = 'getChainInfo',\n  getSafeInfo = 'getSafeInfo',\n  getTxBySafeTxHash = 'getTxBySafeTxHash',\n  getSafeBalances = 'getSafeBalances',\n  signMessage = 'signMessage',\n  signTypedMessage = 'signTypedMessage',\n  getEnvironmentInfo = 'getEnvironmentInfo',\n  getOffChainSignature = 'getOffChainSignature',\n  requestAddressBook = 'requestAddressBook',\n  wallet_getPermissions = 'wallet_getPermissions',\n  wallet_requestPermissions = 'wallet_requestPermissions',\n}\n\nexport enum RestrictedMethods {\n  requestAddressBook = 'requestAddressBook',\n}\n","import { MessageFormatter } from './messageFormatter.js';\nimport { Methods } from './methods.js';\nimport { InterfaceMessageEvent, Communicator, Response, SuccessResponse } from '../types/index.js';\n\n// eslint-disable-next-line\ntype Callback = (response: any) => void;\n\nclass PostMessageCommunicator implements Communicator {\n  private readonly allowedOrigins: RegExp[] | null = null;\n  private callbacks = new Map<string, Callback>();\n  private debugMode = false;\n  private isServer = typeof window === 'undefined';\n\n  constructor(allowedOrigins: RegExp[] | null = null, debugMode = false) {\n    this.allowedOrigins = allowedOrigins;\n    this.debugMode = debugMode;\n\n    if (!this.isServer) {\n      window.addEventListener('message', this.onParentMessage);\n    }\n  }\n\n  private isValidMessage = ({ origin, data, source }: InterfaceMessageEvent): boolean => {\n    const emptyOrMalformed = !data;\n    const sentFromParentEl = !this.isServer && source === window.parent;\n    const majorVersionNumber = typeof data.version !== 'undefined' && parseInt(data.version.split('.')[0]);\n    const allowedSDKVersion = typeof majorVersionNumber === 'number' && majorVersionNumber >= 1;\n    let validOrigin = true;\n    if (Array.isArray(this.allowedOrigins)) {\n      validOrigin = this.allowedOrigins.find((regExp) => regExp.test(origin)) !== undefined;\n    }\n\n    return !emptyOrMalformed && sentFromParentEl && allowedSDKVersion && validOrigin;\n  };\n\n  private logIncomingMessage = (msg: InterfaceMessageEvent): void => {\n    console.info(`Safe Apps SDK v1: A message was received from origin ${msg.origin}. `, msg.data);\n  };\n\n  private onParentMessage = (msg: InterfaceMessageEvent): void => {\n    if (this.isValidMessage(msg)) {\n      this.debugMode && this.logIncomingMessage(msg);\n      this.handleIncomingMessage(msg.data);\n    }\n  };\n\n  private handleIncomingMessage = (payload: InterfaceMessageEvent['data']): void => {\n    const { id } = payload;\n\n    const cb = this.callbacks.get(id);\n    if (cb) {\n      cb(payload);\n\n      this.callbacks.delete(id);\n    }\n  };\n\n  public send = <M extends Methods, P, R>(method: M, params: P): Promise<SuccessResponse<R>> => {\n    const request = MessageFormatter.makeRequest(method, params);\n\n    if (this.isServer) {\n      throw new Error(\"Window doesn't exist\");\n    }\n\n    window.parent.postMessage(request, '*');\n    return new Promise((resolve, reject) => {\n      this.callbacks.set(request.id, (response: Response<R>) => {\n        if (!response.success) {\n          reject(new Error(response.error));\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n\nexport default PostMessageCommunicator;\nexport * from './methods.js';\n","import { ChainInfo as _ChainInfo } from '@safe-global/safe-gateway-typescript-sdk';\n\nexport type ChainInfo = Pick<\n  _ChainInfo,\n  'chainName' | 'chainId' | 'shortName' | 'nativeCurrency' | 'blockExplorerUriTemplate'\n>;\n\nexport { NativeCurrency } from '@safe-global/safe-gateway-typescript-sdk';\n\nexport type BaseTransaction = {\n  to: string;\n  value: string;\n  data: string;\n};\n\nexport type GetTxBySafeTxHashParams = {\n  safeTxHash: string;\n};\n\nexport interface SendTransactionRequestParams {\n  safeTxGas?: number;\n}\n\nexport interface SendTransactionsParams {\n  txs: BaseTransaction[];\n  params?: SendTransactionRequestParams;\n}\n\nexport type GetBalanceParams = { currency?: string };\n\nexport type SignMessageParams = {\n  message: string;\n};\n\nexport interface TypedDataDomain {\n  name?: string;\n  version?: string;\n  chainId?: string | number | bigint | { toNumber: () => number };\n  verifyingContract?: string;\n  salt?: string;\n}\n\nexport interface TypedDataTypes {\n  name: string;\n  type: string;\n}\n\nexport type TypedMessageTypes = { [key: string]: TypedDataTypes[] };\n\nexport type EIP712TypedData = {\n  domain: TypedDataDomain;\n  types: TypedMessageTypes;\n  message: Record<string, any>;\n  primaryType?: string;\n};\n\nexport type SignTypedMessageParams = {\n  typedData: EIP712TypedData;\n};\n\nexport type SendTransactionsResponse = {\n  safeTxHash: string;\n};\n\nexport type OffChainSignMessageResponse = {\n  messageHash: string;\n};\n\nexport type SignMessageResponse = SendTransactionsResponse | OffChainSignMessageResponse;\n\nexport type SafeInfo = {\n  safeAddress: string;\n  chainId: number;\n  threshold: number;\n  owners: string[];\n  isReadOnly: boolean;\n};\n\nexport type SafeInfoExtended = SafeInfo & {\n  nonce: number;\n  implementation: string;\n  modules: string[] | null;\n  fallbackHandler: string | null;\n  guard: string | null;\n  version: string | null;\n};\n\nexport type EnvironmentInfo = {\n  origin: string;\n};\n\nexport type PostMessageOptions = {\n  transfer?: any[];\n};\n\nexport type AddressBookItem = {\n  address: string;\n  chainId: string;\n  name: string;\n};\n\nexport const isObjectEIP712TypedData = (obj?: unknown): obj is EIP712TypedData => {\n  return typeof obj === 'object' && obj != null && 'domain' in obj && 'types' in obj && 'message' in obj;\n};\n","import { Methods } from '../communication/methods.js';\nimport {\n  GatewayTransactionDetails,\n  SignMessageParams,\n  SendTransactionsParams,\n  GetTxBySafeTxHashParams,\n  Communicator,\n  SendTransactionsResponse,\n  SignTypedMessageParams,\n  EIP712TypedData,\n  isObjectEIP712TypedData,\n  SignMessageResponse,\n} from '../types/index.js';\n\nclass TXs {\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n  }\n\n  async getBySafeTxHash(safeTxHash: string): Promise<GatewayTransactionDetails> {\n    if (!safeTxHash) {\n      throw new Error('Invalid safeTxHash');\n    }\n\n    const response = await this.communicator.send<\n      Methods.getTxBySafeTxHash,\n      GetTxBySafeTxHashParams,\n      GatewayTransactionDetails\n    >(Methods.getTxBySafeTxHash, { safeTxHash });\n\n    return response.data;\n  }\n\n  async signMessage(message: string): Promise<SignMessageResponse> {\n    const messagePayload = {\n      message,\n    };\n\n    const response = await this.communicator.send<Methods.signMessage, SignMessageParams, SignMessageResponse>(\n      Methods.signMessage,\n      messagePayload,\n    );\n\n    return response.data;\n  }\n\n  async signTypedMessage(typedData: EIP712TypedData): Promise<SignMessageResponse> {\n    if (!isObjectEIP712TypedData(typedData)) {\n      throw new Error('Invalid typed data');\n    }\n\n    const response = await this.communicator.send<\n      Methods.signTypedMessage,\n      SignTypedMessageParams,\n      SignMessageResponse\n    >(Methods.signTypedMessage, { typedData });\n\n    return response.data;\n  }\n\n  async send({ txs, params }: SendTransactionsParams): Promise<SendTransactionsResponse> {\n    if (!txs || !txs.length) {\n      throw new Error('No transactions were passed');\n    }\n\n    const messagePayload = {\n      txs,\n      params,\n    };\n\n    const response = await this.communicator.send<\n      Methods.sendTransactions,\n      SendTransactionsParams,\n      SendTransactionsResponse\n    >(Methods.sendTransactions, messagePayload);\n\n    return response.data;\n  }\n}\n\nexport { TXs };\n","export const RPC_CALLS = {\n  eth_call: 'eth_call',\n  eth_gasPrice: 'eth_gasPrice',\n  eth_getLogs: 'eth_getLogs',\n  eth_getBalance: 'eth_getBalance',\n  eth_getCode: 'eth_getCode',\n  eth_getBlockByHash: 'eth_getBlockByHash',\n  eth_getBlockByNumber: 'eth_getBlockByNumber',\n  eth_getStorageAt: 'eth_getStorageAt',\n  eth_getTransactionByHash: 'eth_getTransactionByHash',\n  eth_getTransactionReceipt: 'eth_getTransactionReceipt',\n  eth_getTransactionCount: 'eth_getTransactionCount',\n  eth_estimateGas: 'eth_estimateGas',\n  safe_setSettings: 'safe_setSettings',\n} as const;\n","import { RPC_CALLS } from '../eth/constants.js';\nimport {\n  BlockNumberArg,\n  RpcCallNames,\n  Communicator,\n  Log,\n  BlockTransactionString,\n  BlockTransactionObject,\n  Web3TransactionObject,\n  RPCPayload,\n  TransactionConfig,\n  Web3TransactionReceiptObject,\n  PastLogsOptions,\n  SafeSettings,\n} from '../types/index.js';\nimport { Methods } from '../communication/methods.js';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Formatter = (arg: any) => any;\n\nconst inputFormatters: Record<string, Formatter> = {\n  defaultBlockParam: (arg = 'latest') => arg,\n  returnFullTxObjectParam: (arg = false): boolean => arg,\n  blockNumberToHex: (arg: BlockNumberArg): string =>\n    Number.isInteger(arg) ? `0x${arg.toString(16)}` : (arg as string),\n};\n\ntype BuildRequestArgs = {\n  call: RpcCallNames;\n  formatters?: (Formatter | null)[];\n};\n\nclass Eth {\n  public call;\n  public getBalance;\n  public getCode;\n  public getStorageAt;\n  public getPastLogs;\n  public getBlockByHash;\n  public getBlockByNumber;\n  public getTransactionByHash;\n  public getTransactionReceipt;\n  public getTransactionCount;\n  public getGasPrice;\n  public getEstimateGas;\n  public setSafeSettings;\n\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n    this.call = this.buildRequest<[TransactionConfig, string?], string>({\n      call: RPC_CALLS.eth_call,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getBalance = this.buildRequest<[string, string?], string>({\n      call: RPC_CALLS.eth_getBalance,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getCode = this.buildRequest<[string, string?], string>({\n      call: RPC_CALLS.eth_getCode,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getStorageAt = this.buildRequest<[string, number, string?], string>({\n      call: RPC_CALLS.eth_getStorageAt,\n      formatters: [null, inputFormatters.blockNumberToHex, inputFormatters.defaultBlockParam],\n    });\n    this.getPastLogs = this.buildRequest<[PastLogsOptions], Log[]>({\n      call: RPC_CALLS.eth_getLogs,\n    });\n    this.getBlockByHash = this.buildRequest<[string, boolean?], BlockTransactionString | BlockTransactionObject>({\n      call: RPC_CALLS.eth_getBlockByHash,\n      formatters: [null, inputFormatters.returnFullTxObjectParam],\n    });\n    this.getBlockByNumber = this.buildRequest<\n      [BlockNumberArg, boolean?],\n      BlockTransactionString | BlockTransactionObject\n    >({\n      call: RPC_CALLS.eth_getBlockByNumber,\n      formatters: [inputFormatters.blockNumberToHex, inputFormatters.returnFullTxObjectParam],\n    });\n    this.getTransactionByHash = this.buildRequest<[string], Web3TransactionObject>({\n      call: RPC_CALLS.eth_getTransactionByHash,\n    });\n    this.getTransactionReceipt = this.buildRequest<[string], Web3TransactionReceiptObject>({\n      call: RPC_CALLS.eth_getTransactionReceipt,\n    });\n    this.getTransactionCount = this.buildRequest<[string, string?], string>({\n      call: RPC_CALLS.eth_getTransactionCount,\n      formatters: [null, inputFormatters.defaultBlockParam],\n    });\n    this.getGasPrice = this.buildRequest<never[], string>({\n      call: RPC_CALLS.eth_gasPrice,\n    });\n    this.getEstimateGas = (transaction: TransactionConfig): Promise<number> =>\n      this.buildRequest<[TransactionConfig], number>({\n        call: RPC_CALLS.eth_estimateGas,\n      })([transaction]);\n    this.setSafeSettings = this.buildRequest<[SafeSettings], SafeSettings>({\n      call: RPC_CALLS.safe_setSettings,\n    });\n  }\n\n  private buildRequest<P = never[], R = unknown>(args: BuildRequestArgs) {\n    const { call, formatters } = args;\n\n    return async (params?: P): Promise<R> => {\n      if (formatters && Array.isArray(params)) {\n        formatters.forEach((formatter: ((...args: unknown[]) => unknown) | null, i) => {\n          if (formatter) {\n            params[i] = formatter(params[i]);\n          }\n        });\n      }\n\n      const payload: RPCPayload<P> = {\n        call,\n        params: params || [],\n      };\n\n      const response = await this.communicator.send<Methods.rpcCall, RPCPayload<P>, R>(Methods.rpcCall, payload);\n\n      return response.data;\n    };\n  }\n}\n\nexport { Eth };\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\nexport type ConcatReturnType<value extends Hex | ByteArray> = value extends Hex\n  ? Hex\n  : ByteArray\n\nexport type ConcatErrorType =\n  | ConcatBytesErrorType\n  | ConcatHexErrorType\n  | ErrorType\n\nexport function concat<value extends Hex | ByteArray>(\n  values: readonly value[],\n): ConcatReturnType<value> {\n  if (typeof values[0] === 'string')\n    return concatHex(values as readonly Hex[]) as ConcatReturnType<value>\n  return concatBytes(values as readonly ByteArray[]) as ConcatReturnType<value>\n}\n\nexport type ConcatBytesErrorType = ErrorType\n\nexport function concatBytes(values: readonly ByteArray[]): ByteArray {\n  let length = 0\n  for (const arr of values) {\n    length += arr.length\n  }\n  const result = new Uint8Array(length)\n  let offset = 0\n  for (const arr of values) {\n    result.set(arr, offset)\n    offset += arr.length\n  }\n  return result\n}\n\nexport type ConcatHexErrorType = ErrorType\n\nexport function concatHex(values: readonly Hex[]): Hex {\n  return `0x${(values as Hex[]).reduce(\n    (acc, x) => acc + x.replace('0x', ''),\n    '',\n  )}`\n}\n","import type { AbiParameter } from 'abitype'\n\nimport {\n  InvalidDefinitionTypeError,\n  type InvalidDefinitionTypeErrorType,\n} from '../../errors/abi.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { AbiItem } from '../../types/contract.js'\n\nexport type FormatAbiItemErrorType =\n  | FormatAbiParamsErrorType\n  | InvalidDefinitionTypeErrorType\n  | ErrorType\n\nexport function formatAbiItem(\n  abiItem: AbiItem,\n  { includeName = false }: { includeName?: boolean | undefined } = {},\n) {\n  if (\n    abiItem.type !== 'function' &&\n    abiItem.type !== 'event' &&\n    abiItem.type !== 'error'\n  )\n    throw new InvalidDefinitionTypeError(abiItem.type)\n\n  return `${abiItem.name}(${formatAbiParams(abiItem.inputs, { includeName })})`\n}\n\nexport type FormatAbiParamsErrorType = ErrorType\n\nexport function formatAbiParams(\n  params: readonly AbiParameter[] | undefined,\n  { includeName = false }: { includeName?: boolean | undefined } = {},\n): string {\n  if (!params) return ''\n  return params\n    .map((param) => formatAbiParam(param, { includeName }))\n    .join(includeName ? ', ' : ',')\n}\n\nexport type FormatAbiParamErrorType = ErrorType\n\nfunction formatAbiParam(\n  param: AbiParameter,\n  { includeName }: { includeName: boolean },\n): string {\n  if (param.type.startsWith('tuple')) {\n    return `(${formatAbiParams(\n      (param as unknown as { components: AbiParameter[] }).components,\n      { includeName },\n    )})${param.type.slice('tuple'.length)}`\n  }\n  return param.type + (includeName && param.name ? ` ${param.name}` : '')\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\n\nexport type IsHexErrorType = ErrorType\n\nexport function isHex(\n  value: unknown,\n  { strict = true }: { strict?: boolean | undefined } = {},\n): value is Hex {\n  if (!value) return false\n  if (typeof value !== 'string') return false\n  return strict ? /^0x[0-9a-fA-F]*$/.test(value) : value.startsWith('0x')\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\nimport { type IsHexErrorType, isHex } from './isHex.js'\n\nexport type SizeErrorType = IsHexErrorType | ErrorType\n\n/**\n * @description Retrieves the size of the value (in bytes).\n *\n * @param value The value (hex or byte array) to retrieve the size of.\n * @returns The size of the value (in bytes).\n */\nexport function size(value: Hex | ByteArray) {\n  if (isHex(value, { strict: false })) return Math.ceil((value.length - 2) / 2)\n  return value.length\n}\n","export const version = '2.23.6'\n","import { version } from './version.js'\n\ntype ErrorConfig = {\n  getDocsUrl?: ((args: BaseErrorParameters) => string | undefined) | undefined\n  version?: string | undefined\n}\n\nlet errorConfig: ErrorConfig = {\n  getDocsUrl: ({\n    docsBaseUrl,\n    docsPath = '',\n    docsSlug,\n  }: BaseErrorParameters) =>\n    docsPath\n      ? `${docsBaseUrl ?? 'https://viem.sh'}${docsPath}${\n          docsSlug ? `#${docsSlug}` : ''\n        }`\n      : undefined,\n  version: `viem@${version}`,\n}\n\nexport function setErrorConfig(config: ErrorConfig) {\n  errorConfig = config\n}\n\ntype BaseErrorParameters = {\n  cause?: BaseError | Error | undefined\n  details?: string | undefined\n  docsBaseUrl?: string | undefined\n  docsPath?: string | undefined\n  docsSlug?: string | undefined\n  metaMessages?: string[] | undefined\n  name?: string | undefined\n}\n\nexport type BaseErrorType = BaseError & { name: 'BaseError' }\nexport class BaseError extends Error {\n  details: string\n  docsPath?: string | undefined\n  metaMessages?: string[] | undefined\n  shortMessage: string\n  version: string\n\n  override name = 'BaseError'\n\n  constructor(shortMessage: string, args: BaseErrorParameters = {}) {\n    const details = (() => {\n      if (args.cause instanceof BaseError) return args.cause.details\n      if (args.cause?.message) return args.cause.message\n      return args.details!\n    })()\n    const docsPath = (() => {\n      if (args.cause instanceof BaseError)\n        return args.cause.docsPath || args.docsPath\n      return args.docsPath\n    })()\n    const docsUrl = errorConfig.getDocsUrl?.({ ...args, docsPath })\n\n    const message = [\n      shortMessage || 'An error occurred.',\n      '',\n      ...(args.metaMessages ? [...args.metaMessages, ''] : []),\n      ...(docsUrl ? [`Docs: ${docsUrl}`] : []),\n      ...(details ? [`Details: ${details}`] : []),\n      ...(errorConfig.version ? [`Version: ${errorConfig.version}`] : []),\n    ].join('\\n')\n\n    super(message, args.cause ? { cause: args.cause } : undefined)\n\n    this.details = details\n    this.docsPath = docsPath\n    this.metaMessages = args.metaMessages\n    this.name = args.name ?? this.name\n    this.shortMessage = shortMessage\n    this.version = version\n  }\n\n  walk(): Error\n  walk(fn: (err: unknown) => boolean): Error | null\n  walk(fn?: any): any {\n    return walk(this, fn)\n  }\n}\n\nfunction walk(\n  err: unknown,\n  fn?: ((err: unknown) => boolean) | undefined,\n): unknown {\n  if (fn?.(err)) return err\n  if (\n    err &&\n    typeof err === 'object' &&\n    'cause' in err &&\n    err.cause !== undefined\n  )\n    return walk(err.cause, fn)\n  return fn ? null : err\n}\n","import type { Abi, AbiEvent, AbiParameter } from 'abitype'\n\nimport type { Hex } from '../types/misc.js'\nimport { formatAbiItem, formatAbiParams } from '../utils/abi/formatAbiItem.js'\nimport { size } from '../utils/data/size.js'\n\nimport { BaseError } from './base.js'\n\nexport type AbiConstructorNotFoundErrorType = AbiConstructorNotFoundError & {\n  name: 'AbiConstructorNotFoundError'\n}\nexport class AbiConstructorNotFoundError extends BaseError {\n  constructor({ docsPath }: { docsPath: string }) {\n    super(\n      [\n        'A constructor was not found on the ABI.',\n        'Make sure you are using the correct ABI and that the constructor exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiConstructorNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiConstructorParamsNotFoundErrorType =\n  AbiConstructorParamsNotFoundError & {\n    name: 'AbiConstructorParamsNotFoundError'\n  }\n\nexport class AbiConstructorParamsNotFoundError extends BaseError {\n  constructor({ docsPath }: { docsPath: string }) {\n    super(\n      [\n        'Constructor arguments were provided (`args`), but a constructor parameters (`inputs`) were not found on the ABI.',\n        'Make sure you are using the correct ABI, and that the `inputs` attribute on the constructor exists.',\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiConstructorParamsNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiDecodingDataSizeInvalidErrorType =\n  AbiDecodingDataSizeInvalidError & {\n    name: 'AbiDecodingDataSizeInvalidError'\n  }\nexport class AbiDecodingDataSizeInvalidError extends BaseError {\n  constructor({ data, size }: { data: Hex; size: number }) {\n    super(\n      [\n        `Data size of ${size} bytes is invalid.`,\n        'Size must be in increments of 32 bytes (size % 32 === 0).',\n      ].join('\\n'),\n      {\n        metaMessages: [`Data: ${data} (${size} bytes)`],\n        name: 'AbiDecodingDataSizeInvalidError',\n      },\n    )\n  }\n}\n\nexport type AbiDecodingDataSizeTooSmallErrorType =\n  AbiDecodingDataSizeTooSmallError & {\n    name: 'AbiDecodingDataSizeTooSmallError'\n  }\nexport class AbiDecodingDataSizeTooSmallError extends BaseError {\n  data: Hex\n  params: readonly AbiParameter[]\n  size: number\n\n  constructor({\n    data,\n    params,\n    size,\n  }: { data: Hex; params: readonly AbiParameter[]; size: number }) {\n    super(\n      [`Data size of ${size} bytes is too small for given parameters.`].join(\n        '\\n',\n      ),\n      {\n        metaMessages: [\n          `Params: (${formatAbiParams(params, { includeName: true })})`,\n          `Data:   ${data} (${size} bytes)`,\n        ],\n        name: 'AbiDecodingDataSizeTooSmallError',\n      },\n    )\n\n    this.data = data\n    this.params = params\n    this.size = size\n  }\n}\n\nexport type AbiDecodingZeroDataErrorType = AbiDecodingZeroDataError & {\n  name: 'AbiDecodingZeroDataError'\n}\nexport class AbiDecodingZeroDataError extends BaseError {\n  constructor() {\n    super('Cannot decode zero data (\"0x\") with ABI parameters.', {\n      name: 'AbiDecodingZeroDataError',\n    })\n  }\n}\n\nexport type AbiEncodingArrayLengthMismatchErrorType =\n  AbiEncodingArrayLengthMismatchError & {\n    name: 'AbiEncodingArrayLengthMismatchError'\n  }\nexport class AbiEncodingArrayLengthMismatchError extends BaseError {\n  constructor({\n    expectedLength,\n    givenLength,\n    type,\n  }: { expectedLength: number; givenLength: number; type: string }) {\n    super(\n      [\n        `ABI encoding array length mismatch for type ${type}.`,\n        `Expected length: ${expectedLength}`,\n        `Given length: ${givenLength}`,\n      ].join('\\n'),\n      { name: 'AbiEncodingArrayLengthMismatchError' },\n    )\n  }\n}\n\nexport type AbiEncodingBytesSizeMismatchErrorType =\n  AbiEncodingBytesSizeMismatchError & {\n    name: 'AbiEncodingBytesSizeMismatchError'\n  }\nexport class AbiEncodingBytesSizeMismatchError extends BaseError {\n  constructor({ expectedSize, value }: { expectedSize: number; value: Hex }) {\n    super(\n      `Size of bytes \"${value}\" (bytes${size(\n        value,\n      )}) does not match expected size (bytes${expectedSize}).`,\n      { name: 'AbiEncodingBytesSizeMismatchError' },\n    )\n  }\n}\n\nexport type AbiEncodingLengthMismatchErrorType =\n  AbiEncodingLengthMismatchError & {\n    name: 'AbiEncodingLengthMismatchError'\n  }\nexport class AbiEncodingLengthMismatchError extends BaseError {\n  constructor({\n    expectedLength,\n    givenLength,\n  }: { expectedLength: number; givenLength: number }) {\n    super(\n      [\n        'ABI encoding params/values length mismatch.',\n        `Expected length (params): ${expectedLength}`,\n        `Given length (values): ${givenLength}`,\n      ].join('\\n'),\n      { name: 'AbiEncodingLengthMismatchError' },\n    )\n  }\n}\n\nexport type AbiErrorInputsNotFoundErrorType = AbiErrorInputsNotFoundError & {\n  name: 'AbiErrorInputsNotFoundError'\n}\nexport class AbiErrorInputsNotFoundError extends BaseError {\n  constructor(errorName: string, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Arguments (\\`args\\`) were provided to \"${errorName}\", but \"${errorName}\" on the ABI does not contain any parameters (\\`inputs\\`).`,\n        'Cannot encode error result without knowing what the parameter types are.',\n        'Make sure you are using the correct ABI and that the inputs exist on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiErrorInputsNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiErrorNotFoundErrorType = AbiErrorNotFoundError & {\n  name: 'AbiErrorNotFoundError'\n}\nexport class AbiErrorNotFoundError extends BaseError {\n  constructor(\n    errorName?: string | undefined,\n    { docsPath }: { docsPath?: string | undefined } = {},\n  ) {\n    super(\n      [\n        `Error ${errorName ? `\"${errorName}\" ` : ''}not found on ABI.`,\n        'Make sure you are using the correct ABI and that the error exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiErrorNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiErrorSignatureNotFoundErrorType =\n  AbiErrorSignatureNotFoundError & {\n    name: 'AbiErrorSignatureNotFoundError'\n  }\nexport class AbiErrorSignatureNotFoundError extends BaseError {\n  signature: Hex\n\n  constructor(signature: Hex, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Encoded error signature \"${signature}\" not found on ABI.`,\n        'Make sure you are using the correct ABI and that the error exists on it.',\n        `You can look up the decoded signature here: https://openchain.xyz/signatures?query=${signature}.`,\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiErrorSignatureNotFoundError',\n      },\n    )\n    this.signature = signature\n  }\n}\n\nexport type AbiEventSignatureEmptyTopicsErrorType =\n  AbiEventSignatureEmptyTopicsError & {\n    name: 'AbiEventSignatureEmptyTopicsError'\n  }\nexport class AbiEventSignatureEmptyTopicsError extends BaseError {\n  constructor({ docsPath }: { docsPath: string }) {\n    super('Cannot extract event signature from empty topics.', {\n      docsPath,\n      name: 'AbiEventSignatureEmptyTopicsError',\n    })\n  }\n}\n\nexport type AbiEventSignatureNotFoundErrorType =\n  AbiEventSignatureNotFoundError & {\n    name: 'AbiEventSignatureNotFoundError'\n  }\nexport class AbiEventSignatureNotFoundError extends BaseError {\n  constructor(signature: Hex, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Encoded event signature \"${signature}\" not found on ABI.`,\n        'Make sure you are using the correct ABI and that the event exists on it.',\n        `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`,\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiEventSignatureNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiEventNotFoundErrorType = AbiEventNotFoundError & {\n  name: 'AbiEventNotFoundError'\n}\nexport class AbiEventNotFoundError extends BaseError {\n  constructor(\n    eventName?: string | undefined,\n    { docsPath }: { docsPath?: string | undefined } = {},\n  ) {\n    super(\n      [\n        `Event ${eventName ? `\"${eventName}\" ` : ''}not found on ABI.`,\n        'Make sure you are using the correct ABI and that the event exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiEventNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiFunctionNotFoundErrorType = AbiFunctionNotFoundError & {\n  name: 'AbiFunctionNotFoundError'\n}\nexport class AbiFunctionNotFoundError extends BaseError {\n  constructor(\n    functionName?: string | undefined,\n    { docsPath }: { docsPath?: string | undefined } = {},\n  ) {\n    super(\n      [\n        `Function ${functionName ? `\"${functionName}\" ` : ''}not found on ABI.`,\n        'Make sure you are using the correct ABI and that the function exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiFunctionNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiFunctionOutputsNotFoundErrorType =\n  AbiFunctionOutputsNotFoundError & {\n    name: 'AbiFunctionOutputsNotFoundError'\n  }\nexport class AbiFunctionOutputsNotFoundError extends BaseError {\n  constructor(functionName: string, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Function \"${functionName}\" does not contain any \\`outputs\\` on ABI.`,\n        'Cannot decode function result without knowing what the parameter types are.',\n        'Make sure you are using the correct ABI and that the function exists on it.',\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiFunctionOutputsNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiFunctionSignatureNotFoundErrorType =\n  AbiFunctionSignatureNotFoundError & {\n    name: 'AbiFunctionSignatureNotFoundError'\n  }\nexport class AbiFunctionSignatureNotFoundError extends BaseError {\n  constructor(signature: Hex, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Encoded function signature \"${signature}\" not found on ABI.`,\n        'Make sure you are using the correct ABI and that the function exists on it.',\n        `You can look up the signature here: https://openchain.xyz/signatures?query=${signature}.`,\n      ].join('\\n'),\n      {\n        docsPath,\n        name: 'AbiFunctionSignatureNotFoundError',\n      },\n    )\n  }\n}\n\nexport type AbiItemAmbiguityErrorType = AbiItemAmbiguityError & {\n  name: 'AbiItemAmbiguityError'\n}\nexport class AbiItemAmbiguityError extends BaseError {\n  constructor(\n    x: { abiItem: Abi[number]; type: string },\n    y: { abiItem: Abi[number]; type: string },\n  ) {\n    super('Found ambiguous types in overloaded ABI items.', {\n      metaMessages: [\n        `\\`${x.type}\\` in \\`${formatAbiItem(x.abiItem)}\\`, and`,\n        `\\`${y.type}\\` in \\`${formatAbiItem(y.abiItem)}\\``,\n        '',\n        'These types encode differently and cannot be distinguished at runtime.',\n        'Remove one of the ambiguous items in the ABI.',\n      ],\n      name: 'AbiItemAmbiguityError',\n    })\n  }\n}\n\nexport type BytesSizeMismatchErrorType = BytesSizeMismatchError & {\n  name: 'BytesSizeMismatchError'\n}\nexport class BytesSizeMismatchError extends BaseError {\n  constructor({\n    expectedSize,\n    givenSize,\n  }: { expectedSize: number; givenSize: number }) {\n    super(`Expected bytes${expectedSize}, got bytes${givenSize}.`, {\n      name: 'BytesSizeMismatchError',\n    })\n  }\n}\n\nexport type DecodeLogDataMismatchErrorType = DecodeLogDataMismatch & {\n  name: 'DecodeLogDataMismatch'\n}\nexport class DecodeLogDataMismatch extends BaseError {\n  abiItem: AbiEvent\n  data: Hex\n  params: readonly AbiParameter[]\n  size: number\n\n  constructor({\n    abiItem,\n    data,\n    params,\n    size,\n  }: {\n    abiItem: AbiEvent\n    data: Hex\n    params: readonly AbiParameter[]\n    size: number\n  }) {\n    super(\n      [\n        `Data size of ${size} bytes is too small for non-indexed event parameters.`,\n      ].join('\\n'),\n      {\n        metaMessages: [\n          `Params: (${formatAbiParams(params, { includeName: true })})`,\n          `Data:   ${data} (${size} bytes)`,\n        ],\n        name: 'DecodeLogDataMismatch',\n      },\n    )\n\n    this.abiItem = abiItem\n    this.data = data\n    this.params = params\n    this.size = size\n  }\n}\n\nexport type DecodeLogTopicsMismatchErrorType = DecodeLogTopicsMismatch & {\n  name: 'DecodeLogTopicsMismatch'\n}\nexport class DecodeLogTopicsMismatch extends BaseError {\n  abiItem: AbiEvent\n\n  constructor({\n    abiItem,\n    param,\n  }: {\n    abiItem: AbiEvent\n    param: AbiParameter & { indexed: boolean }\n  }) {\n    super(\n      [\n        `Expected a topic for indexed event parameter${\n          param.name ? ` \"${param.name}\"` : ''\n        } on event \"${formatAbiItem(abiItem, { includeName: true })}\".`,\n      ].join('\\n'),\n      { name: 'DecodeLogTopicsMismatch' },\n    )\n\n    this.abiItem = abiItem\n  }\n}\n\nexport type InvalidAbiEncodingTypeErrorType = InvalidAbiEncodingTypeError & {\n  name: 'InvalidAbiEncodingTypeError'\n}\nexport class InvalidAbiEncodingTypeError extends BaseError {\n  constructor(type: string, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Type \"${type}\" is not a valid encoding type.`,\n        'Please provide a valid ABI type.',\n      ].join('\\n'),\n      { docsPath, name: 'InvalidAbiEncodingType' },\n    )\n  }\n}\n\nexport type InvalidAbiDecodingTypeErrorType = InvalidAbiDecodingTypeError & {\n  name: 'InvalidAbiDecodingTypeError'\n}\nexport class InvalidAbiDecodingTypeError extends BaseError {\n  constructor(type: string, { docsPath }: { docsPath: string }) {\n    super(\n      [\n        `Type \"${type}\" is not a valid decoding type.`,\n        'Please provide a valid ABI type.',\n      ].join('\\n'),\n      { docsPath, name: 'InvalidAbiDecodingType' },\n    )\n  }\n}\n\nexport type InvalidArrayErrorType = InvalidArrayError & {\n  name: 'InvalidArrayError'\n}\nexport class InvalidArrayError extends BaseError {\n  constructor(value: unknown) {\n    super([`Value \"${value}\" is not a valid array.`].join('\\n'), {\n      name: 'InvalidArrayError',\n    })\n  }\n}\n\nexport type InvalidDefinitionTypeErrorType = InvalidDefinitionTypeError & {\n  name: 'InvalidDefinitionTypeError'\n}\nexport class InvalidDefinitionTypeError extends BaseError {\n  constructor(type: string) {\n    super(\n      [\n        `\"${type}\" is not a valid definition type.`,\n        'Valid types: \"function\", \"event\", \"error\"',\n      ].join('\\n'),\n      { name: 'InvalidDefinitionTypeError' },\n    )\n  }\n}\n\nexport type UnsupportedPackedAbiTypeErrorType = UnsupportedPackedAbiType & {\n  name: 'UnsupportedPackedAbiType'\n}\nexport class UnsupportedPackedAbiType extends BaseError {\n  constructor(type: unknown) {\n    super(`Type \"${type}\" is not supported for packed encoding.`, {\n      name: 'UnsupportedPackedAbiType',\n    })\n  }\n}\n","import { BaseError } from './base.js'\n\nexport type InvalidAddressErrorType = InvalidAddressError & {\n  name: 'InvalidAddressError'\n}\nexport class InvalidAddressError extends BaseError {\n  constructor({ address }: { address: string }) {\n    super(`Address \"${address}\" is invalid.`, {\n      metaMessages: [\n        '- Address must be a hex value of 20 bytes (40 hex characters).',\n        '- Address must match its checksum counterpart.',\n      ],\n      name: 'InvalidAddressError',\n    })\n  }\n}\n","import type { ByteArray, Hex } from '../types/misc.js'\n\nimport { BaseError } from './base.js'\n\nexport type IntegerOutOfRangeErrorType = IntegerOutOfRangeError & {\n  name: 'IntegerOutOfRangeError'\n}\nexport class IntegerOutOfRangeError extends BaseError {\n  constructor({\n    max,\n    min,\n    signed,\n    size,\n    value,\n  }: {\n    max?: string | undefined\n    min: string\n    signed?: boolean | undefined\n    size?: number | undefined\n    value: string\n  }) {\n    super(\n      `Number \"${value}\" is not in safe ${\n        size ? `${size * 8}-bit ${signed ? 'signed' : 'unsigned'} ` : ''\n      }integer range ${max ? `(${min} to ${max})` : `(above ${min})`}`,\n      { name: 'IntegerOutOfRangeError' },\n    )\n  }\n}\n\nexport type InvalidBytesBooleanErrorType = InvalidBytesBooleanError & {\n  name: 'InvalidBytesBooleanError'\n}\nexport class InvalidBytesBooleanError extends BaseError {\n  constructor(bytes: ByteArray) {\n    super(\n      `Bytes value \"${bytes}\" is not a valid boolean. The bytes array must contain a single byte of either a 0 or 1 value.`,\n      {\n        name: 'InvalidBytesBooleanError',\n      },\n    )\n  }\n}\n\nexport type InvalidHexBooleanErrorType = InvalidHexBooleanError & {\n  name: 'InvalidHexBooleanError'\n}\nexport class InvalidHexBooleanError extends BaseError {\n  constructor(hex: Hex) {\n    super(\n      `Hex value \"${hex}\" is not a valid boolean. The hex value must be \"0x0\" (false) or \"0x1\" (true).`,\n      { name: 'InvalidHexBooleanError' },\n    )\n  }\n}\n\nexport type InvalidHexValueErrorType = InvalidHexValueError & {\n  name: 'InvalidHexValueError'\n}\nexport class InvalidHexValueError extends BaseError {\n  constructor(value: Hex) {\n    super(\n      `Hex value \"${value}\" is an odd length (${value.length}). It must be an even length.`,\n      { name: 'InvalidHexValueError' },\n    )\n  }\n}\n\nexport type SizeOverflowErrorType = SizeOverflowError & {\n  name: 'SizeOverflowError'\n}\nexport class SizeOverflowError extends BaseError {\n  constructor({ givenSize, maxSize }: { givenSize: number; maxSize: number }) {\n    super(\n      `Size cannot exceed ${maxSize} bytes. Given size: ${givenSize} bytes.`,\n      { name: 'SizeOverflowError' },\n    )\n  }\n}\n","/**\n * Map with a LRU (Least recently used) policy.\n *\n * @link https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU\n */\nexport class LruMap<value = unknown> extends Map<string, value> {\n  maxSize: number\n\n  constructor(size: number) {\n    super()\n    this.maxSize = size\n  }\n\n  override get(key: string) {\n    const value = super.get(key)\n\n    if (super.has(key) && value !== undefined) {\n      this.delete(key)\n      super.set(key, value)\n    }\n\n    return value\n  }\n\n  override set(key: string, value: value) {\n    super.set(key, value)\n    if (this.maxSize && this.size > this.maxSize) {\n      const firstKey = this.keys().next().value\n      if (firstKey) this.delete(firstKey)\n    }\n    return this\n  }\n}\n","import { BaseError } from './base.js'\n\nexport type SliceOffsetOutOfBoundsErrorType = SliceOffsetOutOfBoundsError & {\n  name: 'SliceOffsetOutOfBoundsError'\n}\nexport class SliceOffsetOutOfBoundsError extends BaseError {\n  constructor({\n    offset,\n    position,\n    size,\n  }: { offset: number; position: 'start' | 'end'; size: number }) {\n    super(\n      `Slice ${\n        position === 'start' ? 'starting' : 'ending'\n      } at offset \"${offset}\" is out-of-bounds (size: ${size}).`,\n      { name: 'SliceOffsetOutOfBoundsError' },\n    )\n  }\n}\n\nexport type SizeExceedsPaddingSizeErrorType = SizeExceedsPaddingSizeError & {\n  name: 'SizeExceedsPaddingSizeError'\n}\nexport class SizeExceedsPaddingSizeError extends BaseError {\n  constructor({\n    size,\n    targetSize,\n    type,\n  }: {\n    size: number\n    targetSize: number\n    type: 'hex' | 'bytes'\n  }) {\n    super(\n      `${type.charAt(0).toUpperCase()}${type\n        .slice(1)\n        .toLowerCase()} size (${size}) exceeds padding size (${targetSize}).`,\n      { name: 'SizeExceedsPaddingSizeError' },\n    )\n  }\n}\n\nexport type InvalidBytesLengthErrorType = InvalidBytesLengthError & {\n  name: 'InvalidBytesLengthError'\n}\nexport class InvalidBytesLengthError extends BaseError {\n  constructor({\n    size,\n    targetSize,\n    type,\n  }: {\n    size: number\n    targetSize: number\n    type: 'hex' | 'bytes'\n  }) {\n    super(\n      `${type.charAt(0).toUpperCase()}${type\n        .slice(1)\n        .toLowerCase()} is expected to be ${targetSize} ${type} long, but is ${size} ${type} long.`,\n      { name: 'InvalidBytesLengthError' },\n    )\n  }\n}\n","import {\n  SizeExceedsPaddingSizeError,\n  type SizeExceedsPaddingSizeErrorType,\n} from '../../errors/data.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\ntype PadOptions = {\n  dir?: 'left' | 'right' | undefined\n  size?: number | null | undefined\n}\nexport type PadReturnType<value extends ByteArray | Hex> = value extends Hex\n  ? Hex\n  : ByteArray\n\nexport type PadErrorType = PadHexErrorType | PadBytesErrorType | ErrorType\n\nexport function pad<value extends ByteArray | Hex>(\n  hexOrBytes: value,\n  { dir, size = 32 }: PadOptions = {},\n): PadReturnType<value> {\n  if (typeof hexOrBytes === 'string')\n    return padHex(hexOrBytes, { dir, size }) as PadReturnType<value>\n  return padBytes(hexOrBytes, { dir, size }) as PadReturnType<value>\n}\n\nexport type PadHexErrorType = SizeExceedsPaddingSizeErrorType | ErrorType\n\nexport function padHex(hex_: Hex, { dir, size = 32 }: PadOptions = {}) {\n  if (size === null) return hex_\n  const hex = hex_.replace('0x', '')\n  if (hex.length > size * 2)\n    throw new SizeExceedsPaddingSizeError({\n      size: Math.ceil(hex.length / 2),\n      targetSize: size,\n      type: 'hex',\n    })\n\n  return `0x${hex[dir === 'right' ? 'padEnd' : 'padStart'](\n    size * 2,\n    '0',\n  )}` as Hex\n}\n\nexport type PadBytesErrorType = SizeExceedsPaddingSizeErrorType | ErrorType\n\nexport function padBytes(\n  bytes: ByteArray,\n  { dir, size = 32 }: PadOptions = {},\n) {\n  if (size === null) return bytes\n  if (bytes.length > size)\n    throw new SizeExceedsPaddingSizeError({\n      size: bytes.length,\n      targetSize: size,\n      type: 'bytes',\n    })\n  const paddedBytes = new Uint8Array(size)\n  for (let i = 0; i < size; i++) {\n    const padEnd = dir === 'right'\n    paddedBytes[padEnd ? i : size - i - 1] =\n      bytes[padEnd ? i : bytes.length - i - 1]\n  }\n  return paddedBytes\n}\n","import {\n  InvalidHexBooleanError,\n  type InvalidHexBooleanErrorType,\n  SizeOverflowError,\n  type SizeOverflowErrorType,\n} from '../../errors/encoding.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type SizeErrorType, size as size_ } from '../data/size.js'\nimport { type TrimErrorType, trim } from '../data/trim.js'\n\nimport { type HexToBytesErrorType, hexToBytes } from './toBytes.js'\n\nexport type AssertSizeErrorType =\n  | SizeOverflowErrorType\n  | SizeErrorType\n  | ErrorType\n\nexport function assertSize(\n  hexOrBytes: Hex | ByteArray,\n  { size }: { size: number },\n): void {\n  if (size_(hexOrBytes) > size)\n    throw new SizeOverflowError({\n      givenSize: size_(hexOrBytes),\n      maxSize: size,\n    })\n}\n\nexport type FromHexParameters<\n  to extends 'string' | 'bigint' | 'number' | 'bytes' | 'boolean',\n> =\n  | to\n  | {\n      /** Size (in bytes) of the hex value. */\n      size?: number | undefined\n      /** Type to convert to. */\n      to: to\n    }\n\nexport type FromHexReturnType<to> = to extends 'string'\n  ? string\n  : to extends 'bigint'\n    ? bigint\n    : to extends 'number'\n      ? number\n      : to extends 'bytes'\n        ? ByteArray\n        : to extends 'boolean'\n          ? boolean\n          : never\n\nexport type FromHexErrorType =\n  | HexToNumberErrorType\n  | HexToBigIntErrorType\n  | HexToBoolErrorType\n  | HexToStringErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\n/**\n * Decodes a hex string into a string, number, bigint, boolean, or byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex\n * - Example: https://viem.sh/docs/utilities/fromHex#usage\n *\n * @param hex Hex string to decode.\n * @param toOrOpts Type to convert to or options.\n * @returns Decoded value.\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x1a4', 'number')\n * // 420\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x48656c6c6f20576f726c6421', 'string')\n * // 'Hello world'\n *\n * @example\n * import { fromHex } from 'viem'\n * const data = fromHex('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\n *   size: 32,\n *   to: 'string'\n * })\n * // 'Hello world'\n */\nexport function fromHex<\n  to extends 'string' | 'bigint' | 'number' | 'bytes' | 'boolean',\n>(hex: Hex, toOrOpts: FromHexParameters<to>): FromHexReturnType<to> {\n  const opts = typeof toOrOpts === 'string' ? { to: toOrOpts } : toOrOpts\n  const to = opts.to\n\n  if (to === 'number') return hexToNumber(hex, opts) as FromHexReturnType<to>\n  if (to === 'bigint') return hexToBigInt(hex, opts) as FromHexReturnType<to>\n  if (to === 'string') return hexToString(hex, opts) as FromHexReturnType<to>\n  if (to === 'boolean') return hexToBool(hex, opts) as FromHexReturnType<to>\n  return hexToBytes(hex, opts) as FromHexReturnType<to>\n}\n\nexport type HexToBigIntOpts = {\n  /** Whether or not the number of a signed representation. */\n  signed?: boolean | undefined\n  /** Size (in bytes) of the hex value. */\n  size?: number | undefined\n}\n\nexport type HexToBigIntErrorType = AssertSizeErrorType | ErrorType\n\n/**\n * Decodes a hex value into a bigint.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextobigint\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns BigInt value.\n *\n * @example\n * import { hexToBigInt } from 'viem'\n * const data = hexToBigInt('0x1a4', { signed: true })\n * // 420n\n *\n * @example\n * import { hexToBigInt } from 'viem'\n * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\n * // 420n\n */\nexport function hexToBigInt(hex: Hex, opts: HexToBigIntOpts = {}): bigint {\n  const { signed } = opts\n\n  if (opts.size) assertSize(hex, { size: opts.size })\n\n  const value = BigInt(hex)\n  if (!signed) return value\n\n  const size = (hex.length - 2) / 2\n  const max = (1n << (BigInt(size) * 8n - 1n)) - 1n\n  if (value <= max) return value\n\n  return value - BigInt(`0x${'f'.padStart(size * 2, 'f')}`) - 1n\n}\n\nexport type HexToBoolOpts = {\n  /** Size (in bytes) of the hex value. */\n  size?: number | undefined\n}\n\nexport type HexToBoolErrorType =\n  | AssertSizeErrorType\n  | InvalidHexBooleanErrorType\n  | TrimErrorType\n  | ErrorType\n\n/**\n * Decodes a hex value into a boolean.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextobool\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns Boolean value.\n *\n * @example\n * import { hexToBool } from 'viem'\n * const data = hexToBool('0x01')\n * // true\n *\n * @example\n * import { hexToBool } from 'viem'\n * const data = hexToBool('0x0000000000000000000000000000000000000000000000000000000000000001', { size: 32 })\n * // true\n */\nexport function hexToBool(hex_: Hex, opts: HexToBoolOpts = {}): boolean {\n  let hex = hex_\n  if (opts.size) {\n    assertSize(hex, { size: opts.size })\n    hex = trim(hex)\n  }\n  if (trim(hex) === '0x00') return false\n  if (trim(hex) === '0x01') return true\n  throw new InvalidHexBooleanError(hex)\n}\n\nexport type HexToNumberOpts = HexToBigIntOpts\n\nexport type HexToNumberErrorType = HexToBigIntErrorType | ErrorType\n\n/**\n * Decodes a hex string into a number.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextonumber\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns Number value.\n *\n * @example\n * import { hexToNumber } from 'viem'\n * const data = hexToNumber('0x1a4')\n * // 420\n *\n * @example\n * import { hexToNumber } from 'viem'\n * const data = hexToBigInt('0x00000000000000000000000000000000000000000000000000000000000001a4', { size: 32 })\n * // 420\n */\nexport function hexToNumber(hex: Hex, opts: HexToNumberOpts = {}): number {\n  return Number(hexToBigInt(hex, opts))\n}\n\nexport type HexToStringOpts = {\n  /** Size (in bytes) of the hex value. */\n  size?: number | undefined\n}\n\nexport type HexToStringErrorType =\n  | AssertSizeErrorType\n  | HexToBytesErrorType\n  | TrimErrorType\n  | ErrorType\n\n/**\n * Decodes a hex value into a UTF-8 string.\n *\n * - Docs: https://viem.sh/docs/utilities/fromHex#hextostring\n *\n * @param hex Hex value to decode.\n * @param opts Options.\n * @returns String value.\n *\n * @example\n * import { hexToString } from 'viem'\n * const data = hexToString('0x48656c6c6f20576f726c6421')\n * // 'Hello world!'\n *\n * @example\n * import { hexToString } from 'viem'\n * const data = hexToString('0x48656c6c6f20576f726c64210000000000000000000000000000000000000000', {\n *  size: 32,\n * })\n * // 'Hello world'\n */\nexport function hexToString(hex: Hex, opts: HexToStringOpts = {}): string {\n  let bytes = hexToBytes(hex)\n  if (opts.size) {\n    assertSize(bytes, { size: opts.size })\n    bytes = trim(bytes, { dir: 'right' })\n  }\n  return new TextDecoder().decode(bytes)\n}\n","import {\n  IntegerOutOfRangeError,\n  type IntegerOutOfRangeErrorType,\n} from '../../errors/encoding.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type PadErrorType, pad } from '../data/pad.js'\n\nimport { type AssertSizeErrorType, assertSize } from './fromHex.js'\n\nconst hexes = /*#__PURE__*/ Array.from({ length: 256 }, (_v, i) =>\n  i.toString(16).padStart(2, '0'),\n)\n\nexport type ToHexParameters = {\n  /** The size (in bytes) of the output hex value. */\n  size?: number | undefined\n}\n\nexport type ToHexErrorType =\n  | BoolToHexErrorType\n  | BytesToHexErrorType\n  | NumberToHexErrorType\n  | StringToHexErrorType\n  | ErrorType\n\n/**\n * Encodes a string, number, bigint, or ByteArray into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex\n * - Example: https://viem.sh/docs/utilities/toHex#usage\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex('Hello world')\n * // '0x48656c6c6f20776f726c6421'\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex(420)\n * // '0x1a4'\n *\n * @example\n * import { toHex } from 'viem'\n * const data = toHex('Hello world', { size: 32 })\n * // '0x48656c6c6f20776f726c64210000000000000000000000000000000000000000'\n */\nexport function toHex(\n  value: string | number | bigint | boolean | ByteArray,\n  opts: ToHexParameters = {},\n): Hex {\n  if (typeof value === 'number' || typeof value === 'bigint')\n    return numberToHex(value, opts)\n  if (typeof value === 'string') {\n    return stringToHex(value, opts)\n  }\n  if (typeof value === 'boolean') return boolToHex(value, opts)\n  return bytesToHex(value, opts)\n}\n\nexport type BoolToHexOpts = {\n  /** The size (in bytes) of the output hex value. */\n  size?: number | undefined\n}\n\nexport type BoolToHexErrorType = AssertSizeErrorType | PadErrorType | ErrorType\n\n/**\n * Encodes a boolean into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#booltohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(true)\n * // '0x1'\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(false)\n * // '0x0'\n *\n * @example\n * import { boolToHex } from 'viem'\n * const data = boolToHex(true, { size: 32 })\n * // '0x0000000000000000000000000000000000000000000000000000000000000001'\n */\nexport function boolToHex(value: boolean, opts: BoolToHexOpts = {}): Hex {\n  const hex: Hex = `0x${Number(value)}`\n  if (typeof opts.size === 'number') {\n    assertSize(hex, { size: opts.size })\n    return pad(hex, { size: opts.size })\n  }\n  return hex\n}\n\nexport type BytesToHexOpts = {\n  /** The size (in bytes) of the output hex value. */\n  size?: number | undefined\n}\n\nexport type BytesToHexErrorType = AssertSizeErrorType | PadErrorType | ErrorType\n\n/**\n * Encodes a bytes array into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#bytestohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { bytesToHex } from 'viem'\n * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n * // '0x48656c6c6f20576f726c6421'\n *\n * @example\n * import { bytesToHex } from 'viem'\n * const data = bytesToHex(Uint8Array.from([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]), { size: 32 })\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\n */\nexport function bytesToHex(value: ByteArray, opts: BytesToHexOpts = {}): Hex {\n  let string = ''\n  for (let i = 0; i < value.length; i++) {\n    string += hexes[value[i]]\n  }\n  const hex = `0x${string}` as const\n\n  if (typeof opts.size === 'number') {\n    assertSize(hex, { size: opts.size })\n    return pad(hex, { dir: 'right', size: opts.size })\n  }\n  return hex\n}\n\nexport type NumberToHexOpts =\n  | {\n      /** Whether or not the number of a signed representation. */\n      signed?: boolean | undefined\n      /** The size (in bytes) of the output hex value. */\n      size: number\n    }\n  | {\n      signed?: undefined\n      /** The size (in bytes) of the output hex value. */\n      size?: number | undefined\n    }\n\nexport type NumberToHexErrorType =\n  | IntegerOutOfRangeErrorType\n  | PadErrorType\n  | ErrorType\n\n/**\n * Encodes a number or bigint into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#numbertohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { numberToHex } from 'viem'\n * const data = numberToHex(420)\n * // '0x1a4'\n *\n * @example\n * import { numberToHex } from 'viem'\n * const data = numberToHex(420, { size: 32 })\n * // '0x00000000000000000000000000000000000000000000000000000000000001a4'\n */\nexport function numberToHex(\n  value_: number | bigint,\n  opts: NumberToHexOpts = {},\n): Hex {\n  const { signed, size } = opts\n\n  const value = BigInt(value_)\n\n  let maxValue: bigint | number | undefined\n  if (size) {\n    if (signed) maxValue = (1n << (BigInt(size) * 8n - 1n)) - 1n\n    else maxValue = 2n ** (BigInt(size) * 8n) - 1n\n  } else if (typeof value_ === 'number') {\n    maxValue = BigInt(Number.MAX_SAFE_INTEGER)\n  }\n\n  const minValue = typeof maxValue === 'bigint' && signed ? -maxValue - 1n : 0\n\n  if ((maxValue && value > maxValue) || value < minValue) {\n    const suffix = typeof value_ === 'bigint' ? 'n' : ''\n    throw new IntegerOutOfRangeError({\n      max: maxValue ? `${maxValue}${suffix}` : undefined,\n      min: `${minValue}${suffix}`,\n      signed,\n      size,\n      value: `${value_}${suffix}`,\n    })\n  }\n\n  const hex = `0x${(\n    signed && value < 0 ? (1n << BigInt(size * 8)) + BigInt(value) : value\n  ).toString(16)}` as Hex\n  if (size) return pad(hex, { size }) as Hex\n  return hex\n}\n\nexport type StringToHexOpts = {\n  /** The size (in bytes) of the output hex value. */\n  size?: number | undefined\n}\n\nexport type StringToHexErrorType = BytesToHexErrorType | ErrorType\n\nconst encoder = /*#__PURE__*/ new TextEncoder()\n\n/**\n * Encodes a UTF-8 string into a hex string\n *\n * - Docs: https://viem.sh/docs/utilities/toHex#stringtohex\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Hex value.\n *\n * @example\n * import { stringToHex } from 'viem'\n * const data = stringToHex('Hello World!')\n * // '0x48656c6c6f20576f726c6421'\n *\n * @example\n * import { stringToHex } from 'viem'\n * const data = stringToHex('Hello World!', { size: 32 })\n * // '0x48656c6c6f20576f726c64210000000000000000000000000000000000000000'\n */\nexport function stringToHex(value_: string, opts: StringToHexOpts = {}): Hex {\n  const value = encoder.encode(value_)\n  return bytesToHex(value, opts)\n}\n","import { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { type PadErrorType, pad } from '../data/pad.js'\n\nimport { type AssertSizeErrorType, assertSize } from './fromHex.js'\nimport {\n  type NumberToHexErrorType,\n  type NumberToHexOpts,\n  numberToHex,\n} from './toHex.js'\n\nconst encoder = /*#__PURE__*/ new TextEncoder()\n\nexport type ToBytesParameters = {\n  /** Size of the output bytes. */\n  size?: number | undefined\n}\n\nexport type ToBytesErrorType =\n  | NumberToBytesErrorType\n  | BoolToBytesErrorType\n  | HexToBytesErrorType\n  | StringToBytesErrorType\n  | IsHexErrorType\n  | ErrorType\n\n/**\n * Encodes a UTF-8 string, hex value, bigint, number or boolean to a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes\n * - Example: https://viem.sh/docs/utilities/toBytes#usage\n *\n * @param value Value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes('Hello world')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { toBytes } from 'viem'\n * const data = toBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */\nexport function toBytes(\n  value: string | bigint | number | boolean | Hex,\n  opts: ToBytesParameters = {},\n): ByteArray {\n  if (typeof value === 'number' || typeof value === 'bigint')\n    return numberToBytes(value, opts)\n  if (typeof value === 'boolean') return boolToBytes(value, opts)\n  if (isHex(value)) return hexToBytes(value, opts)\n  return stringToBytes(value, opts)\n}\n\nexport type BoolToBytesOpts = {\n  /** Size of the output bytes. */\n  size?: number | undefined\n}\n\nexport type BoolToBytesErrorType =\n  | AssertSizeErrorType\n  | PadErrorType\n  | ErrorType\n\n/**\n * Encodes a boolean into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#booltobytes\n *\n * @param value Boolean value to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true)\n * // Uint8Array([1])\n *\n * @example\n * import { boolToBytes } from 'viem'\n * const data = boolToBytes(true, { size: 32 })\n * // Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1])\n */\nexport function boolToBytes(value: boolean, opts: BoolToBytesOpts = {}) {\n  const bytes = new Uint8Array(1)\n  bytes[0] = Number(value)\n  if (typeof opts.size === 'number') {\n    assertSize(bytes, { size: opts.size })\n    return pad(bytes, { size: opts.size })\n  }\n  return bytes\n}\n\n// We use very optimized technique to convert hex string to byte array\nconst charCodeMap = {\n  zero: 48,\n  nine: 57,\n  A: 65,\n  F: 70,\n  a: 97,\n  f: 102,\n} as const\n\nfunction charCodeToBase16(char: number) {\n  if (char >= charCodeMap.zero && char <= charCodeMap.nine)\n    return char - charCodeMap.zero\n  if (char >= charCodeMap.A && char <= charCodeMap.F)\n    return char - (charCodeMap.A - 10)\n  if (char >= charCodeMap.a && char <= charCodeMap.f)\n    return char - (charCodeMap.a - 10)\n  return undefined\n}\n\nexport type HexToBytesOpts = {\n  /** Size of the output bytes. */\n  size?: number | undefined\n}\n\nexport type HexToBytesErrorType = AssertSizeErrorType | PadErrorType | ErrorType\n\n/**\n * Encodes a hex string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#hextobytes\n *\n * @param hex Hex string to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33])\n *\n * @example\n * import { hexToBytes } from 'viem'\n * const data = hexToBytes('0x48656c6c6f20776f726c6421', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */\nexport function hexToBytes(hex_: Hex, opts: HexToBytesOpts = {}): ByteArray {\n  let hex = hex_\n  if (opts.size) {\n    assertSize(hex, { size: opts.size })\n    hex = pad(hex, { dir: 'right', size: opts.size })\n  }\n\n  let hexString = hex.slice(2) as string\n  if (hexString.length % 2) hexString = `0${hexString}`\n\n  const length = hexString.length / 2\n  const bytes = new Uint8Array(length)\n  for (let index = 0, j = 0; index < length; index++) {\n    const nibbleLeft = charCodeToBase16(hexString.charCodeAt(j++))\n    const nibbleRight = charCodeToBase16(hexString.charCodeAt(j++))\n    if (nibbleLeft === undefined || nibbleRight === undefined) {\n      throw new BaseError(\n        `Invalid byte sequence (\"${hexString[j - 2]}${\n          hexString[j - 1]\n        }\" in \"${hexString}\").`,\n      )\n    }\n    bytes[index] = nibbleLeft * 16 + nibbleRight\n  }\n  return bytes\n}\n\nexport type NumberToBytesErrorType =\n  | NumberToHexErrorType\n  | HexToBytesErrorType\n  | ErrorType\n\n/**\n * Encodes a number into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#numbertobytes\n *\n * @param value Number to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420)\n * // Uint8Array([1, 164])\n *\n * @example\n * import { numberToBytes } from 'viem'\n * const data = numberToBytes(420, { size: 4 })\n * // Uint8Array([0, 0, 1, 164])\n */\nexport function numberToBytes(\n  value: bigint | number,\n  opts?: NumberToHexOpts | undefined,\n) {\n  const hex = numberToHex(value, opts)\n  return hexToBytes(hex)\n}\n\nexport type StringToBytesOpts = {\n  /** Size of the output bytes. */\n  size?: number | undefined\n}\n\nexport type StringToBytesErrorType =\n  | AssertSizeErrorType\n  | PadErrorType\n  | ErrorType\n\n/**\n * Encodes a UTF-8 string into a byte array.\n *\n * - Docs: https://viem.sh/docs/utilities/toBytes#stringtobytes\n *\n * @param value String to encode.\n * @param opts Options.\n * @returns Byte array value.\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!')\n * // Uint8Array([72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33])\n *\n * @example\n * import { stringToBytes } from 'viem'\n * const data = stringToBytes('Hello world!', { size: 32 })\n * // Uint8Array([72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n */\nexport function stringToBytes(\n  value: string,\n  opts: StringToBytesOpts = {},\n): ByteArray {\n  const bytes = encoder.encode(value)\n  if (typeof opts.size === 'number') {\n    assertSize(bytes, { size: opts.size })\n    return pad(bytes, { dir: 'right', size: opts.size })\n  }\n  return bytes\n}\n","import { keccak_256 } from '@noble/hashes/sha3'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type IsHexErrorType, isHex } from '../data/isHex.js'\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\nimport { type ToHexErrorType, toHex } from '../encoding/toHex.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type Keccak256Hash<to extends To> =\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type Keccak256ErrorType =\n  | IsHexErrorType\n  | ToBytesErrorType\n  | ToHexErrorType\n  | ErrorType\n\nexport function keccak256<to extends To = 'hex'>(\n  value: Hex | ByteArray,\n  to_?: to | undefined,\n): Keccak256Hash<to> {\n  const to = to_ || 'hex'\n  const bytes = keccak_256(\n    isHex(value, { strict: false }) ? toBytes(value) : value,\n  )\n  if (to === 'bytes') return bytes as Keccak256Hash<to>\n  return toHex(bytes) as Keccak256Hash<to>\n}\n","import type { Address } from 'abitype'\n\nimport { InvalidAddressError } from '../../errors/address.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type StringToBytesErrorType,\n  stringToBytes,\n} from '../encoding/toBytes.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport { LruMap } from '../lru.js'\nimport { type IsAddressErrorType, isAddress } from './isAddress.js'\n\nconst checksumAddressCache = /*#__PURE__*/ new LruMap<Address>(8192)\n\nexport type ChecksumAddressErrorType =\n  | Keccak256ErrorType\n  | StringToBytesErrorType\n  | ErrorType\n\nexport function checksumAddress(\n  address_: Address,\n  /**\n   * Warning: EIP-1191 checksum addresses are generally not backwards compatible with the\n   * wider Ethereum ecosystem, meaning it will break when validated against an application/tool\n   * that relies on EIP-55 checksum encoding (checksum without chainId).\n   *\n   * It is highly recommended to not use this feature unless you\n   * know what you are doing.\n   *\n   * See more: https://github.com/ethereum/EIPs/issues/1121\n   */\n  chainId?: number | undefined,\n): Address {\n  if (checksumAddressCache.has(`${address_}.${chainId}`))\n    return checksumAddressCache.get(`${address_}.${chainId}`)!\n\n  const hexAddress = chainId\n    ? `${chainId}${address_.toLowerCase()}`\n    : address_.substring(2).toLowerCase()\n  const hash = keccak256(stringToBytes(hexAddress), 'bytes')\n\n  const address = (\n    chainId ? hexAddress.substring(`${chainId}0x`.length) : hexAddress\n  ).split('')\n  for (let i = 0; i < 40; i += 2) {\n    if (hash[i >> 1] >> 4 >= 8 && address[i]) {\n      address[i] = address[i].toUpperCase()\n    }\n    if ((hash[i >> 1] & 0x0f) >= 8 && address[i + 1]) {\n      address[i + 1] = address[i + 1].toUpperCase()\n    }\n  }\n\n  const result = `0x${address.join('')}` as const\n  checksumAddressCache.set(`${address_}.${chainId}`, result)\n  return result\n}\n\nexport type GetAddressErrorType =\n  | ChecksumAddressErrorType\n  | IsAddressErrorType\n  | ErrorType\n\nexport function getAddress(\n  address: string,\n  /**\n   * Warning: EIP-1191 checksum addresses are generally not backwards compatible with the\n   * wider Ethereum ecosystem, meaning it will break when validated against an application/tool\n   * that relies on EIP-55 checksum encoding (checksum without chainId).\n   *\n   * It is highly recommended to not use this feature unless you\n   * know what you are doing.\n   *\n   * See more: https://github.com/ethereum/EIPs/issues/1121\n   */\n  chainId?: number,\n): Address {\n  if (!isAddress(address, { strict: false }))\n    throw new InvalidAddressError({ address })\n  return checksumAddress(address, chainId)\n}\n","import type { Address } from 'abitype'\nimport type { ErrorType } from '../../errors/utils.js'\nimport { LruMap } from '../lru.js'\nimport { checksumAddress } from './getAddress.js'\n\nconst addressRegex = /^0x[a-fA-F0-9]{40}$/\n\n/** @internal */\nexport const isAddressCache = /*#__PURE__*/ new LruMap<boolean>(8192)\n\nexport type IsAddressOptions = {\n  /**\n   * Enables strict mode. Whether or not to compare the address against its checksum.\n   *\n   * @default true\n   */\n  strict?: boolean | undefined\n}\n\nexport type IsAddressErrorType = ErrorType\n\nexport function isAddress(\n  address: string,\n  options?: IsAddressOptions | undefined,\n): address is Address {\n  const { strict = true } = options ?? {}\n  const cacheKey = `${address}.${strict}`\n\n  if (isAddressCache.has(cacheKey)) return isAddressCache.get(cacheKey)!\n\n  const result = (() => {\n    if (!addressRegex.test(address)) return false\n    if (address.toLowerCase() === address) return true\n    if (strict) return checksumAddress(address as Address) === address\n    return true\n  })()\n  isAddressCache.set(cacheKey, result)\n  return result\n}\n","import {\n  SliceOffsetOutOfBoundsError,\n  type SliceOffsetOutOfBoundsErrorType,\n} from '../../errors/data.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\n\nimport { type IsHexErrorType, isHex } from './isHex.js'\nimport { type SizeErrorType, size } from './size.js'\n\nexport type SliceReturnType<value extends ByteArray | Hex> = value extends Hex\n  ? Hex\n  : ByteArray\n\nexport type SliceErrorType =\n  | IsHexErrorType\n  | SliceBytesErrorType\n  | SliceHexErrorType\n  | ErrorType\n\n/**\n * @description Returns a section of the hex or byte array given a start/end bytes offset.\n *\n * @param value The hex or byte array to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function slice<value extends ByteArray | Hex>(\n  value: value,\n  start?: number | undefined,\n  end?: number | undefined,\n  { strict }: { strict?: boolean | undefined } = {},\n): SliceReturnType<value> {\n  if (isHex(value, { strict: false }))\n    return sliceHex(value as Hex, start, end, {\n      strict,\n    }) as SliceReturnType<value>\n  return sliceBytes(value as ByteArray, start, end, {\n    strict,\n  }) as SliceReturnType<value>\n}\n\nexport type AssertStartOffsetErrorType =\n  | SliceOffsetOutOfBoundsErrorType\n  | SizeErrorType\n  | ErrorType\n\nfunction assertStartOffset(value: Hex | ByteArray, start?: number | undefined) {\n  if (typeof start === 'number' && start > 0 && start > size(value) - 1)\n    throw new SliceOffsetOutOfBoundsError({\n      offset: start,\n      position: 'start',\n      size: size(value),\n    })\n}\n\nexport type AssertEndOffsetErrorType =\n  | SliceOffsetOutOfBoundsErrorType\n  | SizeErrorType\n  | ErrorType\n\nfunction assertEndOffset(\n  value: Hex | ByteArray,\n  start?: number | undefined,\n  end?: number | undefined,\n) {\n  if (\n    typeof start === 'number' &&\n    typeof end === 'number' &&\n    size(value) !== end - start\n  ) {\n    throw new SliceOffsetOutOfBoundsError({\n      offset: end,\n      position: 'end',\n      size: size(value),\n    })\n  }\n}\n\nexport type SliceBytesErrorType =\n  | AssertStartOffsetErrorType\n  | AssertEndOffsetErrorType\n  | ErrorType\n\n/**\n * @description Returns a section of the byte array given a start/end bytes offset.\n *\n * @param value The byte array to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function sliceBytes(\n  value_: ByteArray,\n  start?: number | undefined,\n  end?: number | undefined,\n  { strict }: { strict?: boolean | undefined } = {},\n): ByteArray {\n  assertStartOffset(value_, start)\n  const value = value_.slice(start, end)\n  if (strict) assertEndOffset(value, start, end)\n  return value\n}\n\nexport type SliceHexErrorType =\n  | AssertStartOffsetErrorType\n  | AssertEndOffsetErrorType\n  | ErrorType\n\n/**\n * @description Returns a section of the hex value given a start/end bytes offset.\n *\n * @param value The hex value to slice.\n * @param start The start offset (in bytes).\n * @param end The end offset (in bytes).\n */\nexport function sliceHex(\n  value_: Hex,\n  start?: number | undefined,\n  end?: number | undefined,\n  { strict }: { strict?: boolean | undefined } = {},\n): Hex {\n  assertStartOffset(value_, start)\n  const value = `0x${value_\n    .replace('0x', '')\n    .slice((start ?? 0) * 2, (end ?? value_.length) * 2)}` as const\n  if (strict) assertEndOffset(value, start, end)\n  return value\n}\n","export const arrayRegex = /^(.*)\\[([0-9]*)\\]$/\n\n// `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\n// https://regexr.com/6va55\nexport const bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/\n\n// `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\n// https://regexr.com/6v8hp\nexport const integerRegex =\n  /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/\n","import type {\n  AbiParameter,\n  AbiParameterToPrimitiveType,\n  AbiParametersToPrimitiveTypes,\n} from 'abitype'\n\nimport {\n  AbiEncodingArrayLengthMismatchError,\n  type AbiEncodingArrayLengthMismatchErrorType,\n  AbiEncodingBytesSizeMismatchError,\n  type AbiEncodingBytesSizeMismatchErrorType,\n  AbiEncodingLengthMismatchError,\n  type AbiEncodingLengthMismatchErrorType,\n  InvalidAbiEncodingTypeError,\n  type InvalidAbiEncodingTypeErrorType,\n  InvalidArrayError,\n  type InvalidArrayErrorType,\n} from '../../errors/abi.js'\nimport {\n  InvalidAddressError,\n  type InvalidAddressErrorType,\n} from '../../errors/address.js'\nimport { BaseError } from '../../errors/base.js'\nimport { IntegerOutOfRangeError } from '../../errors/encoding.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\nimport { type ConcatErrorType, concat } from '../data/concat.js'\nimport { type PadHexErrorType, padHex } from '../data/pad.js'\nimport { type SizeErrorType, size } from '../data/size.js'\nimport { type SliceErrorType, slice } from '../data/slice.js'\nimport {\n  type BoolToHexErrorType,\n  type NumberToHexErrorType,\n  type StringToHexErrorType,\n  boolToHex,\n  numberToHex,\n  stringToHex,\n} from '../encoding/toHex.js'\nimport { integerRegex } from '../regex.js'\n\nexport type EncodeAbiParametersReturnType = Hex\n\nexport type EncodeAbiParametersErrorType =\n  | AbiEncodingLengthMismatchErrorType\n  | PrepareParamsErrorType\n  | EncodeParamsErrorType\n  | ErrorType\n\n/**\n * @description Encodes a list of primitive values into an ABI-encoded hex value.\n *\n * - Docs: https://viem.sh/docs/abi/encodeAbiParameters#encodeabiparameters\n *\n *   Generates ABI encoded data using the [ABI specification](https://docs.soliditylang.org/en/latest/abi-spec), given a set of ABI parameters (inputs/outputs) and their corresponding values.\n *\n * @param params - a set of ABI Parameters (params), that can be in the shape of the inputs or outputs attribute of an ABI Item.\n * @param values - a set of values (values) that correspond to the given params.\n * @example\n * ```typescript\n * import { encodeAbiParameters } from 'viem'\n *\n * const encodedData = encodeAbiParameters(\n *   [\n *     { name: 'x', type: 'string' },\n *     { name: 'y', type: 'uint' },\n *     { name: 'z', type: 'bool' }\n *   ],\n *   ['wagmi', 420n, true]\n * )\n * ```\n *\n * You can also pass in Human Readable parameters with the parseAbiParameters utility.\n *\n * @example\n * ```typescript\n * import { encodeAbiParameters, parseAbiParameters } from 'viem'\n *\n * const encodedData = encodeAbiParameters(\n *   parseAbiParameters('string x, uint y, bool z'),\n *   ['wagmi', 420n, true]\n * )\n * ```\n */\nexport function encodeAbiParameters<\n  const params extends readonly AbiParameter[] | readonly unknown[],\n>(\n  params: params,\n  values: params extends readonly AbiParameter[]\n    ? AbiParametersToPrimitiveTypes<params>\n    : never,\n): EncodeAbiParametersReturnType {\n  if (params.length !== values.length)\n    throw new AbiEncodingLengthMismatchError({\n      expectedLength: params.length as number,\n      givenLength: values.length as any,\n    })\n  // Prepare the parameters to determine dynamic types to encode.\n  const preparedParams = prepareParams({\n    params: params as readonly AbiParameter[],\n    values: values as any,\n  })\n  const data = encodeParams(preparedParams)\n  if (data.length === 0) return '0x'\n  return data\n}\n\n/////////////////////////////////////////////////////////////////\n\ntype PreparedParam = { dynamic: boolean; encoded: Hex }\n\ntype TupleAbiParameter = AbiParameter & { components: readonly AbiParameter[] }\ntype Tuple = AbiParameterToPrimitiveType<TupleAbiParameter>\n\ntype PrepareParamsErrorType = PrepareParamErrorType | ErrorType\n\nfunction prepareParams<const params extends readonly AbiParameter[]>({\n  params,\n  values,\n}: {\n  params: params\n  values: AbiParametersToPrimitiveTypes<params>\n}) {\n  const preparedParams: PreparedParam[] = []\n  for (let i = 0; i < params.length; i++) {\n    preparedParams.push(prepareParam({ param: params[i], value: values[i] }))\n  }\n  return preparedParams\n}\n\ntype PrepareParamErrorType =\n  | EncodeAddressErrorType\n  | EncodeArrayErrorType\n  | EncodeBytesErrorType\n  | EncodeBoolErrorType\n  | EncodeNumberErrorType\n  | EncodeStringErrorType\n  | EncodeTupleErrorType\n  | GetArrayComponentsErrorType\n  | InvalidAbiEncodingTypeErrorType\n  | ErrorType\n\nfunction prepareParam<const param extends AbiParameter>({\n  param,\n  value,\n}: {\n  param: param\n  value: AbiParameterToPrimitiveType<param>\n}): PreparedParam {\n  const arrayComponents = getArrayComponents(param.type)\n  if (arrayComponents) {\n    const [length, type] = arrayComponents\n    return encodeArray(value, { length, param: { ...param, type } })\n  }\n  if (param.type === 'tuple') {\n    return encodeTuple(value as unknown as Tuple, {\n      param: param as TupleAbiParameter,\n    })\n  }\n  if (param.type === 'address') {\n    return encodeAddress(value as unknown as Hex)\n  }\n  if (param.type === 'bool') {\n    return encodeBool(value as unknown as boolean)\n  }\n  if (param.type.startsWith('uint') || param.type.startsWith('int')) {\n    const signed = param.type.startsWith('int')\n    const [, , size = '256'] = integerRegex.exec(param.type) ?? []\n    return encodeNumber(value as unknown as number, {\n      signed,\n      size: Number(size),\n    })\n  }\n  if (param.type.startsWith('bytes')) {\n    return encodeBytes(value as unknown as Hex, { param })\n  }\n  if (param.type === 'string') {\n    return encodeString(value as unknown as string)\n  }\n  throw new InvalidAbiEncodingTypeError(param.type, {\n    docsPath: '/docs/contract/encodeAbiParameters',\n  })\n}\n\n/////////////////////////////////////////////////////////////////\n\ntype EncodeParamsErrorType = NumberToHexErrorType | SizeErrorType | ErrorType\n\nfunction encodeParams(preparedParams: PreparedParam[]): Hex {\n  // 1. Compute the size of the static part of the parameters.\n  let staticSize = 0\n  for (let i = 0; i < preparedParams.length; i++) {\n    const { dynamic, encoded } = preparedParams[i]\n    if (dynamic) staticSize += 32\n    else staticSize += size(encoded)\n  }\n\n  // 2. Split the parameters into static and dynamic parts.\n  const staticParams: Hex[] = []\n  const dynamicParams: Hex[] = []\n  let dynamicSize = 0\n  for (let i = 0; i < preparedParams.length; i++) {\n    const { dynamic, encoded } = preparedParams[i]\n    if (dynamic) {\n      staticParams.push(numberToHex(staticSize + dynamicSize, { size: 32 }))\n      dynamicParams.push(encoded)\n      dynamicSize += size(encoded)\n    } else {\n      staticParams.push(encoded)\n    }\n  }\n\n  // 3. Concatenate static and dynamic parts.\n  return concat([...staticParams, ...dynamicParams])\n}\n\n/////////////////////////////////////////////////////////////////\n\ntype EncodeAddressErrorType =\n  | InvalidAddressErrorType\n  | IsAddressErrorType\n  | ErrorType\n\nfunction encodeAddress(value: Hex): PreparedParam {\n  if (!isAddress(value)) throw new InvalidAddressError({ address: value })\n  return { dynamic: false, encoded: padHex(value.toLowerCase() as Hex) }\n}\n\ntype EncodeArrayErrorType =\n  | AbiEncodingArrayLengthMismatchErrorType\n  | ConcatErrorType\n  | EncodeParamsErrorType\n  | InvalidArrayErrorType\n  | NumberToHexErrorType\n  // TODO: Add back once circular type reference is resolved\n  // | PrepareParamErrorType\n  | ErrorType\n\nfunction encodeArray<const param extends AbiParameter>(\n  value: AbiParameterToPrimitiveType<param>,\n  {\n    length,\n    param,\n  }: {\n    length: number | null\n    param: param\n  },\n): PreparedParam {\n  const dynamic = length === null\n\n  if (!Array.isArray(value)) throw new InvalidArrayError(value)\n  if (!dynamic && value.length !== length)\n    throw new AbiEncodingArrayLengthMismatchError({\n      expectedLength: length!,\n      givenLength: value.length,\n      type: `${param.type}[${length}]`,\n    })\n\n  let dynamicChild = false\n  const preparedParams: PreparedParam[] = []\n  for (let i = 0; i < value.length; i++) {\n    const preparedParam = prepareParam({ param, value: value[i] })\n    if (preparedParam.dynamic) dynamicChild = true\n    preparedParams.push(preparedParam)\n  }\n\n  if (dynamic || dynamicChild) {\n    const data = encodeParams(preparedParams)\n    if (dynamic) {\n      const length = numberToHex(preparedParams.length, { size: 32 })\n      return {\n        dynamic: true,\n        encoded: preparedParams.length > 0 ? concat([length, data]) : length,\n      }\n    }\n    if (dynamicChild) return { dynamic: true, encoded: data }\n  }\n  return {\n    dynamic: false,\n    encoded: concat(preparedParams.map(({ encoded }) => encoded)),\n  }\n}\n\ntype EncodeBytesErrorType =\n  | AbiEncodingBytesSizeMismatchErrorType\n  | ConcatErrorType\n  | PadHexErrorType\n  | NumberToHexErrorType\n  | SizeErrorType\n  | ErrorType\n\nfunction encodeBytes<const param extends AbiParameter>(\n  value: Hex,\n  { param }: { param: param },\n): PreparedParam {\n  const [, paramSize] = param.type.split('bytes')\n  const bytesSize = size(value)\n  if (!paramSize) {\n    let value_ = value\n    // If the size is not divisible by 32 bytes, pad the end\n    // with empty bytes to the ceiling 32 bytes.\n    if (bytesSize % 32 !== 0)\n      value_ = padHex(value_, {\n        dir: 'right',\n        size: Math.ceil((value.length - 2) / 2 / 32) * 32,\n      })\n    return {\n      dynamic: true,\n      encoded: concat([padHex(numberToHex(bytesSize, { size: 32 })), value_]),\n    }\n  }\n  if (bytesSize !== Number.parseInt(paramSize))\n    throw new AbiEncodingBytesSizeMismatchError({\n      expectedSize: Number.parseInt(paramSize),\n      value,\n    })\n  return { dynamic: false, encoded: padHex(value, { dir: 'right' }) }\n}\n\ntype EncodeBoolErrorType = PadHexErrorType | BoolToHexErrorType | ErrorType\n\nfunction encodeBool(value: boolean): PreparedParam {\n  if (typeof value !== 'boolean')\n    throw new BaseError(\n      `Invalid boolean value: \"${value}\" (type: ${typeof value}). Expected: \\`true\\` or \\`false\\`.`,\n    )\n  return { dynamic: false, encoded: padHex(boolToHex(value)) }\n}\n\ntype EncodeNumberErrorType = NumberToHexErrorType | ErrorType\n\nfunction encodeNumber(\n  value: number,\n  { signed, size = 256 }: { signed: boolean; size?: number | undefined },\n): PreparedParam {\n  if (typeof size === 'number') {\n    const max = 2n ** (BigInt(size) - (signed ? 1n : 0n)) - 1n\n    const min = signed ? -max - 1n : 0n\n    if (value > max || value < min)\n      throw new IntegerOutOfRangeError({\n        max: max.toString(),\n        min: min.toString(),\n        signed,\n        size: size / 8,\n        value: value.toString(),\n      })\n  }\n  return {\n    dynamic: false,\n    encoded: numberToHex(value, {\n      size: 32,\n      signed,\n    }),\n  }\n}\n\ntype EncodeStringErrorType =\n  | ConcatErrorType\n  | NumberToHexErrorType\n  | PadHexErrorType\n  | SizeErrorType\n  | SliceErrorType\n  | StringToHexErrorType\n  | ErrorType\n\nfunction encodeString(value: string): PreparedParam {\n  const hexValue = stringToHex(value)\n  const partsLength = Math.ceil(size(hexValue) / 32)\n  const parts: Hex[] = []\n  for (let i = 0; i < partsLength; i++) {\n    parts.push(\n      padHex(slice(hexValue, i * 32, (i + 1) * 32), {\n        dir: 'right',\n      }),\n    )\n  }\n  return {\n    dynamic: true,\n    encoded: concat([\n      padHex(numberToHex(size(hexValue), { size: 32 })),\n      ...parts,\n    ]),\n  }\n}\n\ntype EncodeTupleErrorType =\n  | ConcatErrorType\n  | EncodeParamsErrorType\n  // TODO: Add back once circular type reference is resolved\n  // | PrepareParamErrorType\n  | ErrorType\n\nfunction encodeTuple<\n  const param extends AbiParameter & { components: readonly AbiParameter[] },\n>(\n  value: AbiParameterToPrimitiveType<param>,\n  { param }: { param: param },\n): PreparedParam {\n  let dynamic = false\n  const preparedParams: PreparedParam[] = []\n  for (let i = 0; i < param.components.length; i++) {\n    const param_ = param.components[i]\n    const index = Array.isArray(value) ? i : param_.name\n    const preparedParam = prepareParam({\n      param: param_,\n      value: (value as any)[index!] as readonly unknown[],\n    })\n    preparedParams.push(preparedParam)\n    if (preparedParam.dynamic) dynamic = true\n  }\n  return {\n    dynamic,\n    encoded: dynamic\n      ? encodeParams(preparedParams)\n      : concat(preparedParams.map(({ encoded }) => encoded)),\n  }\n}\n\ntype GetArrayComponentsErrorType = ErrorType\n\nexport function getArrayComponents(\n  type: string,\n): [length: number | null, innerType: string] | undefined {\n  const matches = type.match(/^(.*)\\[(\\d+)?\\]$/)\n  return matches\n    ? // Return `null` if the array is dynamic.\n      [matches[2] ? Number(matches[2]) : null, matches[1]]\n    : undefined\n}\n","import { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { type Keccak256ErrorType, keccak256 } from './keccak256.js'\n\nconst hash = (value: string) => keccak256(toBytes(value))\n\nexport type HashSignatureErrorType =\n  | Keccak256ErrorType\n  | ToBytesErrorType\n  | ErrorType\n\nexport function hashSignature(sig: string) {\n  return hash(sig)\n}\n","import { type AbiEvent, type AbiFunction, formatAbiItem } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type NormalizeSignatureErrorType,\n  normalizeSignature,\n} from './normalizeSignature.js'\n\nexport type ToSignatureErrorType = NormalizeSignatureErrorType | ErrorType\n\n/**\n * Returns the signature for a given function or event definition.\n *\n * @example\n * const signature = toSignature('function ownerOf(uint256 tokenId)')\n * // 'ownerOf(uint256)'\n *\n * @example\n * const signature_3 = toSignature({\n *   name: 'ownerOf',\n *   type: 'function',\n *   inputs: [{ name: 'tokenId', type: 'uint256' }],\n *   outputs: [],\n *   stateMutability: 'view',\n * })\n * // 'ownerOf(uint256)'\n */\nexport const toSignature = (def: string | AbiFunction | AbiEvent) => {\n  const def_ = (() => {\n    if (typeof def === 'string') return def\n    return formatAbiItem(def)\n  })()\n  return normalizeSignature(def_)\n}\n","import { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\n\ntype NormalizeSignatureParameters = string\ntype NormalizeSignatureReturnType = string\nexport type NormalizeSignatureErrorType = ErrorType\n\nexport function normalizeSignature(\n  signature: NormalizeSignatureParameters,\n): NormalizeSignatureReturnType {\n  let active = true\n  let current = ''\n  let level = 0\n  let result = ''\n  let valid = false\n\n  for (let i = 0; i < signature.length; i++) {\n    const char = signature[i]\n\n    // If the character is a separator, we want to reactivate.\n    if (['(', ')', ','].includes(char)) active = true\n\n    // If the character is a \"level\" token, we want to increment/decrement.\n    if (char === '(') level++\n    if (char === ')') level--\n\n    // If we aren't active, we don't want to mutate the result.\n    if (!active) continue\n\n    // If level === 0, we are at the definition level.\n    if (level === 0) {\n      if (char === ' ' && ['event', 'function', ''].includes(result))\n        result = ''\n      else {\n        result += char\n\n        // If we are at the end of the definition, we must be finished.\n        if (char === ')') {\n          valid = true\n          break\n        }\n      }\n\n      continue\n    }\n\n    // Ignore spaces\n    if (char === ' ') {\n      // If the previous character is a separator, and the current section isn't empty, we want to deactivate.\n      if (signature[i - 1] !== ',' && current !== ',' && current !== ',(') {\n        current = ''\n        active = false\n      }\n      continue\n    }\n\n    result += char\n    current += char\n  }\n\n  if (!valid) throw new BaseError('Unable to normalize signature.')\n\n  return result\n}\n","import type { AbiEvent, AbiFunction } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { type HashSignatureErrorType, hashSignature } from './hashSignature.js'\nimport { type ToSignatureErrorType, toSignature } from './toSignature.js'\n\nexport type ToSignatureHashErrorType =\n  | HashSignatureErrorType\n  | ToSignatureErrorType\n  | ErrorType\n\n/**\n * Returns the hash (of the function/event signature) for a given event or function definition.\n */\nexport function toSignatureHash(fn: string | AbiFunction | AbiEvent) {\n  return hashSignature(toSignature(fn))\n}\n","import type { AbiFunction } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport { type SliceErrorType, slice } from '../data/slice.js'\nimport {\n  type ToSignatureHashErrorType,\n  toSignatureHash,\n} from './toSignatureHash.js'\n\nexport type ToFunctionSelectorErrorType =\n  | ToSignatureHashErrorType\n  | SliceErrorType\n  | ErrorType\n\n/**\n * Returns the function selector for a given function definition.\n *\n * @example\n * const selector = toFunctionSelector('function ownerOf(uint256 tokenId)')\n * // 0x6352211e\n */\nexport const toFunctionSelector = (fn: string | AbiFunction) =>\n  slice(toSignatureHash(fn), 0, 4)\n","import type { ErrorType } from '../../errors/utils.js'\nimport {\n  type ToSignatureHashErrorType,\n  toSignatureHash,\n} from './toSignatureHash.js'\n\nexport type ToEventSelectorErrorType = ToSignatureHashErrorType | ErrorType\n\n/**\n * Returns the event selector for a given event definition.\n *\n * @example\n * const selector = toEventSelector('Transfer(address indexed from, address indexed to, uint256 amount)')\n * // 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n */\nexport const toEventSelector = toSignatureHash\n","import type { Abi, AbiParameter, Address } from 'abitype'\n\nimport {\n  AbiItemAmbiguityError,\n  type AbiItemAmbiguityErrorType,\n} from '../../errors/abi.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type {\n  AbiItem,\n  AbiItemArgs,\n  AbiItemName,\n  ExtractAbiItemForArgs,\n  Widen,\n} from '../../types/contract.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { UnionEvaluate } from '../../types/utils.js'\nimport { type IsHexErrorType, isHex } from '../../utils/data/isHex.js'\nimport { type IsAddressErrorType, isAddress } from '../address/isAddress.js'\nimport { toEventSelector } from '../hash/toEventSelector.js'\nimport {\n  type ToFunctionSelectorErrorType,\n  toFunctionSelector,\n} from '../hash/toFunctionSelector.js'\n\nexport type GetAbiItemParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  name extends AbiItemName<abi> = AbiItemName<abi>,\n  args extends AbiItemArgs<abi, name> | undefined = AbiItemArgs<abi, name>,\n  ///\n  allArgs = AbiItemArgs<abi, name>,\n  allNames = AbiItemName<abi>,\n> = {\n  abi: abi\n  name:\n    | allNames // show all options\n    | (name extends allNames ? name : never) // infer value\n    | Hex // function selector\n} & UnionEvaluate<\n  readonly [] extends allArgs\n    ? {\n        args?:\n          | allArgs // show all options\n          // infer value, widen inferred value of `args` conditionally to match `allArgs`\n          | (abi extends Abi\n              ? args extends allArgs\n                ? Widen<args>\n                : never\n              : never)\n          | undefined\n      }\n    : {\n        args?:\n          | allArgs // show all options\n          | (Widen<args> & (args extends allArgs ? unknown : never)) // infer value, widen inferred value of `args` match `allArgs` (e.g. avoid union `args: readonly [123n] | readonly [bigint]`)\n          | undefined\n      }\n>\n\nexport type GetAbiItemErrorType =\n  | IsArgOfTypeErrorType\n  | IsHexErrorType\n  | ToFunctionSelectorErrorType\n  | AbiItemAmbiguityErrorType\n  | ErrorType\n\nexport type GetAbiItemReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  name extends AbiItemName<abi> = AbiItemName<abi>,\n  args extends AbiItemArgs<abi, name> | undefined = AbiItemArgs<abi, name>,\n> = abi extends Abi\n  ? Abi extends abi\n    ? AbiItem | undefined\n    : ExtractAbiItemForArgs<\n        abi,\n        name,\n        args extends AbiItemArgs<abi, name> ? args : AbiItemArgs<abi, name>\n      >\n  : AbiItem | undefined\n\nexport function getAbiItem<\n  const abi extends Abi | readonly unknown[],\n  name extends AbiItemName<abi>,\n  const args extends AbiItemArgs<abi, name> | undefined = undefined,\n>(\n  parameters: GetAbiItemParameters<abi, name, args>,\n): GetAbiItemReturnType<abi, name, args> {\n  const { abi, args = [], name } = parameters as unknown as GetAbiItemParameters\n\n  const isSelector = isHex(name, { strict: false })\n  const abiItems = (abi as Abi).filter((abiItem) => {\n    if (isSelector) {\n      if (abiItem.type === 'function')\n        return toFunctionSelector(abiItem) === name\n      if (abiItem.type === 'event') return toEventSelector(abiItem) === name\n      return false\n    }\n    return 'name' in abiItem && abiItem.name === name\n  })\n\n  if (abiItems.length === 0)\n    return undefined as GetAbiItemReturnType<abi, name, args>\n  if (abiItems.length === 1)\n    return abiItems[0] as GetAbiItemReturnType<abi, name, args>\n\n  let matchedAbiItem: AbiItem | undefined = undefined\n  for (const abiItem of abiItems) {\n    if (!('inputs' in abiItem)) continue\n    if (!args || args.length === 0) {\n      if (!abiItem.inputs || abiItem.inputs.length === 0)\n        return abiItem as GetAbiItemReturnType<abi, name, args>\n      continue\n    }\n    if (!abiItem.inputs) continue\n    if (abiItem.inputs.length === 0) continue\n    if (abiItem.inputs.length !== args.length) continue\n    const matched = args.every((arg, index) => {\n      const abiParameter = 'inputs' in abiItem && abiItem.inputs![index]\n      if (!abiParameter) return false\n      return isArgOfType(arg, abiParameter)\n    })\n    if (matched) {\n      // Check for ambiguity against already matched parameters (e.g. `address` vs `bytes20`).\n      if (\n        matchedAbiItem &&\n        'inputs' in matchedAbiItem &&\n        matchedAbiItem.inputs\n      ) {\n        const ambiguousTypes = getAmbiguousTypes(\n          abiItem.inputs,\n          matchedAbiItem.inputs,\n          args as readonly unknown[],\n        )\n        if (ambiguousTypes)\n          throw new AbiItemAmbiguityError(\n            {\n              abiItem,\n              type: ambiguousTypes[0],\n            },\n            {\n              abiItem: matchedAbiItem,\n              type: ambiguousTypes[1],\n            },\n          )\n      }\n\n      matchedAbiItem = abiItem\n    }\n  }\n\n  if (matchedAbiItem)\n    return matchedAbiItem as GetAbiItemReturnType<abi, name, args>\n  return abiItems[0] as GetAbiItemReturnType<abi, name, args>\n}\n\ntype IsArgOfTypeErrorType = IsAddressErrorType | ErrorType\n\n/** @internal */\nexport function isArgOfType(arg: unknown, abiParameter: AbiParameter): boolean {\n  const argType = typeof arg\n  const abiParameterType = abiParameter.type\n  switch (abiParameterType) {\n    case 'address':\n      return isAddress(arg as Address, { strict: false })\n    case 'bool':\n      return argType === 'boolean'\n    case 'function':\n      return argType === 'string'\n    case 'string':\n      return argType === 'string'\n    default: {\n      if (abiParameterType === 'tuple' && 'components' in abiParameter)\n        return Object.values(abiParameter.components).every(\n          (component, index) => {\n            return isArgOfType(\n              Object.values(arg as unknown[] | Record<string, unknown>)[index],\n              component as AbiParameter,\n            )\n          },\n        )\n\n      // `(u)int<M>`: (un)signed integer type of `M` bits, `0 < M <= 256`, `M % 8 == 0`\n      // https://regexr.com/6v8hp\n      if (\n        /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(\n          abiParameterType,\n        )\n      )\n        return argType === 'number' || argType === 'bigint'\n\n      // `bytes<M>`: binary type of `M` bytes, `0 < M <= 32`\n      // https://regexr.com/6va55\n      if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(abiParameterType))\n        return argType === 'string' || arg instanceof Uint8Array\n\n      // fixed-length (`<type>[M]`) and dynamic (`<type>[]`) arrays\n      // https://regexr.com/6va6i\n      if (/[a-z]+[1-9]{0,3}(\\[[0-9]{0,}\\])+$/.test(abiParameterType)) {\n        return (\n          Array.isArray(arg) &&\n          arg.every((x: unknown) =>\n            isArgOfType(x, {\n              ...abiParameter,\n              // Pop off `[]` or `[M]` from end of type\n              type: abiParameterType.replace(/(\\[[0-9]{0,}\\])$/, ''),\n            } as AbiParameter),\n          )\n        )\n      }\n\n      return false\n    }\n  }\n}\n\n/** @internal */\nexport function getAmbiguousTypes(\n  sourceParameters: readonly AbiParameter[],\n  targetParameters: readonly AbiParameter[],\n  args: AbiItemArgs,\n): AbiParameter['type'][] | undefined {\n  for (const parameterIndex in sourceParameters) {\n    const sourceParameter = sourceParameters[parameterIndex]\n    const targetParameter = targetParameters[parameterIndex]\n\n    if (\n      sourceParameter.type === 'tuple' &&\n      targetParameter.type === 'tuple' &&\n      'components' in sourceParameter &&\n      'components' in targetParameter\n    )\n      return getAmbiguousTypes(\n        sourceParameter.components,\n        targetParameter.components,\n        (args as any)[parameterIndex],\n      )\n\n    const types = [sourceParameter.type, targetParameter.type]\n\n    const ambiguous = (() => {\n      if (types.includes('address') && types.includes('bytes20')) return true\n      if (types.includes('address') && types.includes('string'))\n        return isAddress(args[parameterIndex] as Address, { strict: false })\n      if (types.includes('address') && types.includes('bytes'))\n        return isAddress(args[parameterIndex] as Address, { strict: false })\n      return false\n    })()\n\n    if (ambiguous) return types\n  }\n\n  return\n}\n","import type {\n  Abi,\n  AbiStateMutability,\n  ExtractAbiFunction,\n  ExtractAbiFunctions,\n} from 'abitype'\n\nimport {\n  AbiFunctionNotFoundError,\n  type AbiFunctionNotFoundErrorType,\n} from '../../errors/abi.js'\nimport type {\n  ContractFunctionArgs,\n  ContractFunctionName,\n} from '../../types/contract.js'\nimport type { ConcatHexErrorType } from '../data/concat.js'\nimport {\n  type ToFunctionSelectorErrorType,\n  toFunctionSelector,\n} from '../hash/toFunctionSelector.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\nimport { type FormatAbiItemErrorType, formatAbiItem } from './formatAbiItem.js'\nimport { type GetAbiItemErrorType, getAbiItem } from './getAbiItem.js'\n\nconst docsPath = '/docs/contract/encodeFunctionData'\n\nexport type PrepareEncodeFunctionDataParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends\n    | ContractFunctionName<abi>\n    | undefined = ContractFunctionName<abi>,\n  ///\n  hasFunctions = abi extends Abi\n    ? Abi extends abi\n      ? true\n      : [ExtractAbiFunctions<abi>] extends [never]\n        ? false\n        : true\n    : true,\n  allArgs = ContractFunctionArgs<\n    abi,\n    AbiStateMutability,\n    functionName extends ContractFunctionName<abi>\n      ? functionName\n      : ContractFunctionName<abi>\n  >,\n  allFunctionNames = ContractFunctionName<abi>,\n> = {\n  abi: abi\n} & UnionEvaluate<\n  IsNarrowable<abi, Abi> extends true\n    ? abi['length'] extends 1\n      ? { functionName?: functionName | allFunctionNames | Hex | undefined }\n      : { functionName: functionName | allFunctionNames | Hex }\n    : { functionName?: functionName | allFunctionNames | Hex | undefined }\n> &\n  UnionEvaluate<{ args?: allArgs | undefined }> &\n  (hasFunctions extends true ? unknown : never)\n\nexport type PrepareEncodeFunctionDataReturnType<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends\n    | ContractFunctionName<abi>\n    | undefined = ContractFunctionName<abi>,\n> = {\n  abi: abi extends Abi\n    ? functionName extends ContractFunctionName<abi>\n      ? [ExtractAbiFunction<abi, functionName>]\n      : abi\n    : Abi\n  functionName: Hex\n}\n\nexport type PrepareEncodeFunctionDataErrorType =\n  | AbiFunctionNotFoundErrorType\n  | ConcatHexErrorType\n  | FormatAbiItemErrorType\n  | GetAbiItemErrorType\n  | ToFunctionSelectorErrorType\n  | ErrorType\n\nexport function prepareEncodeFunctionData<\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi> | undefined = undefined,\n>(\n  parameters: PrepareEncodeFunctionDataParameters<abi, functionName>,\n): PrepareEncodeFunctionDataReturnType<abi, functionName> {\n  const { abi, args, functionName } =\n    parameters as PrepareEncodeFunctionDataParameters\n\n  let abiItem = abi[0]\n  if (functionName) {\n    const item = getAbiItem({\n      abi,\n      args,\n      name: functionName,\n    })\n    if (!item) throw new AbiFunctionNotFoundError(functionName, { docsPath })\n    abiItem = item\n  }\n\n  if (abiItem.type !== 'function')\n    throw new AbiFunctionNotFoundError(undefined, { docsPath })\n\n  return {\n    abi: [abiItem],\n    functionName: toFunctionSelector(formatAbiItem(abiItem)),\n  } as unknown as PrepareEncodeFunctionDataReturnType<abi, functionName>\n}\n","import type { Abi, AbiStateMutability, ExtractAbiFunctions } from 'abitype'\n\nimport type { AbiFunctionNotFoundErrorType } from '../../errors/abi.js'\nimport type {\n  ContractFunctionArgs,\n  ContractFunctionName,\n} from '../../types/contract.js'\nimport { type ConcatHexErrorType, concatHex } from '../data/concat.js'\nimport type { ToFunctionSelectorErrorType } from '../hash/toFunctionSelector.js'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { IsNarrowable, UnionEvaluate } from '../../types/utils.js'\nimport {\n  type EncodeAbiParametersErrorType,\n  encodeAbiParameters,\n} from './encodeAbiParameters.js'\nimport type { FormatAbiItemErrorType } from './formatAbiItem.js'\nimport type { GetAbiItemErrorType } from './getAbiItem.js'\nimport { prepareEncodeFunctionData } from './prepareEncodeFunctionData.js'\n\nexport type EncodeFunctionDataParameters<\n  abi extends Abi | readonly unknown[] = Abi,\n  functionName extends\n    | ContractFunctionName<abi>\n    | Hex\n    | undefined = ContractFunctionName<abi>,\n  ///\n  hasFunctions = abi extends Abi\n    ? Abi extends abi\n      ? true\n      : [ExtractAbiFunctions<abi>] extends [never]\n        ? false\n        : true\n    : true,\n  allArgs = ContractFunctionArgs<\n    abi,\n    AbiStateMutability,\n    functionName extends ContractFunctionName<abi>\n      ? functionName\n      : ContractFunctionName<abi>\n  >,\n  allFunctionNames = ContractFunctionName<abi>,\n> = {\n  abi: abi\n} & UnionEvaluate<\n  IsNarrowable<abi, Abi> extends true\n    ? abi['length'] extends 1\n      ? { functionName?: functionName | allFunctionNames | Hex | undefined }\n      : { functionName: functionName | allFunctionNames | Hex }\n    : { functionName?: functionName | allFunctionNames | Hex | undefined }\n> &\n  UnionEvaluate<\n    readonly [] extends allArgs\n      ? { args?: allArgs | undefined }\n      : { args: allArgs }\n  > &\n  (hasFunctions extends true ? unknown : never)\n\nexport type EncodeFunctionDataReturnType = Hex\n\nexport type EncodeFunctionDataErrorType =\n  | AbiFunctionNotFoundErrorType\n  | ConcatHexErrorType\n  | EncodeAbiParametersErrorType\n  | FormatAbiItemErrorType\n  | GetAbiItemErrorType\n  | ToFunctionSelectorErrorType\n  | ErrorType\n\nexport function encodeFunctionData<\n  const abi extends Abi | readonly unknown[],\n  functionName extends ContractFunctionName<abi> | undefined = undefined,\n>(\n  parameters: EncodeFunctionDataParameters<abi, functionName>,\n): EncodeFunctionDataReturnType {\n  const { args } = parameters as EncodeFunctionDataParameters\n\n  const { abi, functionName } = (() => {\n    if (\n      parameters.abi.length === 1 &&\n      parameters.functionName?.startsWith('0x')\n    )\n      return parameters as { abi: Abi; functionName: Hex }\n    return prepareEncodeFunctionData(parameters)\n  })()\n\n  const abiItem = abi[0]\n  const signature = functionName\n\n  const data =\n    'inputs' in abiItem && abiItem.inputs\n      ? encodeAbiParameters(abiItem.inputs, args ?? [])\n      : undefined\n  return concatHex([signature, data ?? '0x'])\n}\n","import type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex, SignableMessage } from '../../types/misc.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport { toPrefixedMessage } from './toPrefixedMessage.js'\n\ntype To = 'hex' | 'bytes'\n\nexport type HashMessageReturnType<to extends To> =\n  | (to extends 'bytes' ? ByteArray : never)\n  | (to extends 'hex' ? Hex : never)\n\nexport type HashMessageErrorType = Keccak256ErrorType | ErrorType\n\nexport function hashMessage<to extends To = 'hex'>(\n  message: SignableMessage,\n  to_?: to | undefined,\n): HashMessageReturnType<to> {\n  return keccak256(toPrefixedMessage(message), to_)\n}\n","import { presignMessagePrefix } from '../../constants/strings.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex, SignableMessage } from '../../types/misc.js'\nimport { type ConcatErrorType, concat } from '../data/concat.js'\nimport { size } from '../data/size.js'\nimport {\n  type BytesToHexErrorType,\n  type StringToHexErrorType,\n  bytesToHex,\n  stringToHex,\n} from '../encoding/toHex.js'\n\nexport type ToPrefixedMessageErrorType =\n  | ConcatErrorType\n  | StringToHexErrorType\n  | BytesToHexErrorType\n  | ErrorType\n\nexport function toPrefixedMessage(message_: SignableMessage): Hex {\n  const message = (() => {\n    if (typeof message_ === 'string') return stringToHex(message_)\n    if (typeof message_.raw === 'string') return message_.raw\n    return bytesToHex(message_.raw)\n  })()\n  const prefix = stringToHex(`${presignMessagePrefix}${size(message)}`)\n  return concat([prefix, message])\n}\n","import type { TypedData } from 'abitype'\n\nimport { stringify } from '../utils/stringify.js'\nimport { BaseError } from './base.js'\n\nexport type InvalidDomainErrorType = InvalidDomainError & {\n  name: 'InvalidDomainError'\n}\nexport class InvalidDomainError extends BaseError {\n  constructor({ domain }: { domain: unknown }) {\n    super(`Invalid domain \"${stringify(domain)}\".`, {\n      metaMessages: ['Must be a valid EIP-712 domain.'],\n    })\n  }\n}\n\nexport type InvalidPrimaryTypeErrorType = InvalidPrimaryTypeError & {\n  name: 'InvalidPrimaryTypeError'\n}\nexport class InvalidPrimaryTypeError extends BaseError {\n  constructor({\n    primaryType,\n    types,\n  }: { primaryType: string; types: TypedData | Record<string, unknown> }) {\n    super(\n      `Invalid primary type \\`${primaryType}\\` must be one of \\`${JSON.stringify(Object.keys(types))}\\`.`,\n      {\n        docsPath: '/api/glossary/Errors#typeddatainvalidprimarytypeerror',\n        metaMessages: ['Check that the primary type is a key in `types`.'],\n      },\n    )\n  }\n}\n\nexport type InvalidStructTypeErrorType = InvalidStructTypeError & {\n  name: 'InvalidStructTypeError'\n}\nexport class InvalidStructTypeError extends BaseError {\n  constructor({ type }: { type: string }) {\n    super(`Struct type \"${type}\" is invalid.`, {\n      metaMessages: ['Struct type must not be a Solidity type.'],\n      name: 'InvalidStructTypeError',\n    })\n  }\n}\n","import type { ErrorType } from '../errors/utils.js'\n\nexport type StringifyErrorType = ErrorType\n\nexport const stringify: typeof JSON.stringify = (value, replacer, space) =>\n  JSON.stringify(\n    value,\n    (key, value_) => {\n      const value = typeof value_ === 'bigint' ? value_.toString() : value_\n      return typeof replacer === 'function' ? replacer(key, value) : value\n    },\n    space,\n  )\n","import type { TypedData, TypedDataDomain, TypedDataParameter } from 'abitype'\n\nimport { BytesSizeMismatchError } from '../errors/abi.js'\nimport { InvalidAddressError } from '../errors/address.js'\nimport {\n  InvalidDomainError,\n  InvalidPrimaryTypeError,\n  InvalidStructTypeError,\n} from '../errors/typedData.js'\nimport type { ErrorType } from '../errors/utils.js'\nimport type { Hex } from '../types/misc.js'\nimport type { TypedDataDefinition } from '../types/typedData.js'\nimport { type IsAddressErrorType, isAddress } from './address/isAddress.js'\nimport { type SizeErrorType, size } from './data/size.js'\nimport { type NumberToHexErrorType, numberToHex } from './encoding/toHex.js'\nimport { bytesRegex, integerRegex } from './regex.js'\nimport {\n  type HashDomainErrorType,\n  hashDomain,\n} from './signature/hashTypedData.js'\nimport { stringify } from './stringify.js'\n\nexport type SerializeTypedDataErrorType =\n  | HashDomainErrorType\n  | IsAddressErrorType\n  | NumberToHexErrorType\n  | SizeErrorType\n  | ErrorType\n\nexport function serializeTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(parameters: TypedDataDefinition<typedData, primaryType>) {\n  const {\n    domain: domain_,\n    message: message_,\n    primaryType,\n    types,\n  } = parameters as unknown as TypedDataDefinition\n\n  const normalizeData = (\n    struct: readonly TypedDataParameter[],\n    data_: Record<string, unknown>,\n  ) => {\n    const data = { ...data_ }\n    for (const param of struct) {\n      const { name, type } = param\n      if (type === 'address') data[name] = (data[name] as string).toLowerCase()\n    }\n    return data\n  }\n\n  const domain = (() => {\n    if (!types.EIP712Domain) return {}\n    if (!domain_) return {}\n    return normalizeData(types.EIP712Domain, domain_)\n  })()\n\n  const message = (() => {\n    if (primaryType === 'EIP712Domain') return undefined\n    return normalizeData(types[primaryType], message_)\n  })()\n\n  return stringify({ domain, message, primaryType, types })\n}\n\nexport type ValidateTypedDataErrorType =\n  | HashDomainErrorType\n  | IsAddressErrorType\n  | NumberToHexErrorType\n  | SizeErrorType\n  | ErrorType\n\nexport function validateTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(parameters: TypedDataDefinition<typedData, primaryType>) {\n  const { domain, message, primaryType, types } =\n    parameters as unknown as TypedDataDefinition\n\n  const validateData = (\n    struct: readonly TypedDataParameter[],\n    data: Record<string, unknown>,\n  ) => {\n    for (const param of struct) {\n      const { name, type } = param\n      const value = data[name]\n\n      const integerMatch = type.match(integerRegex)\n      if (\n        integerMatch &&\n        (typeof value === 'number' || typeof value === 'bigint')\n      ) {\n        const [_type, base, size_] = integerMatch\n        // If number cannot be cast to a sized hex value, it is out of range\n        // and will throw.\n        numberToHex(value, {\n          signed: base === 'int',\n          size: Number.parseInt(size_) / 8,\n        })\n      }\n\n      if (type === 'address' && typeof value === 'string' && !isAddress(value))\n        throw new InvalidAddressError({ address: value })\n\n      const bytesMatch = type.match(bytesRegex)\n      if (bytesMatch) {\n        const [_type, size_] = bytesMatch\n        if (size_ && size(value as Hex) !== Number.parseInt(size_))\n          throw new BytesSizeMismatchError({\n            expectedSize: Number.parseInt(size_),\n            givenSize: size(value as Hex),\n          })\n      }\n\n      const struct = types[type]\n      if (struct) {\n        validateReference(type)\n        validateData(struct, value as Record<string, unknown>)\n      }\n    }\n  }\n\n  // Validate domain types.\n  if (types.EIP712Domain && domain) {\n    if (typeof domain !== 'object') throw new InvalidDomainError({ domain })\n    validateData(types.EIP712Domain, domain)\n  }\n\n  // Validate message types.\n  if (primaryType !== 'EIP712Domain') {\n    if (types[primaryType]) validateData(types[primaryType], message)\n    else throw new InvalidPrimaryTypeError({ primaryType, types })\n  }\n}\n\nexport type GetTypesForEIP712DomainErrorType = ErrorType\n\nexport function getTypesForEIP712Domain({\n  domain,\n}: { domain?: TypedDataDomain | undefined }): TypedDataParameter[] {\n  return [\n    typeof domain?.name === 'string' && { name: 'name', type: 'string' },\n    domain?.version && { name: 'version', type: 'string' },\n    (typeof domain?.chainId === 'number' ||\n      typeof domain?.chainId === 'bigint') && {\n      name: 'chainId',\n      type: 'uint256',\n    },\n    domain?.verifyingContract && {\n      name: 'verifyingContract',\n      type: 'address',\n    },\n    domain?.salt && { name: 'salt', type: 'bytes32' },\n  ].filter(Boolean) as TypedDataParameter[]\n}\n\nexport type DomainSeparatorErrorType =\n  | GetTypesForEIP712DomainErrorType\n  | HashDomainErrorType\n  | ErrorType\n\nexport function domainSeparator({ domain }: { domain: TypedDataDomain }): Hex {\n  return hashDomain({\n    domain,\n    types: {\n      EIP712Domain: getTypesForEIP712Domain({ domain }),\n    },\n  })\n}\n\n/** @internal */\nfunction validateReference(type: string) {\n  // Struct type must not be a Solidity type.\n  if (\n    type === 'address' ||\n    type === 'bool' ||\n    type === 'string' ||\n    type.startsWith('bytes') ||\n    type.startsWith('uint') ||\n    type.startsWith('int')\n  )\n    throw new InvalidStructTypeError({ type })\n}\n","// Implementation forked and adapted from https://github.com/MetaMask/eth-sig-util/blob/main/src/sign-typed-data.ts\n\nimport type { AbiParameter, TypedData, TypedDataDomain } from 'abitype'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Hex } from '../../types/misc.js'\nimport type { TypedDataDefinition } from '../../types/typedData.js'\nimport {\n  type EncodeAbiParametersErrorType,\n  encodeAbiParameters,\n} from '../abi/encodeAbiParameters.js'\nimport { concat } from '../data/concat.js'\nimport { type ToHexErrorType, toHex } from '../encoding/toHex.js'\nimport { type Keccak256ErrorType, keccak256 } from '../hash/keccak256.js'\nimport {\n  type GetTypesForEIP712DomainErrorType,\n  type ValidateTypedDataErrorType,\n  getTypesForEIP712Domain,\n  validateTypedData,\n} from '../typedData.js'\n\ntype MessageTypeProperty = {\n  name: string\n  type: string\n}\n\nexport type HashTypedDataParameters<\n  typedData extends TypedData | Record<string, unknown> = TypedData,\n  primaryType extends keyof typedData | 'EIP712Domain' = keyof typedData,\n> = TypedDataDefinition<typedData, primaryType>\n\nexport type HashTypedDataReturnType = Hex\n\nexport type HashTypedDataErrorType =\n  | GetTypesForEIP712DomainErrorType\n  | HashDomainErrorType\n  | HashStructErrorType\n  | ValidateTypedDataErrorType\n  | ErrorType\n\nexport function hashTypedData<\n  const typedData extends TypedData | Record<string, unknown>,\n  primaryType extends keyof typedData | 'EIP712Domain',\n>(\n  parameters: HashTypedDataParameters<typedData, primaryType>,\n): HashTypedDataReturnType {\n  const {\n    domain = {},\n    message,\n    primaryType,\n  } = parameters as HashTypedDataParameters\n  const types = {\n    EIP712Domain: getTypesForEIP712Domain({ domain }),\n    ...parameters.types,\n  }\n\n  // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n  // as we can't statically check this with TypeScript.\n  validateTypedData({\n    domain,\n    message,\n    primaryType,\n    types,\n  })\n\n  const parts: Hex[] = ['0x1901']\n  if (domain)\n    parts.push(\n      hashDomain({\n        domain,\n        types: types as Record<string, MessageTypeProperty[]>,\n      }),\n    )\n\n  if (primaryType !== 'EIP712Domain')\n    parts.push(\n      hashStruct({\n        data: message,\n        primaryType,\n        types: types as Record<string, MessageTypeProperty[]>,\n      }),\n    )\n\n  return keccak256(concat(parts))\n}\n\nexport type HashDomainErrorType = HashStructErrorType | ErrorType\n\nexport function hashDomain({\n  domain,\n  types,\n}: {\n  domain: TypedDataDomain\n  types: Record<string, MessageTypeProperty[]>\n}) {\n  return hashStruct({\n    data: domain,\n    primaryType: 'EIP712Domain',\n    types,\n  })\n}\n\nexport type HashStructErrorType =\n  | EncodeDataErrorType\n  | Keccak256ErrorType\n  | ErrorType\n\nexport function hashStruct({\n  data,\n  primaryType,\n  types,\n}: {\n  data: Record<string, unknown>\n  primaryType: string\n  types: Record<string, readonly MessageTypeProperty[]>\n}) {\n  const encoded = encodeData({\n    data,\n    primaryType,\n    types,\n  })\n  return keccak256(encoded)\n}\n\ntype EncodeDataErrorType =\n  | EncodeAbiParametersErrorType\n  | EncodeFieldErrorType\n  | HashTypeErrorType\n  | ErrorType\n\nfunction encodeData({\n  data,\n  primaryType,\n  types,\n}: {\n  data: Record<string, unknown>\n  primaryType: string\n  types: Record<string, readonly MessageTypeProperty[]>\n}) {\n  const encodedTypes: AbiParameter[] = [{ type: 'bytes32' }]\n  const encodedValues: unknown[] = [hashType({ primaryType, types })]\n\n  for (const field of types[primaryType]) {\n    const [type, value] = encodeField({\n      types,\n      name: field.name,\n      type: field.type,\n      value: data[field.name],\n    })\n    encodedTypes.push(type)\n    encodedValues.push(value)\n  }\n\n  return encodeAbiParameters(encodedTypes, encodedValues)\n}\n\ntype HashTypeErrorType =\n  | ToHexErrorType\n  | EncodeTypeErrorType\n  | Keccak256ErrorType\n  | ErrorType\n\nfunction hashType({\n  primaryType,\n  types,\n}: {\n  primaryType: string\n  types: Record<string, readonly MessageTypeProperty[]>\n}) {\n  const encodedHashType = toHex(encodeType({ primaryType, types }))\n  return keccak256(encodedHashType)\n}\n\ntype EncodeTypeErrorType = FindTypeDependenciesErrorType\n\nexport function encodeType({\n  primaryType,\n  types,\n}: {\n  primaryType: string\n  types: Record<string, readonly MessageTypeProperty[]>\n}) {\n  let result = ''\n  const unsortedDeps = findTypeDependencies({ primaryType, types })\n  unsortedDeps.delete(primaryType)\n\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()]\n  for (const type of deps) {\n    result += `${type}(${types[type]\n      .map(({ name, type: t }) => `${t} ${name}`)\n      .join(',')})`\n  }\n\n  return result\n}\n\ntype FindTypeDependenciesErrorType = ErrorType\n\nfunction findTypeDependencies(\n  {\n    primaryType: primaryType_,\n    types,\n  }: {\n    primaryType: string\n    types: Record<string, readonly MessageTypeProperty[]>\n  },\n  results: Set<string> = new Set(),\n): Set<string> {\n  const match = primaryType_.match(/^\\w*/u)\n  const primaryType = match?.[0]!\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results\n  }\n\n  results.add(primaryType)\n\n  for (const field of types[primaryType]) {\n    findTypeDependencies({ primaryType: field.type, types }, results)\n  }\n  return results\n}\n\ntype EncodeFieldErrorType =\n  | Keccak256ErrorType\n  | EncodeAbiParametersErrorType\n  | ToHexErrorType\n  | ErrorType\n\nfunction encodeField({\n  types,\n  name,\n  type,\n  value,\n}: {\n  types: Record<string, readonly MessageTypeProperty[]>\n  name: string\n  type: string\n  value: any\n}): [type: AbiParameter, value: any] {\n  if (types[type] !== undefined) {\n    return [\n      { type: 'bytes32' },\n      keccak256(encodeData({ data: value, primaryType: type, types })),\n    ]\n  }\n\n  if (type === 'bytes') {\n    const prepend = value.length % 2 ? '0' : ''\n    value = `0x${prepend + value.slice(2)}`\n    return [{ type: 'bytes32' }, keccak256(value)]\n  }\n\n  if (type === 'string') return [{ type: 'bytes32' }, keccak256(toHex(value))]\n\n  if (type.lastIndexOf(']') === type.length - 1) {\n    const parsedType = type.slice(0, type.lastIndexOf('['))\n    const typeValuePairs = (value as [AbiParameter, any][]).map((item) =>\n      encodeField({\n        name,\n        type: parsedType,\n        types,\n        value: item,\n      }),\n    )\n    return [\n      { type: 'bytes32' },\n      keccak256(\n        encodeAbiParameters(\n          typeValuePairs.map(([t]) => t),\n          typeValuePairs.map(([, v]) => v),\n        ),\n      ),\n    ]\n  }\n\n  return [{ type }, value]\n}\n","const MAGIC_VALUE = '0x1626ba7e';\nconst MAGIC_VALUE_BYTES = '0x20c13b0b';\n\nexport { MAGIC_VALUE, MAGIC_VALUE_BYTES };\n","export type Permission = {\n  parentCapability: string;\n  invoker: string;\n  date?: number;\n  caveats?: PermissionCaveat[];\n};\n\nexport type PermissionRequest = {\n  [method: string]: Record<string, unknown>;\n};\n\nexport type PermissionCaveat = {\n  type: string;\n  value?: unknown;\n  name?: string;\n};\n\nexport const PERMISSIONS_REQUEST_REJECTED = 4001;\n\nexport class PermissionsError extends Error {\n  public code: number;\n  public data?: unknown;\n\n  constructor(message: string, code: number, data?: unknown) {\n    super(message);\n\n    this.code = code;\n    this.data = data;\n\n    // Should adjust prototype manually because how TS handles the type extension compilation\n    // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, PermissionsError.prototype);\n  }\n}\n","import { Methods, RestrictedMethods } from '../communication/methods.js';\nimport { Communicator } from '../types/index.js';\nimport { PermissionRequest, Permission, PermissionsError, PERMISSIONS_REQUEST_REJECTED } from '../types/permissions.js';\n\nclass Wallet {\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n  }\n\n  async getPermissions(): Promise<Permission[]> {\n    const response = await this.communicator.send<Methods.wallet_getPermissions, undefined, Permission[]>(\n      Methods.wallet_getPermissions,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  async requestPermissions(permissions: PermissionRequest[]): Promise<Permission[]> {\n    if (!this.isPermissionRequestValid(permissions)) {\n      throw new PermissionsError('Permissions request is invalid', PERMISSIONS_REQUEST_REJECTED);\n    }\n\n    try {\n      const response = await this.communicator.send<\n        Methods.wallet_requestPermissions,\n        PermissionRequest[],\n        Permission[]\n      >(Methods.wallet_requestPermissions, permissions);\n\n      return response.data;\n    } catch {\n      throw new PermissionsError('Permissions rejected', PERMISSIONS_REQUEST_REJECTED);\n    }\n  }\n\n  isPermissionRequestValid(permissions: PermissionRequest[]): boolean {\n    return permissions.every((pr: PermissionRequest) => {\n      if (typeof pr === 'object') {\n        return Object.keys(pr).every((method) => {\n          if (Object.values(RestrictedMethods).includes(method as RestrictedMethods)) {\n            return true;\n          }\n\n          return false;\n        });\n      }\n\n      return false;\n    });\n  }\n}\n\nexport { Wallet };\n","import { Methods } from '../communication/index.js';\nimport { Safe } from '../safe/index.js';\nimport { Wallet } from '../wallet/index.js';\n\nimport { Permission, PermissionsError, PERMISSIONS_REQUEST_REJECTED } from '../types/permissions.js';\n\nconst hasPermission = (required: Methods, permissions: Permission[]): boolean =>\n  permissions.some((permission) => permission.parentCapability === required);\n\nconst requirePermission = () => (_: unknown, propertyKey: string, descriptor: PropertyDescriptor) => {\n  const originalMethod = descriptor.value;\n\n  descriptor.value = async function () {\n    // @ts-expect-error accessing private property from decorator. 'this' context is the class instance\n    const wallet = new Wallet((this as Safe).communicator);\n\n    let currentPermissions = await wallet.getPermissions();\n\n    if (!hasPermission(propertyKey as Methods, currentPermissions)) {\n      currentPermissions = await wallet.requestPermissions([{ [propertyKey as Methods]: {} }]);\n    }\n\n    if (!hasPermission(propertyKey as Methods, currentPermissions)) {\n      throw new PermissionsError('Permissions rejected', PERMISSIONS_REQUEST_REJECTED);\n    }\n\n    return originalMethod.apply(this);\n  };\n\n  return descriptor;\n};\n\nexport default requirePermission;\n","import { encodeFunctionData, Address, hashMessage, hashTypedData } from 'viem';\nimport { MAGIC_VALUE_BYTES, MAGIC_VALUE } from './signatures.js';\nimport { Methods } from '../communication/methods.js';\nimport { RPC_CALLS } from '../eth/constants.js';\nimport {\n  Communicator,\n  ChainInfo,\n  SafeBalances,\n  GetBalanceParams,\n  RPCPayload,\n  TransactionConfig,\n  EnvironmentInfo,\n  AddressBookItem,\n  isObjectEIP712TypedData,\n  EIP712TypedData,\n  SafeInfoExtended,\n} from '../types/index.js';\nimport requirePermission from '../decorators/requirePermissions.js';\n\nclass Safe {\n  private readonly communicator: Communicator;\n\n  constructor(communicator: Communicator) {\n    this.communicator = communicator;\n  }\n\n  async getChainInfo(): Promise<ChainInfo> {\n    const response = await this.communicator.send<Methods.getChainInfo, undefined, ChainInfo>(\n      Methods.getChainInfo,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  async getInfo(): Promise<SafeInfoExtended> {\n    const response = await this.communicator.send<Methods.getSafeInfo, undefined, SafeInfoExtended>(\n      Methods.getSafeInfo,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  // There is a possibility that this method will change because we may add pagination to the endpoint\n  async experimental_getBalances({ currency = 'usd' }: GetBalanceParams = {}): Promise<SafeBalances> {\n    const response = await this.communicator.send<Methods.getSafeBalances, { currency: string }, SafeBalances>(\n      Methods.getSafeBalances,\n      {\n        currency,\n      },\n    );\n\n    return response.data;\n  }\n\n  private async check1271Signature(messageHash: string, signature = '0x'): Promise<boolean> {\n    const safeInfo = await this.getInfo();\n\n    const encodedIsValidSignatureCall = encodeFunctionData({\n      abi: [\n        {\n          constant: false,\n          inputs: [\n            {\n              name: '_dataHash',\n              type: 'bytes32',\n            },\n            {\n              name: '_signature',\n              type: 'bytes',\n            },\n          ],\n          name: 'isValidSignature',\n          outputs: [\n            {\n              name: '',\n              type: 'bytes4',\n            },\n          ],\n          payable: false,\n          stateMutability: 'nonpayable',\n          type: 'function',\n        },\n      ] as const,\n      functionName: 'isValidSignature',\n      args: [messageHash as Address, signature as Address],\n    });\n\n    const payload = {\n      call: RPC_CALLS.eth_call,\n      params: [\n        {\n          to: safeInfo.safeAddress,\n          data: encodedIsValidSignatureCall,\n        },\n        'latest',\n      ],\n    };\n    try {\n      const response = await this.communicator.send<Methods.rpcCall, RPCPayload<[TransactionConfig, string]>, string>(\n        Methods.rpcCall,\n        payload,\n      );\n\n      return response.data.slice(0, 10).toLowerCase() === MAGIC_VALUE;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  private async check1271SignatureBytes(messageHash: string, signature = '0x'): Promise<boolean> {\n    const safeInfo = await this.getInfo();\n\n    const encodedIsValidSignatureCall = encodeFunctionData({\n      abi: [\n        {\n          constant: false,\n          inputs: [\n            {\n              name: '_data',\n              type: 'bytes',\n            },\n            {\n              name: '_signature',\n              type: 'bytes',\n            },\n          ],\n          name: 'isValidSignature',\n          outputs: [\n            {\n              name: '',\n              type: 'bytes4',\n            },\n          ],\n          payable: false,\n          stateMutability: 'nonpayable',\n          type: 'function',\n        },\n      ] as const,\n      functionName: 'isValidSignature',\n      args: [messageHash as Address, signature as Address],\n    });\n\n    const payload = {\n      call: RPC_CALLS.eth_call,\n      params: [\n        {\n          to: safeInfo.safeAddress,\n          data: encodedIsValidSignatureCall,\n        },\n        'latest',\n      ],\n    };\n\n    try {\n      const response = await this.communicator.send<Methods.rpcCall, RPCPayload<[TransactionConfig, string]>, string>(\n        Methods.rpcCall,\n        payload,\n      );\n\n      return response.data.slice(0, 10).toLowerCase() === MAGIC_VALUE_BYTES;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  calculateMessageHash(message: string): string {\n    return hashMessage(message);\n  }\n\n  calculateTypedMessageHash(typedMessage: EIP712TypedData): string {\n    const chainId =\n      typeof typedMessage.domain.chainId === 'object'\n        ? typedMessage.domain.chainId.toNumber()\n        : Number(typedMessage.domain.chainId);\n\n    let primaryType = typedMessage.primaryType;\n    if (!primaryType) {\n      const fields = Object.values(typedMessage.types);\n      // We try to infer primaryType (simplified ether's version)\n      const primaryTypes = Object.keys(typedMessage.types).filter((typeName) =>\n        fields.every((dataTypes) => dataTypes.every(({ type }) => type.replace('[', '').replace(']', '') !== typeName)),\n      );\n      if (primaryTypes.length === 0 || primaryTypes.length > 1) throw new Error('Please specify primaryType');\n      primaryType = primaryTypes[0];\n    }\n\n    return hashTypedData({\n      message: typedMessage.message,\n      domain: {\n        ...typedMessage.domain,\n        chainId,\n        verifyingContract: typedMessage.domain.verifyingContract as Address,\n        salt: typedMessage.domain.salt as Address,\n      },\n      types: typedMessage.types,\n      primaryType,\n    });\n  }\n\n  async getOffChainSignature(messageHash: string): Promise<string> {\n    const response = await this.communicator.send<Methods.getOffChainSignature, string, string>(\n      Methods.getOffChainSignature,\n      messageHash,\n    );\n\n    return response.data;\n  }\n\n  async isMessageSigned(message: string | EIP712TypedData, signature = '0x'): Promise<boolean> {\n    let check: (() => Promise<boolean>) | undefined;\n    if (typeof message === 'string') {\n      check = async (): Promise<boolean> => {\n        const messageHash = this.calculateMessageHash(message);\n        const messageHashSigned = await this.isMessageHashSigned(messageHash, signature);\n        return messageHashSigned;\n      };\n    }\n\n    if (isObjectEIP712TypedData(message)) {\n      check = async (): Promise<boolean> => {\n        const messageHash = this.calculateTypedMessageHash(message);\n        const messageHashSigned = await this.isMessageHashSigned(messageHash, signature);\n        return messageHashSigned;\n      };\n    }\n    if (check) {\n      const isValid = await check();\n\n      return isValid;\n    }\n\n    throw new Error('Invalid message type');\n  }\n\n  async isMessageHashSigned(messageHash: string, signature = '0x'): Promise<boolean> {\n    const checks = [this.check1271Signature.bind(this), this.check1271SignatureBytes.bind(this)];\n\n    for (const check of checks) {\n      const isValid = await check(messageHash, signature);\n      if (isValid) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  async getEnvironmentInfo(): Promise<EnvironmentInfo> {\n    const response = await this.communicator.send<Methods.getEnvironmentInfo, undefined, EnvironmentInfo>(\n      Methods.getEnvironmentInfo,\n      undefined,\n    );\n\n    return response.data;\n  }\n\n  @requirePermission()\n  async requestAddressBook(): Promise<AddressBookItem[]> {\n    const response = await this.communicator.send<Methods.requestAddressBook, undefined, AddressBookItem[]>(\n      Methods.requestAddressBook,\n      undefined,\n    );\n\n    return response.data;\n  }\n}\n\nexport { Safe };\n","import { Communicator } from './types/index.js';\nimport InterfaceCommunicator from './communication/index.js';\nimport { TXs } from './txs/index.js';\nimport { Eth } from './eth/index.js';\nimport { Safe } from './safe/index.js';\nimport { Wallet } from './wallet/index.js';\n\nexport type Opts = {\n  allowedDomains?: RegExp[];\n  debug?: boolean;\n};\n\nclass SafeAppsSDK {\n  private readonly communicator: Communicator;\n  public readonly eth: Eth;\n  public readonly txs: TXs;\n  public readonly safe: Safe;\n  public readonly wallet: Wallet;\n\n  constructor(opts: Opts = {}) {\n    const { allowedDomains = null, debug = false } = opts;\n\n    this.communicator = new InterfaceCommunicator(allowedDomains, debug);\n    this.eth = new Eth(this.communicator);\n    this.txs = new TXs(this.communicator);\n    this.safe = new Safe(this.communicator);\n    this.wallet = new Wallet(this.communicator);\n  }\n}\n\nexport default SafeAppsSDK;\n","import SDK from './sdk.js';\n\nexport default SDK;\nexport * from './sdk.js';\nexport * from './types/index.js';\nexport * from './communication/methods.js';\nexport * from './communication/messageFormatter.js';\nexport { getSDKVersion } from './version.js';\nexport * from './eth/constants.js';\n"],"names":["dec2hex","dec","toString","padStart","generateRequestId","window","len","arr","Uint8Array","crypto","getRandomValues","Array","from","join","generateId","Date","getTime","MessageFormatter","Methods","RestrictedMethods","makeRequest","method","params","id","env","sdkVersion","makeResponse","data","version","success","makeErrorResponse","error","constructor","allowedOrigins","arguments","length","undefined","debugMode","callbacks","Map","isServer","isValidMessage","_ref","origin","source","emptyOrMalformed","sentFromParentEl","this","parent","majorVersionNumber","parseInt","split","allowedSDKVersion","validOrigin","isArray","find","regExp","test","logIncomingMessage","msg","console","info","onParentMessage","handleIncomingMessage","payload","cb","get","delete","send","request","Error","postMessage","Promise","resolve","reject","set","response","addEventListener","isObjectEIP712TypedData","obj","TXs","communicator","getBySafeTxHash","safeTxHash","getTxBySafeTxHash","signMessage","message","messagePayload","signTypedMessage","typedData","txs","sendTransactions","RPC_CALLS","inputFormatters","defaultBlockParam","returnFullTxObjectParam","blockNumberToHex","arg","Number","isInteger","Eth","call","buildRequest","formatters","getBalance","getCode","getStorageAt","getPastLogs","getBlockByHash","getBlockByNumber","getTransactionByHash","getTransactionReceipt","getTransactionCount","getGasPrice","getEstimateGas","transaction","setSafeSettings","args","async","forEach","formatter","i","rpcCall","concat","values","concatHex","result","offset","concatBytes","reduce","acc","x","replace","formatAbiItem","abiItem","includeName","type","InvalidDefinitionTypeError","name","formatAbiParams","inputs","map","param","startsWith","components","slice","formatAbiParam","isHex","value","strict","size","Math","ceil","errorConfig","getDocsUrl","docsBaseUrl","docsPath","docsSlug","BaseError","shortMessage","details","cause","docsUrl","super","metaMessages","Object","defineProperty","walk","fn","err","AbiEncodingArrayLengthMismatchError","_ref5","expectedLength","givenLength","AbiEncodingBytesSizeMismatchError","_ref6","expectedSize","AbiEncodingLengthMismatchError","_ref7","AbiFunctionNotFoundError","functionName","AbiItemAmbiguityError","y","BytesSizeMismatchError","_ref14","givenSize","InvalidAbiEncodingTypeError","_ref17","InvalidArrayError","InvalidAddressError","address","IntegerOutOfRangeError","max","min","signed","SizeOverflowError","_ref2","maxSize","LruMap","key","has","firstKey","keys","next","SliceOffsetOutOfBoundsError","position","SizeExceedsPaddingSizeError","targetSize","charAt","toUpperCase","toLowerCase","pad","hexOrBytes","dir","padHex","bytes","paddedBytes","padEnd","padBytes","hex_","hex","assertSize","size_","hexes","_v","toHex","opts","numberToHex","stringToHex","boolToHex","bytesToHex","string","value_","BigInt","maxValue","MAX_SAFE_INTEGER","minValue","suffix","encoder","TextEncoder","encode","toBytes","hexToBytes","numberToBytes","boolToBytes","stringToBytes","charCodeMap","zero","nine","A","F","a","f","charCodeToBase16","char","hexString","index","j","nibbleLeft","charCodeAt","nibbleRight","keccak256","to_","to","keccak_256","checksumAddressCache","checksumAddress","address_","chainId","hexAddress","substring","hash","addressRegex","isAddressCache","isAddress","options","cacheKey","start","end","assertStartOffset","assertEndOffset","sliceHex","sliceBytes","bytesRegex","integerRegex","encodeAbiParameters","preparedParams","push","prepareParam","prepareParams","encodeParams","arrayComponents","matches","match","getArrayComponents","_ref3","dynamic","dynamicChild","preparedParam","encoded","_ref4","encodeArray","param_","_ref8","encodeTuple","encodeAddress","encodeBool","exec","encodeNumber","paramSize","bytesSize","encodeBytes","hexValue","partsLength","parts","encodeString","staticSize","staticParams","dynamicParams","dynamicSize","hashSignature","sig","toSignature","def","signature","active","current","level","valid","includes","normalizeSignature","toSignatureHash","toFunctionSelector","toEventSelector","isArgOfType","abiParameter","argType","abiParameterType","every","component","getAmbiguousTypes","sourceParameters","targetParameters","parameterIndex","sourceParameter","targetParameter","types","prepareEncodeFunctionData","parameters","abi","item","isSelector","abiItems","filter","matchedAbiItem","ambiguousTypes","getAbiItem","encodeFunctionData","hashMessage","message_","raw","toPrefixedMessage","InvalidDomainError","domain","stringify","replacer","space","JSON","InvalidPrimaryTypeError","primaryType","InvalidStructTypeError","getTypesForEIP712Domain","verifyingContract","salt","Boolean","validateReference","hashTypedData","EIP712Domain","validateData","struct","integerMatch","_type","base","bytesMatch","validateTypedData","hashStruct","hashDomain","encodeData","encodedTypes","encodedValues","hashType","field","encodeField","encodedHashType","unsortedDeps","findTypeDependencies","deps","sort","t","encodeType","primaryType_","results","Set","add","lastIndexOf","parsedType","typeValuePairs","_ref9","_ref10","v","PERMISSIONS_REQUEST_REJECTED","PermissionsError","code","setPrototypeOf","prototype","Wallet","getPermissions","wallet_getPermissions","requestPermissions","permissions","isPermissionRequestValid","wallet_requestPermissions","pr","hasPermission","required","some","permission","parentCapability","requirePermission","_","propertyKey","descriptor","originalMethod","wallet","currentPermissions","apply","Safe","getChainInfo","getInfo","getSafeInfo","experimental_getBalances","currency","getSafeBalances","check1271Signature","messageHash","safeInfo","encodedIsValidSignatureCall","constant","outputs","payable","stateMutability","safeAddress","check1271SignatureBytes","calculateMessageHash","calculateTypedMessageHash","typedMessage","toNumber","fields","primaryTypes","typeName","dataTypes","getOffChainSignature","isMessageSigned","check","isMessageHashSigned","checks","bind","getEnvironmentInfo","requestAddressBook","__decorate","allowedDomains","debug","InterfaceCommunicator","eth","safe"],"sourceRoot":""}